/**
 * @license
 * Copyright (c) 2023 Handsoncode. All rights reserved.
 */
import { ProcedureAst } from '../../parser';
import { InterpreterState } from '../InterpreterState';
import { InterpreterValue } from '../InterpreterValue';
import { FunctionArgumentType, FunctionPlugin, FunctionPluginTypecheck } from './FunctionPlugin';
export declare class ComplexPlugin extends FunctionPlugin implements FunctionPluginTypecheck<ComplexPlugin> {
    static implementedFunctions: {
        COMPLEX: {
            method: string;
            parameters: ({
                argumentType: FunctionArgumentType;
                defaultValue?: undefined;
            } | {
                argumentType: FunctionArgumentType;
                defaultValue: string;
            })[];
        };
        IMABS: {
            method: string;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
        };
        IMAGINARY: {
            method: string;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
        };
        IMREAL: {
            method: string;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
        };
        IMARGUMENT: {
            method: string;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
        };
        IMCONJUGATE: {
            method: string;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
        };
        IMCOS: {
            method: string;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
        };
        IMCOSH: {
            method: string;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
        };
        IMCOT: {
            method: string;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
        };
        IMCSC: {
            method: string;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
        };
        IMCSCH: {
            method: string;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
        };
        IMSEC: {
            method: string;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
        };
        IMSECH: {
            method: string;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
        };
        IMSIN: {
            method: string;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
        };
        IMSINH: {
            method: string;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
        };
        IMTAN: {
            method: string;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
        };
        IMDIV: {
            method: string;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
        };
        IMPRODUCT: {
            method: string;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
            repeatLastArgs: number;
        };
        IMSUM: {
            method: string;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
            repeatLastArgs: number;
        };
        IMSUB: {
            method: string;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
        };
        IMEXP: {
            method: string;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
        };
        IMLN: {
            method: string;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
        };
        IMLOG10: {
            method: string;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
        };
        IMLOG2: {
            method: string;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
        };
        IMPOWER: {
            method: string;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
        };
        IMSQRT: {
            method: string;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
        };
    };
    complex(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    imabs(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    imaginary(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    imreal(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    imargument(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    imconjugate(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    imcos(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    imcosh(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    imcot(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    imcsc(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    imcsch(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    imsec(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    imsech(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    imsin(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    imsinh(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    imtan(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    imdiv(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    improduct(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    imsum(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    imsub(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    imexp(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    imln(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    imlog10(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    imlog2(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    impower(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    imsqrt(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
}
