/**
 * @license
 * Copyright (c) 2023 Handsoncode. All rights reserved.
 */
import { ArraySize } from '../../ArraySize';
import { ProcedureAst } from '../../parser';
import { InterpreterState } from '../InterpreterState';
import { InterpreterValue } from '../InterpreterValue';
import { FunctionArgumentType, FunctionPlugin, FunctionPluginTypecheck } from './FunctionPlugin';
export declare class ArrayPlugin extends FunctionPlugin implements FunctionPluginTypecheck<ArrayPlugin> {
    static implementedFunctions: {
        ARRAYFORMULA: {
            method: string;
            arraySizeMethod: string;
            arrayFunction: boolean;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
        };
        ARRAY_CONSTRAIN: {
            method: string;
            arraySizeMethod: string;
            parameters: ({
                argumentType: FunctionArgumentType;
                minValue?: undefined;
            } | {
                argumentType: FunctionArgumentType;
                minValue: number;
            })[];
            vectorizationForbidden: boolean;
        };
        FILTER: {
            method: string;
            arraySizeMethod: string;
            arrayFunction: boolean;
            parameters: {
                argumentType: FunctionArgumentType;
            }[];
            repeatLastArgs: number;
        };
    };
    arrayformula(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    arrayformulaArraySize(ast: ProcedureAst, state: InterpreterState): ArraySize;
    arrayconstrain(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    arrayconstrainArraySize(ast: ProcedureAst, state: InterpreterState): ArraySize;
    filter(ast: ProcedureAst, state: InterpreterState): InterpreterValue;
    filterArraySize(ast: ProcedureAst, state: InterpreterState): ArraySize;
}
