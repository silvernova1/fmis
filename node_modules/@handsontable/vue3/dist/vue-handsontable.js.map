{"version":3,"file":"vue-handsontable.js","sources":["../src/helpers.ts","../src/HotTable.vue","../src/HotTable.vue?vue&type=template&id=54bcc3fa&lang.js","../src/HotColumn.vue"],"sourcesContent":["import Handsontable from 'handsontable/base';\nimport { HotTableProps, VueProps } from './types';\n\nconst unassignedPropSymbol = Symbol('unassigned');\n\n/**\n * Message for the warning thrown if the Handsontable instance has been destroyed.\n */\nexport const HOT_DESTROYED_WARNING = 'The Handsontable instance bound to this component was destroyed and cannot be' +\n  ' used properly.';\n\n/**\n * Check if at specified `key` there is any value for `object`.\n *\n * @param {object} object Object to search value at specyfic key.\n * @param {string} key String key to check.\n * @returns {boolean}\n */\nexport function hasOwnProperty(object: unknown, key: string): boolean {\n  return Object.prototype.hasOwnProperty.call(object, key);\n}\n\n/**\n * Generate an object containing all the available Handsontable properties and plugin hooks.\n *\n * @param {string} source Source for the factory (either 'HotTable' or 'HotColumn').\n * @returns {object}\n */\nexport function propFactory(source: 'HotTable' | 'HotColumn'): VueProps<HotTableProps> {\n  const registeredHooks = Handsontable.hooks.getRegistered();\n  const propSchema: VueProps<HotTableProps> = {};\n\n  Object.assign(propSchema, Handsontable.DefaultSettings);\n\n  // eslint-disable-next-line no-restricted-syntax, guard-for-in\n  for (const prop in propSchema) {\n    propSchema[prop] = {\n      default: unassignedPropSymbol\n    };\n  }\n\n  for (let i = 0; i < registeredHooks.length; i++) {\n    propSchema[registeredHooks[i]] = {\n      default: unassignedPropSymbol\n    };\n  }\n\n  propSchema.settings = {\n    default: unassignedPropSymbol\n  };\n\n  if (source === 'HotTable') {\n    propSchema.id = {\n      type: String,\n      default: `hot-${Math.random().toString(36).substring(5)}`\n    };\n  }\n\n  return propSchema;\n}\n\n/**\n * Filter out all of the unassigned props, and return only the one passed to the component.\n *\n * @param {object} props Object containing all the possible props.\n * @returns {object} Object containing only used props.\n */\nexport function filterPassedProps(props) {\n  const filteredProps: VueProps<HotTableProps> = {};\n  const columnSettingsProp = props.settings;\n\n  if (columnSettingsProp !== unassignedPropSymbol) {\n    // eslint-disable-next-line no-restricted-syntax\n    for (const propName in columnSettingsProp) {\n      if (hasOwnProperty(columnSettingsProp, propName) && columnSettingsProp[propName] !== unassignedPropSymbol) {\n        filteredProps[propName] = columnSettingsProp[propName];\n      }\n    }\n  }\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const propName in props) {\n    if (hasOwnProperty(props, propName) && propName !== 'settings' && props[propName] !== unassignedPropSymbol) {\n      filteredProps[propName] = props[propName];\n    }\n  }\n\n  return filteredProps;\n}\n\n/**\n * Prepare the settings object to be used as the settings for Handsontable, based on the props provided to the component.\n *\n * @param {HotTableProps} props The props passed to the component.\n * @param {Handsontable.GridSettings} currentSettings The current Handsontable settings.\n * @returns {Handsontable.GridSettings} An object containing the properties, ready to be used within Handsontable.\n */\nexport function prepareSettings(props: HotTableProps, currentSettings?: Handsontable.GridSettings): HotTableProps {\n  const assignedProps: VueProps<HotTableProps> = filterPassedProps(props);\n  const hotSettingsInProps: Handsontable.GridSettings = props.settings ? props.settings : assignedProps;\n  const additionalHotSettingsInProps: Handsontable.GridSettings = props.settings ? assignedProps : null;\n  const newSettings: Handsontable.GridSettings = {};\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const key in hotSettingsInProps) {\n    if (\n      hasOwnProperty(hotSettingsInProps, key) &&\n      hotSettingsInProps[key] !== void 0 &&\n      ((currentSettings && key !== 'data') ? !simpleEqual(currentSettings[key], hotSettingsInProps[key]) : true)\n    ) {\n      newSettings[key] = hotSettingsInProps[key];\n    }\n  }\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (const key in additionalHotSettingsInProps) {\n    if (\n      hasOwnProperty(additionalHotSettingsInProps, key) &&\n      key !== 'id' &&\n      key !== 'settings' &&\n      additionalHotSettingsInProps[key] !== void 0 &&\n      ((currentSettings && key !== 'data')\n        ? !simpleEqual(currentSettings[key], additionalHotSettingsInProps[key]) : true)\n    ) {\n      newSettings[key] = additionalHotSettingsInProps[key];\n    }\n  }\n\n  return newSettings;\n}\n\n/**\n * Compare two objects using `JSON.stringify`.\n * *Note: * As it's using the stringify function to compare objects, the property order in both objects is\n * important. It will return `false` for the same objects, if they're defined in a different order.\n *\n * @param {object} objectA First object to compare.\n * @param {object} objectB Second object to compare.\n * @returns {boolean} `true` if they're the same, `false` otherwise.\n */\nfunction simpleEqual(objectA, objectB) {\n  return JSON.stringify(objectA) === JSON.stringify(objectB);\n}\n","<template>\n  <div :id=\"id\">\n    <slot></slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, VNode, markRaw } from 'vue';\nimport Handsontable from 'handsontable/base';\nimport {\n  HOT_DESTROYED_WARNING,\n  prepareSettings,\n  propFactory,\n} from './helpers';\nimport {\n  HotTableProps,\n} from './types';\nimport * as packageJson from '../package.json';\n\nconst HotTable = defineComponent({\n  name: 'HotTable',\n  props: propFactory('HotTable'),\n  provide() {\n    return {\n      columnsCache: this.columnsCache\n    };\n  },\n  watch: {\n    $props: {\n      handler(props) {\n        const settings = prepareSettings(props, this.hotInstance ? this.hotInstance.getSettings() : void 0);\n\n        if (!this.hotInstance || settings === void 0) {\n          return;\n        }\n\n        if (settings.data) {\n          if (\n            this.hotInstance.isColumnModificationAllowed() ||\n            (\n              !this.hotInstance.isColumnModificationAllowed() &&\n              this.hotInstance.countSourceCols() === this.miscCache.currentSourceColumns\n            )\n          ) {\n            // If the dataset dimensions change, update the index mappers.\n            this.matchHotMappersSize();\n\n            // Data is automatically synchronized by reference.\n            delete settings.data;\n          }\n        }\n\n        // If there are another options changed, update the HOT settings, render the table otherwise.\n        if (Object.keys(settings).length) {\n          this.hotInstance.updateSettings(settings);\n\n        } else {\n          this.hotInstance.render();\n        }\n\n        this.miscCache.currentSourceColumns = this.hotInstance.countSourceCols();\n      },\n      deep: true,\n      immediate: true,\n    },\n  },\n  data() {\n    return {\n      /* eslint-disable vue/no-reserved-keys */\n      __hotInstance: null as Handsontable,\n      /* eslint-enable vue/no-reserved-keys */\n      miscCache: {\n        currentSourceColumns: null,\n      },\n      columnSettings: null as HotTableProps[],\n      columnsCache: new Map<VNode, HotTableProps>(),\n      get hotInstance(): Handsontable | null {\n        if (!this.__hotInstance || (this.__hotInstance && !this.__hotInstance.isDestroyed)) {\n\n          // Will return the Handsontable instance or `null` if it's not yet been created.\n          return this.__hotInstance;\n\n        } else {\n          /* eslint-disable-next-line no-console */\n          console.warn(HOT_DESTROYED_WARNING);\n\n          return null;\n        }\n      },\n      set hotInstance(hotInstance: Handsontable) {\n        this.__hotInstance = hotInstance;\n      },\n    };\n  },\n  methods: {\n    /**\n     * Initialize Handsontable.\n     */\n    hotInit() {\n      const newSettings = prepareSettings(this.$props);\n\n      newSettings.columns = this.columnSettings ? this.columnSettings : newSettings.columns;\n\n      this.hotInstance = markRaw<Handsontable>(new Handsontable.Core(this.$el, newSettings));\n      this.hotInstance.init();\n\n      this.miscCache.currentSourceColumns = this.hotInstance.countSourceCols();\n    },\n\n    matchHotMappersSize(): void {\n      if (!this.hotInstance) {\n        return;\n      }\n\n      const data: Handsontable.CellValue[][] = this.hotInstance.getSourceData();\n      const rowsToRemove: number[] = [];\n      const columnsToRemove: number[] = [];\n      const indexMapperRowCount = this.hotInstance.rowIndexMapper.getNumberOfIndexes();\n      const isColumnModificationAllowed = this.hotInstance.isColumnModificationAllowed();\n      let indexMapperColumnCount = 0;\n\n      if (data && data.length !== indexMapperRowCount) {\n        if (data.length < indexMapperRowCount) {\n          for (let r = data.length; r < indexMapperRowCount; r++) {\n            rowsToRemove.push(r);\n          }\n        }\n      }\n\n      if (isColumnModificationAllowed) {\n        indexMapperColumnCount = this.hotInstance.columnIndexMapper.getNumberOfIndexes();\n\n        if (data && data[0] && data[0]?.length !== indexMapperColumnCount) {\n          if (data[0].length < indexMapperColumnCount) {\n            for (let c = data[0].length; c < indexMapperColumnCount; c++) {\n              columnsToRemove.push(c);\n            }\n          }\n        }\n      }\n\n      this.hotInstance.batch(() => {\n        if (rowsToRemove.length > 0) {\n          this.hotInstance.rowIndexMapper.removeIndexes(rowsToRemove);\n\n        } else {\n          this.hotInstance.rowIndexMapper\n            .insertIndexes(indexMapperRowCount - 1, data.length - indexMapperRowCount);\n        }\n\n        if (isColumnModificationAllowed && data.length !== 0) {\n          if (columnsToRemove.length > 0) {\n            this.hotInstance.columnIndexMapper.removeIndexes(columnsToRemove);\n\n          } else {\n            this.hotInstance.columnIndexMapper\n              .insertIndexes(indexMapperColumnCount - 1, data[0].length - indexMapperColumnCount);\n          }\n        }\n      });\n    },\n\n    /**\n     * Get settings for the columns provided in the `hot-column` components.\n     *\n     * @returns {HotTableProps[] | undefined}\n     */\n    getColumnSettings(): HotTableProps[] | void {\n      const columnSettings: HotTableProps[] = Array.from(this.columnsCache.values());\n\n      return columnSettings.length ? columnSettings : void 0;\n    },\n  },\n  mounted() {\n    this.columnSettings = this.getColumnSettings();\n    this.hotInit();\n  },\n  beforeUnmount() {\n    if (this.hotInstance) {\n      this.hotInstance.destroy();\n    }\n  },\n  version: (packageJson as unknown as { version: string }).version,\n});\n\nexport default HotTable;\nexport { HotTable };\n</script>\n","<template>\n  <div :id=\"id\">\n    <slot></slot>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, VNode, markRaw } from 'vue';\nimport Handsontable from 'handsontable/base';\nimport {\n  HOT_DESTROYED_WARNING,\n  prepareSettings,\n  propFactory,\n} from './helpers';\nimport {\n  HotTableProps,\n} from './types';\nimport * as packageJson from '../package.json';\n\nconst HotTable = defineComponent({\n  name: 'HotTable',\n  props: propFactory('HotTable'),\n  provide() {\n    return {\n      columnsCache: this.columnsCache\n    };\n  },\n  watch: {\n    $props: {\n      handler(props) {\n        const settings = prepareSettings(props, this.hotInstance ? this.hotInstance.getSettings() : void 0);\n\n        if (!this.hotInstance || settings === void 0) {\n          return;\n        }\n\n        if (settings.data) {\n          if (\n            this.hotInstance.isColumnModificationAllowed() ||\n            (\n              !this.hotInstance.isColumnModificationAllowed() &&\n              this.hotInstance.countSourceCols() === this.miscCache.currentSourceColumns\n            )\n          ) {\n            // If the dataset dimensions change, update the index mappers.\n            this.matchHotMappersSize();\n\n            // Data is automatically synchronized by reference.\n            delete settings.data;\n          }\n        }\n\n        // If there are another options changed, update the HOT settings, render the table otherwise.\n        if (Object.keys(settings).length) {\n          this.hotInstance.updateSettings(settings);\n\n        } else {\n          this.hotInstance.render();\n        }\n\n        this.miscCache.currentSourceColumns = this.hotInstance.countSourceCols();\n      },\n      deep: true,\n      immediate: true,\n    },\n  },\n  data() {\n    return {\n      /* eslint-disable vue/no-reserved-keys */\n      __hotInstance: null as Handsontable,\n      /* eslint-enable vue/no-reserved-keys */\n      miscCache: {\n        currentSourceColumns: null,\n      },\n      columnSettings: null as HotTableProps[],\n      columnsCache: new Map<VNode, HotTableProps>(),\n      get hotInstance(): Handsontable | null {\n        if (!this.__hotInstance || (this.__hotInstance && !this.__hotInstance.isDestroyed)) {\n\n          // Will return the Handsontable instance or `null` if it's not yet been created.\n          return this.__hotInstance;\n\n        } else {\n          /* eslint-disable-next-line no-console */\n          console.warn(HOT_DESTROYED_WARNING);\n\n          return null;\n        }\n      },\n      set hotInstance(hotInstance: Handsontable) {\n        this.__hotInstance = hotInstance;\n      },\n    };\n  },\n  methods: {\n    /**\n     * Initialize Handsontable.\n     */\n    hotInit() {\n      const newSettings = prepareSettings(this.$props);\n\n      newSettings.columns = this.columnSettings ? this.columnSettings : newSettings.columns;\n\n      this.hotInstance = markRaw<Handsontable>(new Handsontable.Core(this.$el, newSettings));\n      this.hotInstance.init();\n\n      this.miscCache.currentSourceColumns = this.hotInstance.countSourceCols();\n    },\n\n    matchHotMappersSize(): void {\n      if (!this.hotInstance) {\n        return;\n      }\n\n      const data: Handsontable.CellValue[][] = this.hotInstance.getSourceData();\n      const rowsToRemove: number[] = [];\n      const columnsToRemove: number[] = [];\n      const indexMapperRowCount = this.hotInstance.rowIndexMapper.getNumberOfIndexes();\n      const isColumnModificationAllowed = this.hotInstance.isColumnModificationAllowed();\n      let indexMapperColumnCount = 0;\n\n      if (data && data.length !== indexMapperRowCount) {\n        if (data.length < indexMapperRowCount) {\n          for (let r = data.length; r < indexMapperRowCount; r++) {\n            rowsToRemove.push(r);\n          }\n        }\n      }\n\n      if (isColumnModificationAllowed) {\n        indexMapperColumnCount = this.hotInstance.columnIndexMapper.getNumberOfIndexes();\n\n        if (data && data[0] && data[0]?.length !== indexMapperColumnCount) {\n          if (data[0].length < indexMapperColumnCount) {\n            for (let c = data[0].length; c < indexMapperColumnCount; c++) {\n              columnsToRemove.push(c);\n            }\n          }\n        }\n      }\n\n      this.hotInstance.batch(() => {\n        if (rowsToRemove.length > 0) {\n          this.hotInstance.rowIndexMapper.removeIndexes(rowsToRemove);\n\n        } else {\n          this.hotInstance.rowIndexMapper\n            .insertIndexes(indexMapperRowCount - 1, data.length - indexMapperRowCount);\n        }\n\n        if (isColumnModificationAllowed && data.length !== 0) {\n          if (columnsToRemove.length > 0) {\n            this.hotInstance.columnIndexMapper.removeIndexes(columnsToRemove);\n\n          } else {\n            this.hotInstance.columnIndexMapper\n              .insertIndexes(indexMapperColumnCount - 1, data[0].length - indexMapperColumnCount);\n          }\n        }\n      });\n    },\n\n    /**\n     * Get settings for the columns provided in the `hot-column` components.\n     *\n     * @returns {HotTableProps[] | undefined}\n     */\n    getColumnSettings(): HotTableProps[] | void {\n      const columnSettings: HotTableProps[] = Array.from(this.columnsCache.values());\n\n      return columnSettings.length ? columnSettings : void 0;\n    },\n  },\n  mounted() {\n    this.columnSettings = this.getColumnSettings();\n    this.hotInit();\n  },\n  beforeUnmount() {\n    if (this.hotInstance) {\n      this.hotInstance.destroy();\n    }\n  },\n  version: (packageJson as unknown as { version: string }).version,\n});\n\nexport default HotTable;\nexport { HotTable };\n</script>\n","<script lang=\"ts\">\nimport { defineComponent } from 'vue';\nimport {\n  propFactory,\n  filterPassedProps\n} from './helpers';\n\nconst HotColumn = defineComponent({\n  name: 'HotColumn',\n  props: propFactory('HotColumn'),\n  inject: ['columnsCache'],\n  methods: {\n    /**\n     * Create the column settings based on the data provided to the `hot-column`\n     * component and it's child components.\n     */\n    createColumnSettings(): void {\n      const assignedProps = filterPassedProps(this.$props);\n      const columnSettings = { ...assignedProps };\n\n      if (assignedProps.renderer) {\n        columnSettings.renderer = assignedProps.renderer;\n      }\n\n      if (assignedProps.editor) {\n        columnSettings.editor = assignedProps.editor;\n      }\n\n      this.columnsCache.set(this, columnSettings);\n    }\n  },\n  mounted() {\n    this.createColumnSettings();\n  },\n  unmounted() {\n    this.columnsCache.delete(this);\n  },\n  render() {\n    return null;\n  }\n});\n\nexport default HotColumn;\nexport { HotColumn };\n</script>\n"],"names":["unassignedPropSymbol","Symbol","HOT_DESTROYED_WARNING","hasOwnProperty","object","key","Object","prototype","call","propFactory","source","registeredHooks","Handsontable","hooks","getRegistered","propSchema","assign","DefaultSettings","prop","i","length","settings","id","type","String","Math","random","toString","substring","filterPassedProps","props","filteredProps","columnSettingsProp","propName","prepareSettings","currentSettings","assignedProps","hotSettingsInProps","additionalHotSettingsInProps","newSettings","simpleEqual","objectA","objectB","JSON","stringify","HotTable","defineComponent","name","provide","columnsCache","watch","$props","handler","hotInstance","getSettings","data","isColumnModificationAllowed","countSourceCols","miscCache","currentSourceColumns","matchHotMappersSize","keys","updateSettings","render","deep","immediate","__hotInstance","columnSettings","Map","isDestroyed","console","warn","methods","hotInit","columns","markRaw","Core","$el","init","getSourceData","rowsToRemove","columnsToRemove","indexMapperRowCount","rowIndexMapper","getNumberOfIndexes","indexMapperColumnCount","r","push","columnIndexMapper","c","batch","removeIndexes","insertIndexes","getColumnSettings","Array","from","values","mounted","beforeUnmount","destroy","version","packageJson","_createElementBlock","_ctx","_renderSlot","$slots","HotColumn","inject","createColumnSettings","renderer","editor","set","unmounted"],"mappings":"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"}