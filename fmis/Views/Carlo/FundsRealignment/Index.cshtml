@model IEnumerable<fmis.Models.Carlo.FundsRealignment>
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

<input type="hidden" class="fundsrealignment" value="@ViewBag.temp">
<input type="hidden" class="uacs" value="@ViewBag.uacs">

<h3 class="grey lighter smaller">
    Funds Realignment
</h3>
<hr />
<a class="btn btn-primary btn-sm " asp-controller="Budget_allotments" asp-action="Fundsource" asp-route-id="@ViewBag.fundsource_id" asp-route-BudgetId="@ViewBag.BudgetId"><span class="glyphicon glyphicon-arrow-left"></span> Back to Fund Source</a>
<br />
<br />
<div class="">
    <div class="row">
        <div class="col-sm-2 infobox-container">
            <div class="infobox infobox-blue">
                <div class="infobox-data">
                   <span class="infobox-data-number "> @ViewBag.remaining_balance </span>
                    <h6 class="infobox-content grey smaller">REMAINING BALANCE</h6>
                </div>
            </div>
        </div>
    </div><!-- /.row -->
</div>
<br />
<div id="example" class="hot"></div>
<br />
<script>

    var CHECK_AFTER_ROW = false;
    var CHECK_FIRST_ROW = false;

    let guid = () => {
        let s4 = () => {
            return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
        }
        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
    }

     function ajaxServer(ajax_data, url) {
        $.ajax({
            type: 'POST',
            url: url,
            headers: { "RequestVerificationToken": '@GetAntiXsrfRequestToken()' },
            data: { data: ajax_data },
            success: function (output) {
                $('#loading_modal').modal('hide');
                console.log(output);
            }
        });
    }

    

    var uacs = $.parseJSON($(".uacs").val());
    var uacs_data_dropdown = []; //dara
    var uacs_data_array = []; //dara
    var get_account_title = []; //dara
    var uacs_counter = 0;
    $.each(uacs, function () {
        uacs_data_dropdown[uacs_counter] = this.Account_title; //dara
        var json_data = new Object(); //dara
        json_data.UacsId = this.UacsId; //dara
        json_data.Account_title = this.Account_title; //dara
        uacs_data_array[this.Account_title] = json_data; //dara
        get_account_title[this.UacsId] = this.Account_title;
        uacs_counter++;
    });

    var fundsource_amount = 0;
    var fundsrealignment = $.parseJSON($(".fundsrealignment").val());
    const data = [];
    var counter = 0;
    $.each(fundsrealignment, function () {
        data[counter] = [
            get_account_title[this.UacsId],
            get_account_title[this.UacsId],
            this.Realignment_amount,
            this.Id,
            this.token]
        counter++;
        fundsource_amount += this.Realignment_amount;
    })
    $(".fundsource_amount").html(fundsource_amount);

   @* var uacs = $.parseJSON($(".uacs").val());
    var uacs_data = []
    var uacs_counter = 0;
    $.each(uacs, function () {
        var json_data = new Object();
        json_data._id = this.UacsId;
        json_data.label = this.Account_title;
        json_data.exp_code = this.Expense_code;
        uacs_data[uacs_counter] = json_data;
        uacs_counter++;
    });
*@
    const searchField = document.querySelector('#search_field2');
    const button = document.querySelector('#export-file');
    const container = document.getElementById('example');
    const hot = new Handsontable(container, {
        data: data,
        colWidths: [350, 350, 350],
        rowHeaders: true,
        colHeaders: ['REALIGNMENT FROM', 'REALIGNMENT TO', 'AMOUNT', 'ID', 'TOKEN'],
        columns: [
            {
                type: 'dropdown',
                source: uacs_data_dropdown
            },
            {
                type: 'dropdown',
                source: uacs_data_dropdown
            },
            {
                type: 'text'
            },
            {
                //HIDDEN ID
            },
            {
                //HIDDEN TOKEN
            },
        ],
        undo: true,
        search: {
            searchResultClass: 'search-result-custom'
        },
        contextMenu: ['row_above', 'row_below', 'remove_row'],
        beforeRemoveRow: function (index, column) {
            var selection = this.getSelected();
            var holder_data = this.getData();
            var single_token = holder_data[selection[0][0]][4];

            var first_column = selection[0][0];
            var last_column = selection[0][2];
            console.log(first_column);
            console.log(last_column);
            var many_token = [];
            for (var j = first_column; j <= last_column; j++) {
                many_token.push({
                    many_token: holder_data[j][4]
                })
            }

            if (single_token) {
                var ajax_data = {
                    "single_token": single_token,
                    "many_token": many_token,
                };
                ajaxServer(ajax_data,'@Url.Action("DeleteFundsRealignment", "FundsRealignment")');
            }
        },
        afterUndo: function (index, column) {

        },
        afterCreateRow: function (row, column) {
            CHECK_AFTER_ROW = true;
            console.log(row);
            console.log(column);
            hot.setDataAtCell(row, 4, guid());
        },
       afterChange: function (changes, source) {
            if (source === 'loadData')
                return; //don't save this change

            @*var url = "" + "?id=" +@ViewBag.fundsourcfundsource_id;
            $.get(url, function (result) {
                var remaining_balance = result;
            });*@

          @*  var remaining_balance = @ViewBag.remaining_balance;*@
           console.log(source);

            var ajax_data = [];
            $(".fundsource_amount").html();
            fundsource_amount = 0;

            var realignment_amount = 0;
            $.each(hot.getSourceData(), function () {
                realignment_amount += parseInt(this[2]);
                ajax_data.push(
                    {
                        Realignment_from: this[0] ? this[0] : " ",
                        Realignment_to: this[1] ? this[1] : " ",
                        Realignment_amount: this[2] ? this[2] : " ",
                        fundsource_id: @ViewBag.fundsource_id,
                        token: this[4]
                    }
                );
            });
            if (realignment_amount > remaining_balance) {
                Lobibox.alert("warning", {
                    msg: "Insufficient balance!",
                    width: 350,
                    sound: false,
                });
                changes.forEach(([row, col, oldValue, newValue]) => {
                    if (oldValue == newValue)
                        return;
                    console.log(row);
                    console.log(col);
                    console.log(oldValue);
                    console.log(newValue);
                    hot.setDataAtCell(row, col, 0);
                });
                return ;
            }
            $(".fundsource_amount").html(fundsource_amount);
             ajaxServer(ajax_data, '@Url.Action("SaveFundsRealignment", "FundsRealignment")');
        },
        height: '250px',
        hiddenColumns: {
            columns: [3,4],
            indicators: true
        },
        licenseKey: 'non-commercial-and-evaluation', // for non-commercial use only
    });
    var tableData = JSON.stringify(hot.getSourceData());
</script>

