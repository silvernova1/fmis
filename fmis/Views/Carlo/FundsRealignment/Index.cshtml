@model fmis.Models.John.FundSource
@using System.Text.Json;
@using System.Globalization;
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}


<input type="hidden" class="fundsrealignment" value="@JsonSerializer.Serialize(Model.FundsRealignment)">
<input type="hidden" class="uacs" value="@JsonSerializer.Serialize(Model.Uacs)">
<input type="hidden" id="fundsource_id" value="@Model.FundSourceId" />

<h3 class="grey lighter smaller">
    Funds Realignment
</h3>
<hr />
<a class="btn btn-primary btn-sm " asp-controller="FundSource" asp-action="Index" asp-route-id="@Model.FundSourceId" asp-route-budget_id="@Model.Budget_allotmentBudgetAllotmentId"><span class="glyphicon glyphicon-arrow-left"></span> Back to Fund Source</a>
<br />
<br />
<div class="row  pull-left">
    <div class="space-5"></div>

    <div class="col-xs-12 infobox-container">
        <div class="infobox infobox-green">
            <div class="infobox-icon">
                <i class="ace-icon fa fa-money"></i>
            </div>
            <div class="infobox-data">
                <span class="infobox-data-number" style="font-size:11pt; color:grey;">
                    @Model.Remaining_balance.ToString("C", new CultureInfo("en-PH"))
                </span>
                <div class="infobox-content">
                    <span class="label label-success arrowed-in arrowed-in-right"> Beginning Balance </span>
                </div>
            </div>
        </div>
        <div class="infobox infobox-orange2">
            <div class="infobox-icon">
                <i class="ace-icon fa fa-bar-chart-o"></i>
            </div>
            <div class="infobox-data">
                <span class="infobox-data-number" style="font-size:11pt; color:grey;">
                    @Model.obligated_amount.ToString("C", new CultureInfo("en-PH"))
                </span>
                <div class="infobox-content">
                    <span class="label label-warning arrowed-in arrowed-in-right"> Obligated Amount </span>
                </div>
            </div>
        </div>
        <div class="infobox infobox-red">
            <div class="infobox-icon">
                <i class="ace-icon fa fa-calculator"></i>
            </div>
            <div class="infobox-data">
                <span class="infobox-data-number" style="font-size:11pt; color: grey;">
                    @Model.Remaining_balance.ToString("C", new CultureInfo("en-PH"))
                </span>
                <div class="infobox-content">
                    <span class="label label-danger arrowed-in arrowed-in-right"> Remaining Balance </span>
                </div>
            </div>
        </div>
    </div>
</div>
<br>
<br>
<br>
<br>
<br />
<div id="example" class="hot"></div>
<br />
<script>
    var fundsource_id = $("#fundsource_id").val();

    class KeyValueListEditor extends Handsontable.editors.HandsontableEditor {
        prepare(row, col, prop, td, value, cellProperties) {
            super.prepare(row, col, prop, td, value, cellProperties);

            Object.assign(this.htOptions, {
                licenseKey: 'non-commercial-and-evaluation',
                data: this.cellProperties.source,
                columns: [
                    {
                        data: '_id',
                    },
                    {
                        data: 'label',
                    }
                ],
                hiddenColumns: {
                    columns: [1],
                },
                colWidths: 500,
                beforeValueRender(value, { row, instance }) {
                    return instance.getDataAtRowProp(row, 'label');
                },
            });

            if (cellProperties.keyValueListCells) {
                this.htOptions.cells = cellProperties.keyValueListCells;
            }
            if (this.htEditor) {
                this.htEditor.destroy();
            }

            this.htEditor = new Handsontable(this.htContainer, this.htOptions);
        }

        setValue(value) {
            if (this.htEditor) {
                const index = this.htEditor.getDataAtProp('_id').findIndex(id => id === value);

                if (index !== -1) {
                    value = this.htEditor.getDataAtRowProp(index, 'label');
                }
            }
            super.setValue(value);
        }

        getValue() {
            const value = super.getValue();
            @* console.log(value);*@

            if (this.htEditor) {
                const labels = this.htEditor.getDataAtProp('label');
                const row = labels.indexOf(value);


                if (row !== -1) {
                    return this.htEditor.getDataAtRowProp(row, '_id');
                }
            }
            return value;
        }
    }

    const keyValueListValidator = function (value, callback) {
        let valueToValidate = value;

        if (valueToValidate === null || valueToValidate === void 0) {
            valueToValidate = '';
        }

        if (this.allowEmpty && valueToValidate === '') {
            callback(true);
        } else {
            callback(this.source.find(({ _id }) => _id === value) ? true : false);
        }
    };
    const keyValueListRenderer = function (hot, TD, row, col, prop, value, cellProperties) {
        const item = cellProperties.source.find(({ _id }) => _id === value);

        if (item) {
            value = item.label;
        }

        Handsontable.renderers.getRenderer('autocomplete').call(hot, hot, TD, row, col, prop, value, cellProperties);
    };

    Handsontable.cellTypes.registerCellType('key-value-list', {
        editor: KeyValueListEditor,
        validator: keyValueListValidator,
        renderer: keyValueListRenderer,
    });


    let guid = () => {
        let s4 = () => {
            return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
        }
        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
    }

     function ajaxServer(ajax_data, url) {
        $.ajax({
            type: 'POST',
            url: url,
            headers: { "RequestVerificationToken": '@GetAntiXsrfRequestToken()' },
            data: { data: ajax_data },
            success: function (output) {
                $('#loading_modal').modal('hide');
                console.log(output);
            }
        });
    }

    var fundsource_amount = 0;
    var fundsrealignment = $.parseJSON($(".fundsrealignment").val());
    const data = [];
    var counter = 0;
    $.each(fundsrealignment, function () {
        data[counter] = [this.Realignment_from, this.Realignment_to, this.Realignment_amount, this.Id, this.token]
        counter++;
        fundsource_amount += this.Realignment_amount;
    })
    $(".fundsource_amount").html(fundsource_amount);


    var uacs = $.parseJSON($(".uacs").val());
    var uacs_data = []
    var uacs_counter = 0;

    $.each(uacs, function () {
        var json_data = new Object();
        json_data._id = this.UacsId;
        json_data.label = this.Account_title;
        json_data.exp_code = this.Expense_code;
        uacs_data[uacs_counter] = json_data;
        uacs_counter++;
    });

    const searchField = document.querySelector('#search_field2');
    const button = document.querySelector('#export-file');
    const container = document.getElementById('example');
    const hot = new Handsontable(container, {
        data: data,
        colWidths: [350, 350, 350],
        rowHeaders: true,
        colHeaders: ['REALIGNMENT FROM', 'REALIGNMENT TO', 'AMOUNT', 'ID', 'TOKEN'],
        columns: [
            {

            },
            {

            },
            {
                type: 'text'
            },
            {
                //HIDDEN ID
            },
            {
                //HIDDEN TOKEN
            },

        ],
        undo: true,
        search: {
            searchResultClass: 'search-result-custom'
        },
        contextMenu: ['row_above', 'row_below', 'remove_row'],
        beforeRemoveRow: function (index, column) {
            var selection = this.getSelected();
            var holder_data = this.getData();
            var single_token = holder_data[selection[0][0]][4];

            var first_column = selection[0][0];
            var last_column = selection[0][2];
            console.log(first_column);
            console.log(last_column);
            var many_token = [];
            for (var j = first_column; j <= last_column; j++) {
                many_token.push({
                    many_token: holder_data[j][4]
                })
            }

            if (single_token) {
                var ajax_data = {
                    "single_token": single_token,
                    "many_token": many_token,
                };

                ajaxServer(ajax_data,'@Url.Action("DeleteFundsRealignment", "FundsRealignment")');
            }

        },
        afterUndo: function (index, column) {

        },
        afterCreateRow: function (row, column) {

            console.log(row);
            console.log(column);
            hot.setDataAtCell(row, 4, guid());
        },
       afterChange: function (changes, source) {

            if (source === 'loadData')
                return; //don't save this change

            var remaining_balance = 10000;

            var ajax_data = [];
            $(".fundsource_amount").html();
            fundsource_amount = 0;
            var realignment_amount = 0;
            $.each(hot.getSourceData(), function () {
                realignment_amount += parseInt(this[2]);
                ajax_data.push(
                    {
                        Realignment_from: this[0] ? this[0] : " ",
                        Realignment_to: this[1] ? this[1] : " ",
                        Realignment_amount: this[2] ? this[2] : " ",
                        fundsource_id: fundsource_id,
                        token: this[4]
                    }
                );
            });
            if (realignment_amount > remaining_balance) {
                Lobibox.alert("warning", {
                    msg: "Insufficient balance!",
                    width: 350,
                    sound: false,
                });

                changes.forEach(([row, col, oldValue, newValue]) => {
                    if (oldValue == newValue)
                        return;
                    console.log(row);
                    console.log(col);
                    console.log(oldValue);
                    console.log(newValue);
                    hot.setDataAtCell(row, col, 0);
                });

                return ;
            }
            $(".fundsource_amount").html(fundsource_amount);
             ajaxServer(ajax_data, '@Url.Action("SaveFundsRealignment", "FundsRealignment")');
        },
        type: 'key-value-list',
        source: uacs_data,
        height: '250px',
        hiddenColumns: {
            columns: [3,4],
            indicators: true
        },
        licenseKey: 'non-commercial-and-evaluation', // for non-commercial use only
    });

    var tableData = JSON.stringify(hot.getSourceData());

</script>

