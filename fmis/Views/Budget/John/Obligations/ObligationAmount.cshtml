@model fmis.Models.Obligation
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

<style>
    @*wtSpreader*@
   @* .wtHider > div.wtSpreader {
        margin-bottom: 400px;
    }*@
  @*  .wtHider {
        margin-bottom: 100px;
    }*@
</style>

<form>
    <table class="table">
        <tbody>
            <tr>
                <td class="col-sm-1"><strong>Particulars</strong></td>
                <td class="col-sm-1"><strong>:</strong></td>
                <td class="col-sm-10">
                    @Html.DisplayFor(model => model.Particulars)
                </td>
            </tr>
            <tr>
                <td class="col-sm-1"><strong>Payee</strong></td>
                <td class="col-sm-1"><strong>:</strong></td>
                <td class="col-sm-10">
                    @Html.DisplayFor(model => model.Payee)
                </td>
            </tr>
            <tr>
                <td class="col-sm-1"><strong>Address</strong></td>
                <td class="col-sm-1"><strong>:</strong></td>
                <td class="col-sm-10">
                    @Html.DisplayFor(model => model.Address)
                </td>
            </tr>
            <tr>
                <td class="col-sm-1"><strong>Fund Source</strong></td>
                <td class="col-sm-1"><strong>:</strong></td>
                <td class="col-sm-10">
                   @* @Html.DisplayFor(model => model.s)*@
                </td>
            </tr>
            <tr>
                <td class="col-sm-1"><strong>PR #</strong></td>
                <td class="col-sm-1"><strong>:</strong></td>
                <td class="col-sm-10">
                    @Html.DisplayFor(model => model.Pr_no)
                </td>
            </tr>
            <tr>
                <td class="col-sm-1"><strong>Total Amount</strong></td>
                <td class="col-sm-1"><strong>:</strong></td>
                <td class="col-sm-10">
                    <strong class="obligation_amount"></strong>
                </td>
            </tr>
            <tr>
                <td class="col-sm-1"><strong>Dibursements</strong></td>
                <td class="col-sm-1"><strong>:</strong></td>
                <td class="col-sm-10"><strong id="uacs_disbursment"></strong></td>
            </tr>
        </tbody>
    </table>
</form>

<input type="hidden" class="obligation_amount_data" value="@ViewBag.obligation_amount">
<input type="hidden" class="uacs" value="@ViewBag.uacs">
<input type="hidden" id="obligation_token" value="@ViewBag.obligation_token" />
<input type="hidden" id="obligation_id" value="@Html.DisplayFor(model => model.Id)" />
<input id="search_field2" style="float: left" type="search" hidden placeholder="Search" />
<div id="obligation_handsontable" class="hot handsontable htColumnHeaders"></div>
<br />
<div class="controls" hidden>
    <button id="export-file">Download CSV</button>
</div>

<script>

    var exp_code = 0;
    var default_token = "";
    var CHECK_AFTER_ROW = false;
    var CHECK_FIRST_ROW = false;
    var COUNT_AFTER_ROW = 0;

    var obligation_id = $("#obligation_id").val();
    let generateObligationAmountToken = () => {
        let s4 = () => {
            return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
        }
        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
    }

    function ajaxServerAmount(ajax_data, url) {
        $.ajax({
            type: 'POST',
            url: url,
            headers: { "RequestVerificationToken": '@GetAntiXsrfRequestToken()' },
            data: { data: ajax_data },
            success: function (output) {
                $('#loading_modal').modal('hide');
                @*console.log(output);*@
            }
        });
    }

    var uacs = $.parseJSON($(".uacs").val());
    var uacs_data_dropdown = []; //dara
    var uacs_data_array = []; //dara
    var get_account_title = []; //dara
    var uacs_counter = 0;
    $.each(uacs, function () {
        uacs_data_dropdown[uacs_counter] = this.Account_title; //dara
        var json_data = new Object(); //dara
        json_data.UacsId = this.UacsId; //dara
        json_data.Account_title = this.Account_title; //dara
        json_data.Expense_code = this.Expense_code; //dara
        uacs_data_array[this.Account_title] = json_data; //dara
        get_account_title[this.UacsId] = this.Account_title;
        uacs_counter++;
    });

    var obligationamount = $.parseJSON($(".obligation_amount_data").val());
    const obligation_amount_handsontable = [];
    var counter = 0;
    var obligation_amount = 0;
    $.each(obligationamount, function () {
        obligation_amount_handsontable[counter] = [
            get_account_title[this.UacsId],
            this.Expense_code,
            this.Amount,
            this.Total_disbursement,
            this.Total_net_amount,
            this.Total_tax_amount,
            this.Total_others,
            this.obligation_token,
            this.obligation_amount_token
        ]
        counter++;
        obligation_amount += this.Amount;
    });

    $(".obligation_amount").html(obligation_amount);
    @*console.log(obligation_amount_handsontable);*@

    const container = document.getElementById('obligation_handsontable');
    const hot = new Handsontable(container, {
        data: obligation_amount_handsontable,
        rowHeaders: true,
        colWidths: [300, 150, 150, 150, 150, 150, 150],
        colHeaders: ['EXPENSE TITLE', 'CODE', 'AMOUNT', 'TOTAL DISBURSEMENT', 'TOTAL NET AMOUNT', 'TOTAL TAX AMOUNT', 'TOTAL OTHERS', 'ID', 'TOKEN'],
        columns: [
            {
                type: 'dropdown',
                source: uacs_data_dropdown
            },
            {
                type: 'text',
                readOnly: true,
            },
            {
                type: 'numeric',
                numericFormat: {
                    pattern: '0,0.00',
                    culture: 'en-Ph'
                },
            },
            {
                type: 'numeric',
                numericFormat: {
                    culture: 'en-Ph'
                },
                readOnly: true
            },
            {
                type: 'numeric',
                numericFormat: {
                    @*pattern: '0,0.00',*@
                    culture: 'en-Ph'
                },
                readOnly: true
            },
            {
                type: 'numeric',
                numericFormat: {
                    culture: 'en-Ph'
                },
                readOnly: true
            },
            {
                type: 'numeric',
                numericFormat: {
                },
                readOnly: true
            },
            {
                //HIDDEN ID
            },
            {
                //HIDDEN TOKEN
            },
        ],
        stretchH: 'all',
        height: 'auto',
        contextMenu: ['row_above', 'row_below', 'remove_row'],
        beforeRemoveRow: function (index, column) {
            var selection = this.getSelected();
            var holder_data = this.getData();
            var single_token = holder_data[selection[0][0]][8];
            console.log(selection);
            console.log(holder_data);
            console.log(column);
            var first_column = selection[0][0];
            var last_column = selection[0][2];
            console.log(first_column);
            console.log(last_column);
            var many_token = [];
            for (var j = first_column; j <= last_column; j++) {
                many_token.push({
                    many_token: holder_data[j][8]
                })
            }
            if (single_token) {
                var ajax_data = {
                    "single_token": single_token,
                    "many_token": many_token,
                };
               @* console.log(ajax_data);*@
                ajaxServerAmount(ajax_data,'@Url.Action("DeleteObligationAmount", "ObligationAmount")');
            }
        },
        afterUndo: function (index, column) {
        },
        afterCreateRow: function (row, column) {
            CHECK_AFTER_ROW = true; //make true taga add sa row para dile ma save sa db
            COUNT_AFTER_ROW = 2;
            hot.setDataAtCell(row, 7, $("#obligation_token").val());
            hot.setDataAtCell(row, 8, generateObligationAmountToken());
        },
        afterChange(changes, source) {
            console.log(source);
            if (!changes || source === 'loadData' || CHECK_AFTER_ROW || COUNT_AFTER_ROW > 0) {
                CHECK_AFTER_ROW = false;
                COUNT_AFTER_ROW--;
                console.log("View Here!");
                return;
            }

            changes.forEach(([row, col, oldValue, newValue]) => {
                if (col == 0) {
                    var expense_code = uacs_data_array[hot.getDataAtCell(row, col)].Expense_code;

                    if (expense_code == newValue)
                        return;

                    var ajax_data = [];

                    ajax_data.push({
                        ObligationId: obligation_id,
                        UacsId: uacs_data_array[hot.getDataAtCell(row, col)].UacsId,
                        Expense_code: expense_code,
                        Amount: hot.getDataAtCell(row, col + 2),
                        Total_disbursement: 0,
                        Total_net_amount: 0,
                        Total_tax_amount: 0,
                        Total_others: 0,
                        obligation_token: hot.getDataAtCell(row, col + 7),
                        obligation_amount_token: hot.getDataAtCell(row, col + 8)
                    });
                    @*console.log(ajax_data);*@
                    $(".obligation_amount").html(obligation_amount);
                    ajaxServerAmount(ajax_data, '@Url.Action("SaveObligationAmount", "ObligationAmount")');

                    hot.setDataAtCell(row, col + 1, expense_code);
                    CHECK_FIRST_ROW = true;
                }
            });

            if (CHECK_FIRST_ROW) {
                CHECK_FIRST_ROW = false; //TRAP THE DOUBLE LOAD IN FIRST ROW
            } else {
                var ajax_data = [];
                $.each(hot.getSourceData(), function () {
                    ajax_data.push({
                        ObligationId: obligation_id,
                        UacsId: uacs_data_array[this[0]].UacsId ? uacs_data_array[this[0]].UacsId : "",
                        Expense_code: uacs_data_array[this[0]].Expense_code ? uacs_data_array[this[0]].Expense_code : "",
                        Amount: this[2] ? this[2] : "",
                        Total_disbursement: this[3] ? this[3] : "",
                        Total_net_amount: this[4] ? this[4] : "",
                        Total_tax_amount: this[5] ? this[5] : "",
                        Total_others: this[6] ? this[6] : "",
                        obligation_token: this[7] ? this[7] : "",
                        obligation_amount_token: this[8] ? this[8] : "",
                    });
                });
                console.log(ajax_data);
                $(".obligation_amount").html(obligation_amount);
                ajaxServerAmount(ajax_data, '@Url.Action("SaveObligationAmount", "ObligationAmount")');
            }

        },
        hiddenColumns: {
            columns: [7,8],
            indicators: true
        },
        licenseKey: 'non-commercial-and-evaluation', // for non-commercial use only
    });

    var tableData = JSON.stringify(hot.getSourceData());
    @*console.log(hot.getSourceData());*@


</script>