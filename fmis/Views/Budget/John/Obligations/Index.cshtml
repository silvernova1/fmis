@model IEnumerable<fmis.Models.Obligation>
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@using System.Globalization;
@using Newtonsoft.Json;
@{
    ViewData["Title"] = "ORS";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

<style>
    .filterHeader {
        color: black;
    }

    input {
        width: 750px;
    }

    .wtHider {
        margin-bottom: 20px;
    }

    .htAutocompleteArrow {
        cursor: pointer;
    }

    .handsontable .htAutocompleteArrow {
        float: right;
        font-size: 10px;
        color: red;
        cursor: default;
        width: 16px;
        text-align: center;
    }
</style>

<input type="hidden" class="obligation" value="@JsonConvert.SerializeObject(Model)">
<input type="hidden" class="uacs" value="@ViewBag.uacs">
<input type="hidden" class="fund_sub" value="@ViewBag.fund_sub">
<input type="hidden" id="ors_handler" value="" />
<input type="hidden" id="last_ors_handler" value="" />
<h3 class="grey lighter smaller">
    (ORS) Obligation Request and Status
</h3>
<hr>

<div class="col-xs-12 ">
    @*  <div class="infobox infobox-green" style="margin-left: -10px">
            <div class="infobox-icon">
                <i class="ace-icon fa fa-calculator"></i>
            </div>
            <div class="infobox-data">
                <span class="infobox-data-number" id="total_beginning_balance" style="font-size:11pt; color: grey;">
                    @{
                        decimal? overall_beginning_balance = (Model.Sum(x => x.FundSource?.Beginning_balance) + Model.Sum(x => x.SubAllotment?.Beginning_balance));
                    }
                    @overall_beginning_balance?.ToString("C", new CultureInfo("en-PH"))
                </span>
                <div class="infobox-content">
                    <span class="label label-success arrowed-in arrowed-in-right"> Beginning Balance </span>
                </div>
            </div>
        </div>*@
    @*    <div class="infobox infobox-red" style="margin-left: -10px">
            <div class="infobox-icon">
                <i class="ace-icon fa fa-calculator"></i>
            </div>
            <div class="infobox-data">
                <span class="infobox-data-number" id="total_remaining_balance" style="font-size:11pt; color: grey;">
                    @{
                        decimal? overall_remaining_balance = (Model.Sum(x => x.FundSource?.Remaining_balance) + Model.Sum(x => x.SubAllotment?.Remaining_balance));
                    }
                    @overall_remaining_balance?.ToString("C", new CultureInfo("en-PH"))
                </span>
                <div class="infobox-content">
                    <span class="label label-danger arrowed-in arrowed-in-right"> Remaining Balance </span>
                </div>
            </div>
        </div>*@

</div>
<!---->

<div class="controls">
    <a class="btn btn-primary btn-sm" id="export-file"> <span class="glyphicon glyphicon-download"></span> Export Excel</a>
</div>
<br />
<div id="example" class="hot obligation_div"></div>
<br />

<!--<div class="infobox infobox-blue2 pull-right" style="width: 230px">
    <div class="infobox-icon">
        <i class="ace-icon fa fa-bar-chart-o"></i>
    </div>
    <div class="infobox-data">
        <span class="infobox-data-number"-->
@* id="total_obligated_balance"*@
<!--style="font-size:11pt; color:grey;">
            ₱@ViewBag.totalObligatedAmount
        </span>
        <div class="infobox-content">
            <span class="label label-info arrowed-in arrowed-in-right"> Total Obligated Amount </span>
        </div>
    </div>
</div>-->


<div class="infobox infobox-blue2 pull-right" style="width: 230px">
    <div class="infobox-icon">
        <i class="ace-icon fa fa-money"></i>
    </div>
    <div class="infobox-data">
        <span class="infobox-data-number" style="font-size:11pt; color:grey;">
            <span id="sub_total_amt">₱0.00</span>
        </span>
        <div class="infobox-content">
            <span class="label label-info arrowed-in arrowed-in-right"> Total Obligated Amount </span>
        </div>
    </div>
</div>


<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" style="width:90%;">
        <div class="modal-content">
            <h3 style="margin-left:20px;" class="grey lighter smaller-150">
                UACS Amount Entry / Disbursement (Obligation)
            </h3>
            <div class="modal-body ObligationContent">
            </div>
            <div class="modal-footer">
                <button type="button" data-dismiss="modal" class="btn btn-sm btn-default">
                    Close <i class="ace-icon fa fa-close"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="CreatedModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm" style="width:40%;">
        <div class="modal-content">
            <h3 style="margin-left:20px;" class="grey lighter smaller-150">
                Created
                (Obligation)
            </h3>
            <div class="modal-body CreatedByContent">
            </div>
            <div class="modal-footer">
                <button type="button" data-dismiss="modal" class="btn btn-sm btn-default">
                    Close <i class="ace-icon fa fa-close"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<script>

    let str = "\u20B1"

    const exp_code = [14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47];
    const amounts = [15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48];
    const tokens = [16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49];

	//SET OBLIGATION TOKEN
    let ObligationToken = () => {
        let s4 = () => {
            return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
        }
        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
    }
    let ObligationAmountToken = () => {
        let s4 = () => {
            return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
        }
        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
    }
	//SET AUTO DATE
    var today = new Date();
    var dd = String(today.getDate()).padStart(2, '0');
    var mm = String(today.getMonth() + 1).padStart(2, '0');
    var yyyy = today.getFullYear();
	today = mm + '/' + dd + '/' + yyyy;
	//SET AUTO ADDRESS
	var Address = "CEBU CITY"
    const debounceFn = Handsontable.helper.debounce((colIndex, event) => {
        const filtersPlugin = hot.getPlugin('filters');
        filtersPlugin.removeConditions(colIndex);
        filtersPlugin.addCondition(colIndex, 'contains', [event.target.value]);
        filtersPlugin.filter();
    }, 100);
    const addEventListeners = (input, colIndex) => {
        input.addEventListener('keydown', event => {
            debounceFn(colIndex, event);
        });
    };
    const getInitializedElements = colIndex => {
        const div = document.createElement('div');
        const input = document.createElement('input');
        div.className = 'filterHeader';
        addEventListeners(input, colIndex);
        div.appendChild(input);
        return div;
    };
    const addInput = (col, TH) => {
        if (typeof col !== 'number') {
            return col;
        }
        if (col >= 0 && TH.childElementCount < 2) {
            TH.appendChild(getInitializedElements(col));
        }
    };
	var SOURCE_TYPE= "";
	var CHECK_AFTER_ROW = false; //goods
	var CHECK_FIRST_ROW = false;
    @*var CHECK_FIRST_ROW1 = false;*@
    var AMOUNT = 0;
    var INSUFFICIENT_AMOUNT1 = false;
    var TRAP_LOAD = 0;
    var TRAP_LOAD2 = false;
    var TRAP_LOAD3 = false;
    var TRAP_LOAD4 = false;
    var SET_10_ROW = false;
    var OPEN_LOADING_MODAL = false;
     function ajaxServer(ajax_data, url) {
        return Promise.resolve($.ajax({
            type: 'POST',
            url: url,
            headers: { "RequestVerificationToken": '@GetAntiXsrfRequestToken()' },
            data: { data: ajax_data},
        }));
    }
    function isNumeric(o) {
        if (!o || typeof o !== 'string') {
            // Should not be given anything but strings.
            return false;
        }
        return o.length <= 15 && o.indexOf('e+') < 0 && o.indexOf('E+') < 0 && !isNaN(o) && isFinite(o);
    }
	var fund_sub_data_dropdown = [];
	var fund_sub_data_array = [];
	var get_fund_sub = [];
	var get_obligated_amount = [];
	var fund_sub_counter = 0;
    $.each($.parseJSON($(".fund_sub").val()), function () {
		fund_sub_data_dropdown[fund_sub_counter] = this.source_title;
		var json_data = new Object();
		json_data.source_id = this.source_id;
		json_data.source_type = this.source_type;
		fund_sub_data_array[this.source_title] = json_data;
        get_fund_sub[this.source_id + this.source_type] = this.source_title;
        get_obligated_amount[this.source_id + this.source_type] = this.obligated_amount;
		fund_sub_counter++;
	});
    var obligation = $.parseJSON($(".obligation").val());
	const data = [];
    var counter = 0;
    var last_ors_handler;
    var total_obligation = 0;
    $.each(obligation, function () {
        var obligated_amount = 0;
        $.each(this.ObligationAmounts, function () {
            obligated_amount += this.Amount;
        });

        total_obligation += obligated_amount;

        last_ors_handler = this.Ors_no;
		data[counter] = [
            this.source_type == "fund_source" ? get_fund_sub[this.FundSourceId + this.source_type] : get_fund_sub[this.SubAllotmentId + this.source_type], //0
            moment(this.Date, "YYYY-MM-DD").format('MM/DD/YYYY'), //1
			this.Dv, //2
			this.Pr_no, //3
			this.Po_no, //4
			this.Payee, //5
			this.Address, //6
            this.Particulars, //7
            this.Ors_no, //8
            this.Created_by, //9
            obligated_amount, //10
            this.Id, //11
            this.obligation_token, //12
        ];
   @*     if (!this.Ors_no && data[counter-1][8]) {
            last_ors_handler = data[counter - 1][8];
        }*@
        $.each(this.ObligationAmounts, function () {
            data[counter].push(this.obligation_amount_token);
            data[counter].push(this.Expense_code);
            data[counter].push(this.Amount);
        });
        for (var i = this.ObligationAmounts.length; i < 12; i++) {
            data[counter].push(ObligationAmountToken()); //obligation amount token
            data[counter].push("");  // expense code
            data[counter].push("");  // amount
        }
        if (this.source_type == "fund_source") {
            data[counter].push(this.FundSource ? this.FundSource.Beginning_balance : 0);
            data[counter].push(this.FundSource ? this.FundSource.Remaining_balance : 0);
        }
        else if (this.source_type == "sub_allotment") {
            data[counter].push(this.SubAllotment ? this.SubAllotment.Beginning_balance : 0);
            data[counter].push(this.SubAllotment ? this.SubAllotment.Remaining_balance : 0);
        }
        if (this.source_type == "fund_source") {
            data[counter].push(this.FundSource.AllotmentClassId)
        }
        else if (this.source_type == "sub_allotment") {
            data[counter].push(this.SubAllotment.AllotmentClassId)
        }
		counter++;
    });

    @*console.log(last_ors_handler);
    console.log(data[counter-2][8]);*@

    $('#sub_total_amt').html(str + total_obligation.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ','));

    var uacs = $.parseJSON($(".uacs").val());
    var uacs_data_dropdown = [];
    var uacs_data_array = [];
    var uacs_counter = 0;
	$.each(uacs, function () {
		uacs_data_dropdown[uacs_counter] = this.Expense_code;
        var json_data = new Object();
        json_data.UacsId = this.UacsId;
		uacs_data_array[this.Expense_code] = json_data;
        uacs_counter++;
    });
	const container = document.getElementById('example');
    const button = document.querySelector('#export-file');
    var setter = false;
    const hot = new Handsontable(container, {
        data: data,
        rowHeaders: true,
        colHeaders: true,
        filters: true,
        height: '800px',
        fixedColumnsLeft: 5,
        manualRowResize: true,
        @*cells: function (row, col, prop) {
            var cellProperties = {};
            if (col == 8) {
            }
            cellProperties.type = {
                renderer: negativeValueRenderer
            }
            return cellProperties;
        },*@
        afterGetColHeader: addInput,
        beforeOnCellMouseDown(event, coords) {
            // Deselect the column after clicking on input.
            if (coords.row === -1 && event.target.nodeName === 'INPUT') {
                event.stopImmediatePropagation();
                this.deselectCell();
            }
        },
        colWidths: [200, 100, 70, 80, 80, 150, 80, 350, 80, 80, 150, 125, 100, 100,
            100, 100, 100,
            100, 100, 100,
            100, 100, 100,
            100, 100, 100,
            100, 100, 100,
            100, 100, 100,
            100, 100, 100,
            100, 100, 100,
            100, 100, 100,
            100, 100, 100,
            100, 100, 100,
            100, 100,
            150, 150, 10, 100
        ],
        colHeaders: ['FUND SOURCE', 'DATE', 'DV', 'PR #', 'PO #', 'PAYEE', 'ADDRESS', 'PARTICULARS', 'ORS #', 'CREATED BY', 'TOTAL AMOUNT', 'ID', 'OBLIGATION TOKEN',
            'OBLIGATION AMOUNT TOKEN 1', 'EXP CODE 1', 'AMOUNT 1',
            'OBLIGATION AMOUNT TOKEN 2', 'EXP CODE 2', 'AMOUNT 2',
            'OBLIGATION AMOUNT TOKEN 3', 'EXP CODE 3', 'AMOUNT 3',
            'OBLIGATION AMOUNT TOKEN 4', 'EXP CODE 4', 'AMOUNT 4',
            'OBLIGATION AMOUNT TOKEN 5', 'EXP CODE 5', 'AMOUNT 5',
            'OBLIGATION AMOUNT TOKEN 6', 'EXP CODE 6', 'AMOUNT 6',
            'OBLIGATION AMOUNT TOKEN 7', 'EXP CODE 7', 'AMOUNT 7',
            'OBLIGATION AMOUNT TOKEN 8', 'EXP CODE 8', 'AMOUNT 8',
            'OBLIGATION AMOUNT TOKEN 9', 'EXP CODE 9', 'AMOUNT 9',
            'OBLIGATION AMOUNT TOKEN 10', 'EXP CODE 10', 'AMOUNT 10',
            'OBLIGATION AMOUNT TOKEN 11', 'EXP CODE 11', 'AMOUNT 11',
            'OBLIGATION AMOUNT TOKEN 12', 'EXP CODE 12', 'AMOUNT 12',
            'BEGINNING BALANCE', 'REMAINING BALANCE', 'PAP TYPE', 'ORS NUMBER TEMP',
        ],
        columns: [
            {
                //FUNDSOURCE&SUBALLOTMENT
                type: 'dropdown',
                source: fund_sub_data_dropdown,
            },
            {
                //DATE
                type: 'date',
                dateFormat: 'MM/DD/YYYY',
                //defaultDate: Date.now(),
                correctFormat: true,
            },
            {
                //DV
                type: 'text'
            },
            {
                //PR#
                type: 'text'
            },
            {
                //PO#
                type: 'text'
            },
            {
                //PAYEE
                type: 'text'
            },
            {
                //ADDRESS
                type: 'text',
            },
            {
                //PARTICULARS
                type: 'text'
            },
            {
                //ORS NUMBER
                type: 'text',
            },
            {
                //CREATED BY
                type: 'text',
                readOnly: true,
            },
            {
                //GROSS TOTAL AMOUNT
                type: 'numeric',
                numericFormat: {
                    pattern: '0,0.00',
                },
                readOnly: true,

            },
            {
                //HIDDEN ID
                readOnly: true
            },
            {
                //HIDDEN OBLIGATION TOKEN
                readOnly: true
            },
            {
                //OBLIGATION_AMOUNT_TOKEN 1
                readOnly: true
            },
            {
                //OBLIGATION EXPENSE CODE 1
                //type: 'dropdown',
                //source: uacs_data_dropdown
                type: 'dropdown',
                source(query, callback) {
                    var url = '@Url.Action("GetExpenseCode", "Obligations")';
                    var test = {};
                    $.ajax({
                        url: url,
                        data: {
                            allotmentId: this.instance.getDataAtCell(this.row, 51)
                        },
                        async: true,
                        method: 'GET',
                        success: function (response, textStatus, jqXHR) {
                            if (jqXHR.status == 200) {
                                callback(response.items)
                            }
                        }
                    })
                }
            },
            {
                //OBLIGATION AMOUNT 1
                type: 'numeric',
                numericFormat: {
                    pattern: '0,0.00',
                },
            },
            {
                //OBLIGATION_AMOUNT_TOKEN 2
                readOnly: true
            },
            {
                //OBLIGATION EXPENSE CODE 2
                type: 'dropdown',
                source(query, callback) {
                    var url = '@Url.Action("GetExpenseCode", "Obligations")';
                    var test = {};
                    $.ajax({
                        url: url,
                        data: {
                            allotmentId: this.instance.getDataAtCell(this.row, 51)
                        },
                        async: true,
                        method: 'GET',
                        success: function (response, textStatus, jqXHR) {
                            if (jqXHR.status == 200) {
                                callback(response.items)
                            }
                        }
                    })
                }
            },
            {
                //OBLIGATION AMOUNT 2
                type: 'numeric',
                numericFormat: {
                    pattern: '0,0.00',
                }
            },
            {
                //OBLIGATION_AMOUNT_TOKEN 3
            },
            {
                //OBLIGATION EXPENSE CODE 3
                type: 'dropdown',
                source(query, callback) {
                    var url = '@Url.Action("GetExpenseCode", "Obligations")';
                    var test = {};
                    $.ajax({
                        url: url,
                        data: {
                            allotmentId: this.instance.getDataAtCell(this.row, 51)
                        },
                        async: true,
                        method: 'GET',
                        success: function (response, textStatus, jqXHR) {
                            if (jqXHR.status == 200) {
                                callback(response.items)
                            }
                        }
                    })
                }
            },
            {
                //OBLIGATION AMOUNT 3
                type: 'numeric',
                numericFormat: {
                    pattern: '0,0.00',
                }
            },
            {
                //OBLIGATION_AMOUNT_TOKEN 4
            },
            {
                //OBLIGATION EXPENSE CODE 4
                type: 'dropdown',
                source(query, callback) {
                    var url = '@Url.Action("GetExpenseCode", "Obligations")';
                    var test = {};
                    $.ajax({
                        url: url,
                        data: {
                            allotmentId: this.instance.getDataAtCell(this.row, 51)
                        },
                        async: true,
                        method: 'GET',
                        success: function (response, textStatus, jqXHR) {
                            if (jqXHR.status == 200) {
                                callback(response.items)
                            }
                        }
                    })
                }
            },
            {
                //OBLIGATION AMOUNT  4
                type: 'numeric',
                numericFormat: {
                    pattern: '0,0.00',
                }
            },
            {
                //OBLIGATION_AMOUNT_TOKEN 5
            },
            {
                //OBLIGATION EXPENSE CODE 5
                type: 'dropdown',
                source(query, callback) {
                    var url = '@Url.Action("GetExpenseCode", "Obligations")';
                    var test = {};
                    $.ajax({
                        url: url,
                        data: {
                            allotmentId: this.instance.getDataAtCell(this.row, 51)
                        },
                        async: true,
                        method: 'GET',
                        success: function (response, textStatus, jqXHR) {
                            if (jqXHR.status == 200) {
                                callback(response.items)
                            }
                        }
                    })
                }
            },
            {
                //OBLIGATION AMOUNT  5
                type: 'numeric',
                numericFormat: {
                    pattern: '0,0.00',
                }
            },
            {
                //OBLIGATION_AMOUNT_TOKEN 6
            },
            {
                //OBLIGATION EXPENSE CODE 6
                type: 'dropdown',
                source(query, callback) {
                    var url = '@Url.Action("GetExpenseCode", "Obligations")';
                    var test = {};
                    $.ajax({
                        url: url,
                        data: {
                            allotmentId: this.instance.getDataAtCell(this.row, 51)
                        },
                        async: true,
                        method: 'GET',
                        success: function (response, textStatus, jqXHR) {
                            if (jqXHR.status == 200) {
                                callback(response.items)
                            }
                        }
                    })
                }
            },
            {
                //OBLIGATION AMOUNT  6
                type: 'numeric',
                numericFormat: {
                    pattern: '0,0.00',
                }
            },
            {
                //OBLIGATION_AMOUNT_TOKEN 7
            },
            {
                //OBLIGATION EXPENSE CODE 7
                type: 'dropdown',
                source(query, callback) {
                    var url = '@Url.Action("GetExpenseCode", "Obligations")';
                    var test = {};
                    $.ajax({
                        url: url,
                        data: {
                            allotmentId: this.instance.getDataAtCell(this.row, 51)
                        },
                        async: true,
                        method: 'GET',
                        success: function (response, textStatus, jqXHR) {
                            if (jqXHR.status == 200) {
                                callback(response.items)
                            }
                        }
                    })
                }
            },
            {
                //OBLIGATION AMOUNT  7
                type: 'numeric',
                numericFormat: {
                    pattern: '0,0.00',
                }
            },
            {
                //OBLIGATION_AMOUNT_TOKEN 8
            },
            {
                //OBLIGATION EXPENSE CODE 8
                type: 'dropdown',
                source(query, callback) {
                    var url = '@Url.Action("GetExpenseCode", "Obligations")';
                    var test = {};
                    $.ajax({
                        url: url,
                        data: {
                            allotmentId: this.instance.getDataAtCell(this.row, 51)
                        },
                        async: true,
                        method: 'GET',
                        success: function (response, textStatus, jqXHR) {
                            if (jqXHR.status == 200) {
                                callback(response.items)
                            }
                        }
                    })
                }
            },
            {
                //OBLIGATION AMOUNT  8
                type: 'numeric',
                numericFormat: {
                    pattern: '0,0.00',
                }
            },
            {
                //OBLIGATION_AMOUNT_TOKEN 9
            },
            {
                //OBLIGATION EXPENSE CODE 9
                type: 'dropdown',
                source(query, callback) {
                    var url = '@Url.Action("GetExpenseCode", "Obligations")';
                    var test = {};
                    $.ajax({
                        url: url,
                        data: {
                            allotmentId: this.instance.getDataAtCell(this.row, 51)
                        },
                        async: true,
                        method: 'GET',
                        success: function (response, textStatus, jqXHR) {
                            if (jqXHR.status == 200) {
                                callback(response.items)
                            }
                        }
                    })
                }
            },
            {
                //OBLIGATION AMOUNT  9
                type: 'numeric',
                numericFormat: {
                    pattern: '0,0.00',
                }
            },
            {
                //OBLIGATION_AMOUNT_TOKEN 10
            },
            {
                //OBLIGATION EXPENSE CODE 10
                type: 'dropdown',
                source(query, callback) {
                    var url = '@Url.Action("GetExpenseCode", "Obligations")';
                    var test = {};
                    $.ajax({
                        url: url,
                        data: {
                            allotmentId: this.instance.getDataAtCell(this.row, 51)
                        },
                        async: true,
                        method: 'GET',
                        success: function (response, textStatus, jqXHR) {
                            if (jqXHR.status == 200) {
                                callback(response.items)
                            }
                        }
                    })
                }
            },
            {
                //OBLIGATION AMOUNT  10
                type: 'numeric',
                numericFormat: {
                    pattern: '0,0.00',
                }
            },
            {
                //OBLIGATION_AMOUNT_TOKEN 11
            },
            {
                //OBLIGATION EXPENSE CODE 11
                type: 'dropdown',
                source(query, callback) {
                    var url = '@Url.Action("GetExpenseCode", "Obligations")';
                    var test = {};
                    $.ajax({
                        url: url,
                        data: {
                            allotmentId: this.instance.getDataAtCell(this.row, 51)
                        },
                        async: true,
                        method: 'GET',
                        success: function (response, textStatus, jqXHR) {
                            if (jqXHR.status == 200) {
                                callback(response.items)
                            }
                        }
                    })
                }
            },
            {
                //OBLIGATION AMOUNT  11
                type: 'numeric',
                numericFormat: {
                    pattern: '0,0.00',
                }
            },
            {
                //OBLIGATION_AMOUNT_TOKEN 12
            },
            {
                //OBLIGATION EXPENSE CODE 12
                type: 'dropdown',
                source(query, callback) {
                    var url = '@Url.Action("GetExpenseCode", "Obligations")';
                    var test = {};
                    $.ajax({
                        url: url,
                        data: {
                            allotmentId: this.instance.getDataAtCell(this.row, 51)
                        },
                        async: true,
                        method: 'GET',
                        success: function (response, textStatus, jqXHR) {
                            if (jqXHR.status == 200) {
                                callback(response.items)
                            }
                        }
                    })
                }
            },
            {
                //OBLIGATION AMOUNT  12
                type: 'numeric',
                numericFormat: {
                    pattern: '0,0.00',
                }
            },
            {
                //BEGINNING BALANCE
                type: 'numeric',
                numericFormat: {
                    pattern: '0,0.00',
                }
            },
            {
                //REMAINING BALANCE
                type: 'numeric',
                numericFormat: {
                    pattern: '0,0.00',
                }
            },
            {
                type: 'text'
            },
            {
                //ORS NUMBER TEMP
                type: 'text'
            }
        ],
        search: {
            searchResultClass: 'search-result-custom'
        },
        contextMenu: {
            items: {
                "insert": {
                    name: 'Insert 10 rows below',
                    callback: function (changes, options) {
                        hot.alter('insert_row', hot.getSelected()[0] + 0, 10);
                    }
                },
                "make_bold": {
                    name: 'Print ORS',
                    callback: function (key, options) {
                        var selected = hot.getSelected() || [];
                        var holder_data = hot.getData();
                        var first_column = selected[0][0];
                        var last_column = selected[0][2];
                        var many_token = [];
                        for (let j = first_column; j <= last_column; j++) {
                            many_token.push(holder_data[j][12]);
                        }
                        var url = '@Url.Action("PrintOrs", "Obligations")' + "?";
                        for (i = 0; i < many_token.length; i++) {
                            if ((i + 1) != many_token.length)
                                url = url + "token=" + many_token[i] + "&";
                            else
                                url = url + "token=" + many_token[i];
                        }
                        window.open(url);
                    }
                },
                "": {
                    name: 'UACS Amount Entry / Disbmt.',
                    callback: function (key, options) {
                        var selection = this.getSelected();
                        var holder_data = this.getData();
                        try {
                            if (!holder_data[0]) {
                                Lobibox.alert("warning", {
                                    msg: "Please Select Fundsource/Sub-allotment First!",
                                    sound: false,
                                });
                                return;
                            }
                            if (!holder_data[0][0]) {
                                Lobibox.alert("warning", {
                                    msg: "Please Select Fundsource/Sub-allotment First!",
                                    sound: false,
                                });
                                return;
                            }
                            if (!holder_data[selection[0][0]][0] || holder_data[selection[0][0]][0] == 'undefined') {
                                Lobibox.alert("warning", {
                                    msg: "Please Select Fundsource/Sub-allotment First!",
                                    sound: false,
                                });
                                return;
                            }
                        }
                        catch {
                            Lobibox.alert("warning", {
                                msg: "Please Select Fundsource/Sub-allotment First!",
                                sound: false,
                            });
                            return;
                        }
                        var holder_id = holder_data[selection[0][0]][11];
                        var obligation_token = holder_data[selection[0][0]][12];
                        $("#exampleModal").modal('show');
                        $(".ObligationContent").html(loading);
                        $.ajax({
                            type: 'GET',
                            headers: { "RequestVerificationToken": '@GetAntiXsrfRequestToken()' },
                            url: '@Url.Action("openObligationAmount", "Obligations")',
                            data: {
                                id: holder_id,
                                obligation_token: obligation_token
                            },
                            success: function (output) {
                                setTimeout(function () {
                                    $(".ObligationContent").html(output);
                                }, 500);
                            }
                        });
                    }
                },

                "row_below": {}, "remove_row": {}, "row_above": {}, "copy": {},
                "created": {
                    name: 'Created By',
                    callback: function (key, options) {
                        var selection = this.getSelected();
                        var holder_data = this.getData();
                        var holder_id = holder_data[selection[0][0]][11];
                        var obligation_token = holder_data[selection[0][0]][12];
                        $("#CreatedModal").modal('show');
                        $.ajax({
                            type: 'GET',
                            headers: { "RequestVerificationToken": '@GetAntiXsrfRequestToken()' },
                            url: '@Url.Action("openCreatedBy", "Obligations")',
                            data: {
                                id: holder_id,
                                obligation_token: obligation_token
                            },
                            success: function (output) {
                                setTimeout(function () {
                                    $(".CreatedByContent").html(output);
                                }, 500);
                            }
                        });
                    }
                },
                "empty": {
                    name: 'Empty Row',
                    callback: function (key, options) {
                        hot.setDataAtCell(row, '')

                    }
                },
            }
        },
        beforeRemoveRow: function (index, column) {
            var selection = this.getSelected();
            var holder_data = this.getData();
            var single_token = holder_data[selection[0][0]][12];
            var first_column = selection[0][0];
            var last_column = selection[0][2];
            var many_token = [];
            for (var j = first_column; j <= last_column; j++) {
                many_token.push({
                    many_token: holder_data[j][12]
                })
            }
            var ajax_data = {
                "single_token": single_token,
                "many_token": many_token
            };
            console.log(ajax_data);
            ajaxServer(ajax_data, '@Url.Action("DeleteObligation", "Obligations")');
        },
        afterRemoveRow: function () {
            var total_obligation = 0;
            $.each(this.getData(), function () {
                total_obligation += this[10];
            });
            $('#sub_total_amt').html(str + total_obligation.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ','));
        },
        afterUndo: function (index, column) {
        },
        afterFilter: function () {
            var total_obligation = 0;
            for (var i = 0; i < hot.countRows(); i++) {
                total_obligation += +hot.getDataAtCell(i, 10);
            }
            $('#sub_total_amt').html(str + total_obligation.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ','));
        },
        afterCreateRow: function (row, column) {
            //CHECK_AFTER_ROW = true;
        },
        afterChange: function (changes, source) {
            //var updatedHot = this.getData();
            var total_obligation = 0;
            $.each(this.getData(), function () {
                total_obligation += this[10];
            });
            $('#sub_total_amt').html(str + total_obligation.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ','));

            if (!changes || source === 'loadData' || CHECK_AFTER_ROW) {
                console.log("first trap");
                CHECK_AFTER_ROW = false;
                return;
            }
            if (TRAP_LOAD) {
                TRAP_LOAD--; //decrement trap load
                console.log(TRAP_LOAD);
                return;
            }

            changes.forEach(([row, col, oldValue, newValue]) => {
                console.log("afterchange");
                if (!hot.getDataAtCell(row, 0)) {
                    TRAP_LOAD3 = true;
                    Lobibox.alert("error", {
                        msg: "Please select FUND SOURCE & SAA first!",
                        sound: false,
                    });
                    return;
                }
                else if (col == 0) {
                    CHECK_FIRST_ROW1 = true;
                    console.log("col 0");
                    var ajax_data = [];
                    ajax_data.push(
                        {
                            source_id: fund_sub_data_array[hot.getDataAtCell(row, 0)].source_id,
                            source_type: fund_sub_data_array[hot.getDataAtCell(row, 0)].source_type,
                            Date: hot.getDataAtCell(row, 1),
                            Dv: hot.getDataAtCell(row, 2),
                            Pr_no: hot.getDataAtCell(row, 3),
                            Po_no: hot.getDataAtCell(row, 4),
                            Payee: hot.getDataAtCell(row, 5),
                            Address: hot.getDataAtCell(row, 6),
                            Particulars: hot.getDataAtCell(row, 7),
                            Ors_no: hot.getDataAtCell(row, 8) ? Ors_no : hot.getDataAtCell(row, 8) ,

                            //Ors_no_temp: hot.getDataAtCell(row-1, 8),

                            Created_by: hot.getDataAtCell(row, 9),
                            Gross: hot.getDataAtCell(row, 10),
                            obligation_token: hot.getDataAtCell(row, 12)
                        }
                    );

                    ajaxServer(ajax_data, '@Url.Action("SaveObligation", "Obligations")')
                        .then(data => {
                            console.log(data);
                            console.log(hot.getDataAtCell(row, 51));
                            if (!hot.getDataAtCell(row, 11)) {
                                CHECK_FIRST_ROW = false;
                                hot.setDataAtCell(row, 11, data.id);
                            }
                            if (data.source_type == 'fund_source') {
                                CHECK_FIRST_ROW = false;
                                hot.setDataAtCell(row, 51, data.fundSource.allotmentClassId)
                            }
                            else if (data.source_type == 'sub_allotment') {
                                CHECK_FIRST_ROW = false;
                                hot.setDataAtCell(row, 51, data.subAllotment.allotmentClassId)
                            }
                        });
                    //HERE
                    return;
                }

            
                else if (exp_code.includes(col)) {
                    console.log('expense codes' + col);
                    TRAP_LOAD2 = true;
                    var ajax_data = [];
                    ajax_data.push({
                        obligationId: hot.getDataAtCell(row, 11),
                        obligation_token: hot.getDataAtCell(row, 12),
                        obligation_amount_token: hot.getDataAtCell(row, col - 1),
                        Expense_code: hot.getDataAtCell(row, col),
                        Amount: hot.getDataAtCell(row, col + 1),
                    });


                    ajaxServer(ajax_data, '@Url.Action("SaveObligationAmount", "ObligationAmount")')
                        .then(data => {
                            console.log(data);
                            TRAP_LOAD4 = false;
                        })
                        .catch(data => {
                            alert(data.responseJSON.error_message);
                        });

                }
                else if (amounts.includes(col)) {
                    console.log('amounts ' + col);
                    TRAP_LOAD2 = true;
                    var ajax_data = [];
                    AMOUNT = 0;
                    var amount = 0;

                    @*if (!hot.getDataAtCell(row, col - 1) || !hot.getDataAtCell(row, col - 2)) {
                        Lobibox.alert("error", {
                            msg: "Please select expense code first!",
                            sound: false,
                        });
                        TRAP_LOAD4 = false;
                        hot.setDataAtCell(row, col, oldValue); //set the amount into previous amount
                        return;
                    }*@


                    if (!hot.getDataAtCell(row, col)) {
                        //return;
                    }
                    else if (isNaN(parseFloat(hot.getDataAtCell(row, col).toString())) && !hot.getDataAtCell(row, col).toString().includes(",") && !hot.getDataAtCell(row, col - 2)) {
                        TRAP_LOAD4 = true;
                        Lobibox.alert("error", {
                            msg: "INVALID AMOUNT!",
                            sound: false,
                        });
                        hot.setDataAtCell(row, col, oldValue); //set the amount into previous amount
                        return;
                    }
                    else if (TRAP_LOAD4) {
                        TRAP_LOAD4 = false;
                        console.log("TRAP_LOAD4");
                        return;
                    }
                    try {
                        amount = hot.getDataAtCell(row, col).toString().includes(",") ? parseFloat(hot.getDataAtCell(row, col).replace(/,/g, '')) : hot.getDataAtCell(row, col);
                    }
                    catch { }

                    ajax_data.push({
                        obligation_token: hot.getDataAtCell(row, 12),
                        obligation_amount_token: hot.getDataAtCell(row, col - 2),
                        Expense_code: hot.getDataAtCell(row, col - 1),
                        Amount: amount//hot.getDataAtCell(row, col).toString().includes(",") ? parseFloat(hot.getDataAtCell(row, col).replace(/,/g, '')) : hot.getDataAtCell(row, col),
                    });


                    console.log("string"); //amount
                    var url = '@Url.Action("getRemainigAndObligated", "ObligationAmount")';
                    var post_calculation_data = {
                        "obligation_id": 0,
                        "obligation_token": hot.getDataAtCell(row, 12)
                    };
                    console.log(post_calculation_data);
                    $.post(url, post_calculation_data, function (result) {
                        console.log(result);
                        var post_remaining_balance = result.remaining_balance;
                        var post_obligated_amount = result.obligated_amount;
                        if (oldValue) { //new : 9999, OLD :1 , REMAINING : 9999
                            oldValue = oldValue.toString().includes(",") ? parseFloat(oldValue.replace(/,/g, '')) : oldValue;
                            post_remaining_balance = post_remaining_balance + oldValue; //2000
                            post_obligated_amount = post_obligated_amount - oldValue;
                        }
                        try {
                            AMOUNT = newValue.toString().includes(",") ? parseFloat(newValue.replace(/,/g, '')) : newValue;
                        }
                        catch { }
                        console.log("newValue : " + newValue);
                        console.log("oldValue : " + oldValue);
                        console.log("AMOUNT : " + AMOUNT);
                        console.log("post_remaining_balance : " + post_remaining_balance);
                        if (AMOUNT > post_remaining_balance) {
                            console.log("trap the insuficient amount");
                            trapTheInsuficientAmount(row, col, oldValue); //trap the insuficient amount
                        }
                        else if (INSUFFICIENT_AMOUNT1) {
                            console.log("trap INSUFFICIENT_AMOUNT1");
                            INSUFFICIENT_AMOUNT1 = false;
                        }
                        else {
                            //do the calculalation
                            console.log("do the calculation!");
                            post_remaining_balance = post_remaining_balance - AMOUNT;
                            post_obligated_amount = post_obligated_amount + AMOUNT;
                            var calculated_amount_data = {
                                "obligation_id": 0,
                                "obligation_token": hot.getDataAtCell(row, 12),
                                "obligation_amount_token": ajax_data[0].obligation_amount_token,
                                "remaining_balance": post_remaining_balance,
                                "obligated_amount": post_obligated_amount,
                                "amount": AMOUNT
                            };
                            console.log(calculated_amount_data);
                            var url = '@Url.Action("calculateObligatedAmount", "ObligationAmount")';
                            $.post(url, calculated_amount_data, function (result) {
                                console.log(result);
                                TRAP_LOAD = 2;
                                hot.setDataAtCell(row, 50, result.remaining_balance);
                                hot.setDataAtCell(row, 10, result.obligated_amount);
                                displayTheCalculation(result);
                            });

                            console.log(this);
                        }
                    });

                }
                else if (col == 11 || col == 51) {
                    CHECK_FIRST_ROW = false;
                }
                else {
                    CHECK_FIRST_ROW = true;
                }
            });
            console.log("CHECK FIRST ROW HERE! " + CHECK_FIRST_ROW);
            if (TRAP_LOAD2) {
                TRAP_LOAD2 = false;
                console.log("TRAP_LOAD2");
                return;
            }
            else if (TRAP_LOAD3) {
                TRAP_LOAD3 = false;
                console.log("TRAP_LOAD3");
                return;
            }
            if (CHECK_FIRST_ROW) {
                let rows = [...new Set(changes.map(item => item[0]))];

                var ajax_data = [];
                $.each(rows, function () {
                    let row = this;
                    if (hot.getDataAtCell(row, 0)) {
                        let Ors_no = hot.getDataAtCell(row, 8) ? hot.getDataAtCell(row, 8) : "" 
                        $("#ors_handler").val(Ors_no);
                        ajax_data.push(
                            {
                                source_id: hot.getDataAtCell(row, 0) ? fund_sub_data_array[hot.getDataAtCell(row, 0)].source_id : 0,
                                source_type: hot.getDataAtCell(row, 0) ? fund_sub_data_array[hot.getDataAtCell(row, 0)].source_type : 0,
                                Date: hot.getDataAtCell(row, 1) ? hot.getDataAtCell(row, 1) : "",
                                Dv: hot.getDataAtCell(row, 2) ? hot.getDataAtCell(row, 2) : "",
                                Pr_no: hot.getDataAtCell(row, 3) ? hot.getDataAtCell(row, 3) : "",
                                Po_no: hot.getDataAtCell(row, 4) ? hot.getDataAtCell(row, 4) : "",
                                Payee: hot.getDataAtCell(row, 5) ? hot.getDataAtCell(row, 5) : "",
                                Address: hot.getDataAtCell(row, 6) ? hot.getDataAtCell(row, 6) : "",
                                Particulars: hot.getDataAtCell(row, 7) ? hot.getDataAtCell(row, 7) : "",
                                Ors_no: Ors_no,
                                //Ors_no_temp: hot.getDataAtCell(row-1, 8) ? hot.getDataAtCell(row-1, 8) : "",
                                Created_by: hot.getDataAtCell(row, 9) ? hot.getDataAtCell(row, 9) : 0,
                                Gross: hot.getDataAtCell(row, 10) ? hot.getDataAtCell(row, 10) : "",
                                obligation_token: hot.getDataAtCell(row, 12)
                            }
                        );
                        colorRow(row, 8);
                    }
                });
                console.log(hot.getSourceData());
                console.log(ajax_data);
                ajaxServer(ajax_data, '@Url.Action("SaveObligation", "Obligations")');
                CHECK_FIRST_ROW = false;
            }
		},
		hiddenColumns: {
            columns: [9, 11, 12, 13, 16, 19, 22, 25, 28, 31, 34, 37, 40, 43, 46, 49, 50, 51],
		},
        licenseKey: 'non-commercial-and-evaluation',
    });
	var tableData = JSON.stringify(hot.getSourceData());
@*	console.log(hot.getSourceData());*@
    const exportPlugin = hot.getPlugin('exportFile');
    button.addEventListener('click', () => {
        exportPlugin.downloadFile('csv', {
            bom: false,
            columnDelimiter: ',',
            columnHeaders: true,
            exportHiddenColumns: false,
            exportHiddenRows: false,
            fileExtension: 'csv',
            filename: 'Obligation-[YYYY]-[MM]-[DD]',
            mimeType: 'text/csv',
            rowDelimiter: '\r\n',
            rowHeaders: true,
        });
    });
    function trapTheInsuficientAmount(row, col, oldValue) {
        Lobibox.alert("error", {
            msg: "Insufficient  Balance!",
            sound: false,
        });
        INSUFFICIENT_AMOUNT1 = true; //trap so that can't save in DB
        hot.setDataAtCell(row, col, oldValue); //set the amount into previous amount
    }
    function displayTheCalculation(result) {
        $("#total_beginning_balance").html(parseFloat(result.overall_beginning_balance).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ','));
        $("#total_remaining_balance").html(parseFloat(result.overall_remaining_balance).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ','));
        $("#total_obligated_balance").html(parseFloat(result.overall_obligated_balance).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ','));
    }
    function negativeValueRenderer(instance, td, row, col, prop, value, cellProperties) {
        Handsontable.TextCell.renderer.apply(this, arguments);
        if (value.includes('H')) { //if row contains negative number
            td.className = 'white'; //add class "negative"
        }
        else {
            td.className = '';
        }
    }
    console.log(hot.getSourceData());

    function colorRow(rowChange, colChange) {
        console.log(rowChange, colChange);
        hot.updateSettings({
            cells(row, col, prop) {
                const cellMeta = {
                    ...prop
                };
                //console.log(cellMeta);
                if (row === rowChange && col === colChange) {
                    cellMeta.className = 'white';
                }

                return cellMeta;
            }
        });
    }
</script>
