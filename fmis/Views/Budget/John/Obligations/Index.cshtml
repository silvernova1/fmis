@model IEnumerable<fmis.Models.Obligation>
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

<style>
    .filterHeader {
        color: black;
    }

    input {
        width: 750px;
    }

    .wtHider {
		margin-bottom: 50px;
	}

</style>

<input type="hidden" class="obligation" value="@ViewBag.obligation_json">
<h3 class="grey lighter smaller">
    (ORS) Obligation Report Summary
</h3>
<hr>

<br />
<div id="example" class="hot"></div>
<br />
<div class="controls" hidden>
    <button id="export-file">Download CSV</button>
</div>
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" style="width:90%;">
        <div class="modal-content">
            <h3 style="margin-left:20px;" class="grey lighter smaller-150">
                UACS Amount Entry / Disbursement
            </h3>
            <div class="modal-body ObligationContent">
            </div>
            <div class="modal-footer">
                <button type="button" data-dismiss="modal" class="btn btn-sm btn-default">
                    Close <i class="ace-icon fa fa-close"></i>
                </button>
            </div>
            <input type="hidden" class="fundsource" value="@ViewBag.fundsource">
        </div>
    </div>
</div>

<script>
	var SOURCE_TYPE= "";
	var CHECK_AFTER_ROW = false;

    class KeyValueListEditor extends Handsontable.editors.HandsontableEditor {
        prepare(row, col, prop, td, value, cellProperties) {
            super.prepare(row, col, prop, td, value, cellProperties);

            Object.assign(this.htOptions, {
                licenseKey: 'non-commercial-and-evaluation',
                data: this.cellProperties.source,
                columns: [
                    {
                        data: 'source_id',
                    },
                    {
                        data: 'source_title',
                    }
                ],
                hiddenColumns: {
                    columns: [1],
                },
                colWidths: 205,
                beforeValueRender(value, { row, instance }) {
                    return instance.getDataAtRowProp(row, 'source_title');
                },
            });

            if (cellProperties.keyValueListCells) {
                this.htOptions.cells = cellProperties.keyValueListCells;
            }
            if (this.htEditor) {
                this.htEditor.destroy();
            }

            this.htEditor = new Handsontable(this.htContainer, this.htOptions);
        }

        setValue(value) {
            if (this.htEditor) {
                const index = this.htEditor.getDataAtProp('source_id').findIndex(id => id === value);

                if (index !== -1) {
					value = this.htEditor.getDataAtRowProp(index, 'source_title');
                    SOURCE_TYPE = this.htEditor.getDataAtRowProp(index, 'source_type');
                }
            }
            super.setValue(value);
        }

        getValue() {
            const value = super.getValue();

            if (this.htEditor) {
                const labels = this.htEditor.getDataAtProp('source_title');
                const row = labels.indexOf(value);

                if (row !== -1) {
                    return this.htEditor.getDataAtRowProp(row, 'source_id');
                }
            }
            return value;
        }
    }

    const keyValueListValidator = function (value, callback) {
        let valueToValidate = value;

        if (valueToValidate === null || valueToValidate === void 0) {
            valueToValidate = '';
        }

        if (this.allowEmpty && valueToValidate === '') {
            callback(true);
		} else {
            callback(this.source.find(({ source_id }) => source_id === value) ? true : false);
        }
    };
    const keyValueListRenderer = function (hot, TD, row, col, prop, value, cellProperties) {
		const item = cellProperties.source.find(({ source_id }) => source_id === value);

        if (item) {
            value = item.source_title;
        }

        Handsontable.renderers.getRenderer('autocomplete').call(hot, hot, TD, row, col, prop, value, cellProperties);
    };

    Handsontable.cellTypes.registerCellType('key-value-list', {
        editor: KeyValueListEditor,
        validator: keyValueListValidator,
        renderer: keyValueListRenderer,
    });

	let guid = () => {
		let s4 = () => {
			return Math.floor((1 + Math.random()) * 0x10000)
				.toString(16)
				.substring(1);
		}
		return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
	}

	const debounceFn = Handsontable.helper.debounce((colIndex, event) => {
		const filtersPlugin = hot.getPlugin('filters');

		filtersPlugin.removeConditions(colIndex);
		filtersPlugin.addCondition(colIndex, 'contains', [event.target.value]);
		filtersPlugin.filter();
	}, 100);

	const addEventListeners = (input, colIndex) => {
		input.addEventListener('keydown', event => {
			debounceFn(colIndex, event);
		});
	};

	const getInitializedElements = colIndex => {
		const div = document.createElement('div');
		const input = document.createElement('input');

		div.className = 'filterHeader';

		addEventListeners(input, colIndex);

		div.appendChild(input);

		return div;
	};

	const addInput = (col, TH) => {
		if (typeof col !== 'number') {
			return col;
		}

		if (col >= 0 && TH.childElementCount < 2) {
			TH.appendChild(getInitializedElements(col));
		}
	};

	function ajaxServer(ajax_data, url) {
		$.ajax({
			type: 'POST',
			url: url,
			headers: { "RequestVerificationToken": '@GetAntiXsrfRequestToken()' },
			data: { data: ajax_data },
			success: function (output) {
				$('#loading_modal').modal('hide');
				@*console.log(output);*@
			}
		});
	}

	var obligation = $.parseJSON($(".obligation").val());
	@*console.log(obligation);*@
    var fundsource = $.parseJSON($(".fundsource").val());
    var fundsource_data = [];
	var fundsource_counter = 0;

    @*var json_data = new Object();
    json_data.source_id = 0;
    json_data.source_title = "==Please Select==";
	json_data.source_type = "";
    fundsource_data[0] = json_data;*@

	$.each(fundsource, function () {
		var json_data = new Object();
		json_data.source_id = this.source_id;
		json_data.source_title = this.source_title;
		json_data.source_type = this.source_type;
		fundsource_data[fundsource_counter] = json_data;
		fundsource_counter++;
	});

	const data = [];
	var counter = 0;
	$.each(obligation, function () {
		data[counter] = [
			this.source_id, //0
			this.Date, //2
			this.Dv, //3
			this.Pr_no, //4
			this.Po_no, //5
			this.Payee, //6
			this.Address, //7
			this.Particulars, //8
			this.Ors_no, //9
			this.Gross, //10
			this.Created_by, //11
			this.Date_recieved, //12
			this.Time_recieved, //13
			this.Date_released, //14
			this.Time_released, //15
			this.Id, //16
			this.obligation_token //17
		]
		counter++;
	})
	const container = document.getElementById('example');
	const hot = new Handsontable(container, {
		data: data,
		rowHeaders: true,
		colHeaders: true,
		className: 'as-you-type-demo',
		filters: true,
		stretchH: 'all',
		afterGetColHeader: addInput,
		beforeOnCellMouseDown(event, coords) {
			// Deselect the column after clicking on input.
			if (coords.row === -1 && event.target.nodeName === 'INPUT') {
				event.stopImmediatePropagation();
				this.deselectCell();
			}
		},
		colWidths: [210, 100, 70, 70, 100, 100, 150, 150, 100, 100, 100, 100, 100, 100, 100, 100],
		height: 'auto',
        colHeaders: ['FUND SOURCE & SUB ALLOTMENT','DATE', 'DV', 'PR #', 'PO #', 'PAYEE', 'ADDRESS', 'PARTICULARS', 'ORS #', 'GROSS', 'CREATED BY', 'DATE RECEIVED', 'TIME RECEIVED', 'DATE RELEASED', 'TIME RELEASED', 'ID', 'TOKEN'],
		columns: [
            {
				//FUNDSOURCE&SUBALLOTMENT
				
			},
			{
				//DATE
				type: 'date',
				dateFormat: 'MM/DD/YYYY',
				defaultDate: Date.now(),
				correctFormat: true,
			},
			{
				//DV
				type: 'text'
			},
			{
				//PR#
                type: 'text'
			},
			{
				//PO#
                type: 'text'
			},
			{
				//PAYEE
                type: 'text'
			},
			{
                //ADDRESS
                type: 'text'
            },
            {
                //PARTICULARS
                type: 'text'
			},
			{
                //ORS NUMBER
				type: 'text',
				readOnly: true
			},
			{
                //GROSS
                type: 'text',
			},
			{
                //CREATED BY
				type: 'text',
				readOnly: true,
			},
			{
				//DATE RECEIVED
				type: 'date',
				dateFormat: 'MM/DD/YYYY',
				defaultDate: Date.now(),
				correctFormat: true,
			},
			{
				//TIME RECEIVED
				type: 'time',
				timeFormat: 'HH:mm:ss',
				correctFormat: true

			},
			{
				//DATE RELEASED
				type: 'date',
				dateFormat: 'MM/DD/YYYY',
				defaultDate: Date.now(),
				correctFormat: true,
			},
			{
				//TIME RELEASED
				type: 'time',
				timeFormat: 'HH:mm:ss',
				correctFormat: true
			},
			{

			},
			{

			},
		],
		search: {
			searchResultClass: 'search-result-custom'
		},
		contextMenu: {
			items: {
				"make_bold": {
					name: 'Print ORS',
					callback: function (key, options) {
						var selection = this.getSelected();
						var holder_data = this.getData();
						var holder_id = holder_data[selection[0][0]][15];
						var url = '@Url.Action("PrintOrs", "Obligations")' + "?id=" + holder_id;
						window.open(url);
					}
				},
				"": {
					name: 'UACS Amount Entry / Disbmt.',
					callback: function (key, options) {
						$("#exampleModal").modal('show');
						$(".ObligationContent").html(loading);
						var selection = this.getSelected();
						var holder_data = this.getData();
						var holder_id = holder_data[selection[0][0]][15];
						var token = holder_data[selection[0][0]][16];
                        console.log(token);
                        console.log(holder_data);

						$.ajax({
							type: 'GET',
							headers: { "RequestVerificationToken": '@GetAntiXsrfRequestToken()' },
							url: '@Url.Action("ObligationModal", "Obligations")',
							data: {
								id: holder_id,
								token: token
							},
							success: function (output) {
								setTimeout(function () {
									$(".ObligationContent").html(output);
								}, 500);
							}
						});
						@*console.log('@Url.Action("ObligationModal", "Obligations")' + "/" + holder_id + "?token=" + token);*@
					}
				}, "row_below": {}, "remove_row": {}, "row_above": {}, "copy": {},
			}
		},
		beforeRemoveRow: function (index, column) {
			var selection = this.getSelected();
			var holder_data = this.getData();
			var single_token = holder_data[selection[0][0]][16];

			@*console.log(selection);
			console.log(holder_data);
			console.log(column);*@

			var first_column = selection[0][0];
			var last_column = selection[0][2];
			@*console.log(first_column);
			console.log(last_column);*@
			var many_token = [];
			for (var j = first_column; j <= last_column; j++) {
				many_token.push({
					many_token: holder_data[j][16]
				})
			}

			if (single_token) {
				var ajax_data = {
					"single_token": single_token,
					"many_token": many_token
				};

				ajaxServer(ajax_data,'@Url.Action("DeleteObligationModal", "Obligations")');
			}

		},
		afterUndo: function (index, column) {

		},
		afterCreateRow: function (row, column) {
			CHECK_AFTER_ROW = true;
			hot.setDataAtCell(row, 16, guid());
		},
		afterChange: function (changes, source) {
			if (source === 'loadData')
				return;

			changes.forEach(([row, col, oldValue, newValue]) => {
				if (col == 0) {
					var ajax_data = [];
                    ajax_data.push(
                        {
							source_id: hot.getDataAtCell(row, 0),
							source_type: SOURCE_TYPE,
                            Date: hot.getDataAtCell(row, 1),
                            Dv: hot.getDataAtCell(row, 2),
                            Pr_no: hot.getDataAtCell(row, 3),
                            Po_no: hot.getDataAtCell(row, 4),
                            Payee: hot.getDataAtCell(row, 5),
                            Address: hot.getDataAtCell(row, 6),
                            Particulars: hot.getDataAtCell(row, 7),
                            Ors_no: hot.getDataAtCell(row, 8),
                            Gross: hot.getDataAtCell(row, 9),
                            Created_by: hot.getDataAtCell(row, 10),
                            Date_recieved: hot.getDataAtCell(row, 11),
                            Time_recieved: hot.getDataAtCell(row, 12),
                            Date_released: hot.getDataAtCell(row, 13),
							Time_released: hot.getDataAtCell(row, 14),
							obligation_token: hot.getDataAtCell(row, 16)
                        }
					);
                    console.log(ajax_data);
					ajaxServer(ajax_data, '@Url.Action("SaveObligation", "Obligations")');
				}
				else {
					var ajax_data = [];
					$.each(hot.getSourceData(), function () {
						ajax_data.push(
							{
								source_id: this[0] ? this[0] : "",
								source_type: SOURCE_TYPE,
								Date: this[1] ? this[1] : "",
								Dv: this[2] ? this[2] : "",
								Pr_no: this[3] ? this[3] : "",
								Po_no: this[4] ? this[4] : "",
								Payee: this[5] ? this[5] : "",
								Address: this[6] ? this[6] : "",
								Particulars: this[7] ? this[7] : "",
								Ors_no: this[8] ? this[8] : "",
								Gross: this[9] ? this[9] : "",
								Created_by: this[10] ? this[10] : "",
								Date_recieved: this[11] ? this[11] : "",
								Time_recieved: this[12] ? this[12] : "",
								Date_released: this[13] ? this[13] : "",
								Time_released: this[14] ? this[14] : "",
								obligation_token: this[16]
							}
						);
					});
					@*console.log(hot.getSourceData());*@
                    if (!CHECK_AFTER_ROW)
						ajaxServer(ajax_data, '@Url.Action("SaveObligation", "Obligations")');

					CHECK_AFTER_ROW =  false;
					return;
				}
            });
		},
		type: 'key-value-list',
		source: fundsource_data,
		hiddenColumns: {
			columns: [15,16],
			indicators: true
		},
		licenseKey: 'non-commercial-and-evaluation',


	});

	var tableData = JSON.stringify(hot.getSourceData());
@*	console.log(hot.getSourceData());*@

</script>