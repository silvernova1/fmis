@model IEnumerable<fmis.Models.Obligation>
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@using System.Text.Json;

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

<style>
    .filterHeader {
        color: black;
    }

    input {
        width: 750px;
    }

    .wtHider {
        margin-bottom: 100px;
    }
</style>

<input type="hidden" class="obligation" value="@JsonSerializer.Serialize(Model)">
<input type="hidden" class="uacs" value="@ViewBag.uacs">
<h3 class="grey lighter smaller">
    (ORS) Obligation Request and Status
</h3>
<hr>

<br />
<div id="example" class="hot"></div>
<br />
<div class="controls" hidden>
    <button id="export-file">Download CSV</button>
</div>
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" style="width:90%;">
        <div class="modal-content">
            <h3 style="margin-left:20px;" class="grey lighter smaller-150">
                UACS Amount Entry / Disbursement (Obligation)
            </h3>
            <div class="modal-body ObligationContent">
            </div>
            <div class="modal-footer">
                <button type="button" data-dismiss="modal" class="btn btn-sm btn-default">
                    Close <i class="ace-icon fa fa-close"></i>
                </button>
            </div>
            <input type="hidden" class="fund_sub" value="@ViewBag.fund_sub">
        </div>
    </div>
</div>

<script>
	//SET TOKEN
    let guid = () => {
        let s4 = () => {
            return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
        }
        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
	}
	//SET AUTO DATE
    var today = new Date();
    var dd = String(today.getDate()).padStart(2, '0');
    var mm = String(today.getMonth() + 1).padStart(2, '0');
    var yyyy = today.getFullYear();
	today = mm + '/' + dd + '/' + yyyy;
	//SET AUTO ADDRESS
	var Address = "CEBU CITY"



    const debounceFn = Handsontable.helper.debounce((colIndex, event) => {
        const filtersPlugin = hot.getPlugin('filters');
        filtersPlugin.removeConditions(colIndex);
        filtersPlugin.addCondition(colIndex, 'contains', [event.target.value]);
        filtersPlugin.filter();
    }, 100);
    const addEventListeners = (input, colIndex) => {
        input.addEventListener('keydown', event => {
            debounceFn(colIndex, event);
        });
    };
    const getInitializedElements = colIndex => {
        const div = document.createElement('div');
        const input = document.createElement('input');
        div.className = 'filterHeader';
        addEventListeners(input, colIndex);
        div.appendChild(input);
        return div;
    };
    const addInput = (col, TH) => {
        if (typeof col !== 'number') {
            return col;
        }
        if (col >= 0 && TH.childElementCount < 2) {
            TH.appendChild(getInitializedElements(col));
        }
    };
	var SOURCE_TYPE= "";
	var CHECK_AFTER_ROW = false;
	var CHECK_FIRST_ROW = true;
	var CHECK_FIRST_ROW1 = false;
	var TRAP_LOAD = false;
	var TRAP_LOAD1 = false;
	function ajaxServer(ajax_data, url) {
		$.ajax({
			type: 'POST',
			url: url,
			headers: { "RequestVerificationToken": '@GetAntiXsrfRequestToken()' },
			data: { data: ajax_data },
			success: function (output) {
				$('#loading_modal').modal('hide');
				@*console.log(output);*@
			}
		});
	}
	var obligation = $.parseJSON($(".obligation").val());
	var fund_sub_data_dropdown = [];
	var fund_sub_data_array = [];
	var get_fund_sub = [];
	var get_obligated_amount = [];
	var fund_sub_counter = 0;
	$.each($.parseJSON($(".fund_sub").val()), function () {
		fund_sub_data_dropdown[fund_sub_counter] = this.source_title;
		var json_data = new Object();
		json_data.source_id = this.source_id;
		json_data.source_type = this.source_type;
		fund_sub_data_array[this.source_title] = json_data;
		get_fund_sub[this.source_id + this.source_type] = this.source_title;
		get_obligated_amount[this.Gross] = this.obligated_amount;
		fund_sub_counter++;
	});


    var counter = 0;
    var obligation_amount = 0;
    var uacs = $.parseJSON($(".uacs").val());
    var uacs_data_dropdown = []; //dara
    var uacs_data_array = []; //dara
    var get_account_title = []; //dara
    var uacs_counter = 0;
    $.each(uacs, function () {
        uacs_data_dropdown[uacs_counter] = this.Expense_code; //dara
        var json_data = new Object(); //dara
        json_data.UacsId = this.UacsId; //dara
        uacs_data_array[this.Expense_code] = json_data; //dara
        get_account_title[this.UacsId] = this.Expense_code;
        uacs_counter++;
	});

	const data = [];
	var counter = 0;
	const Id = '';
	$.each(obligation, function () {
		data[counter] = [
			get_fund_sub[this.source_id + this.source_type], //0
		@*	get_obligated_amount[this.source_id + this.source_type], //2*@
            moment(this.Date, "YYYY/MM/DD").format('MM/DD/YYYY'), //1
			this.Dv, //2
			this.Pr_no, //3
			this.Po_no, //4
			this.Payee, //5
			this.Address, //6
			this.Particulars, //7
			(this.Id).toString().padStart(4, '0'), //8
			this.Created_by, //9
			this.Gross, //10
            this.Id, //10
            this.obligation_token //11
		@*	moment(this.Date_recieved, "YYYY/MM/DD").format('MM/DD/YYYY'), //12
			moment(this.Time_recieved).format('HH:mm:ss'), //13
			moment(this.Date_released, "YYYY/MM/DD").format('MM/DD/YYYY'), //14
			moment(this.Time_released).format('HH:mm:ss'), //15*@
		];
		counter++;
	});
	console.log(data);
	const container = document.getElementById('example');
	const hot = new Handsontable(container, {
		data: data,
		rowHeaders: true,
		colHeaders: true,
		className: 'as-you-type-demo',
		filters: true,
		stretchH: 'all',
		afterGetColHeader: addInput,
		beforeOnCellMouseDown(event, coords) {
			// Deselect the column after clicking on input.
			if (coords.row === -1 && event.target.nodeName === 'INPUT') {
				event.stopImmediatePropagation();
				this.deselectCell();
			}
		},
        colWidths: [180, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 80],
		height: 'auto',
        colHeaders: ['FUND SOURCE & SUB ALLOTMENT', 'DATE', 'DV', 'PR #', 'PO #', 'PAYEE', 'ADDRESS', 'PARTICULARS', 'ORS #', 'CREATED BY', 'TOTAL AMOUNT', 'ID', 'TOKEN'],
		columns: [
            {
				//FUNDSOURCE&SUBALLOTMENT
				type: 'dropdown',
                source: fund_sub_data_dropdown
			},
			{
				//DATE
				type: 'date',
				dateFormat: 'MM/DD/YYYY',
				defaultDate: Date.now(),
				correctFormat: true,
			},
			{
				//DV
				type: 'text'
			},
			{
				//PR#
                type: 'text'
			},
			{
				//PO#
                type: 'text'
			},
			{
				//PAYEE
                type: 'text'
			},
			{
                //ADDRESS
				type: 'text',
            },
            {
                //PARTICULARS
                type: 'text'
			},
			{
				//ORS NUMBER
				type: 'text',
				readOnly: true,
			},
			{
                //CREATED BY
				type: 'text',
				readOnly: true,
			},
			{
				//GROSS TOTAL AMOUNT
                type: 'numeric',
                numericFormat: {
                    pattern: '0,0.00',
				},
                readOnly: true,
			},
			@*{
				//DATE RECEIVED
				type: 'date',
				dateFormat: 'MM/DD/YYYY',
				defaultDate: Date.now(),
				correctFormat: true,
			},
			{
				//TIME RECEIVED
				type: 'time',
				timeFormat: 'HH:mm:ss',
				correctFormat: true
			},
			{
				//DATE RELEASED
				type: 'date',
				dateFormat: 'MM/DD/YYYY',
				defaultDate: Date.now(),
				correctFormat: true,
			},

            {
				//AMOUNT 12
			},
            {
                //OBLIGATION AMOUNT TOKEN
            },

			{
				//TIME RELEASED
				type: 'time',
				timeFormat: 'HH:mm:ss',
				correctFormat: true
			},*@

			{
				//HIDDEN ID
			},
			{
				//HIDDEN TOKEN
			},
		],
		search: {
			searchResultClass: 'search-result-custom'
		},
		contextMenu: {
			items: {
				"make_bold": {
					name: 'Print ORS',
					callback: function (key, options) {
						var selected = hot.getSelected() || [];
		                var holder_data = hot.getData();
		                var first_column = selected[0][0];
		                var last_column = selected[0][2];
		                var many_token = [];
		                for (let j = first_column; j <= last_column; j++) {
							many_token.push(holder_data[j][12]);
							console.log(holder_data[j]);

		                }
		                var url = '@Url.Action("PrintOrs", "Obligations")' + "?";
		                for (i = 0; i < many_token.length; i++) {
			                if ((i + 1) != many_token.length)
				                url = url + "token=" + many_token[i] + "&";
			                else
				                url = url + "token=" + many_token[i];
						}
		                window.open(url);
					}
				},
				"row_below": {}, "remove_row": {}, "row_above": {}, "copy": {},
				"": {
					name: 'UACS Amount Entry / Disbmt.',
					callback: function (key, options) {
						var selection = this.getSelected();
						var holder_data = this.getData();
						try {
                            if (!holder_data[0]) {
                                Lobibox.alert("warning", {
                                    msg: "Please Select Fundsource/Sub-allotment First!",
                                    sound: false,
                                });
                                return;
                            }
                            if (!holder_data[0][0]) {
                                Lobibox.alert("warning", {
                                    msg: "Please Select Fundsource/Sub-allotment First!",
                                    sound: false,
                                });
                                return;
                            }
                            if (!holder_data[selection[0][0]][0] || holder_data[selection[0][0]][0] == 'undefined') {
                                Lobibox.alert("warning", {
                                    msg: "Please Select Fundsource/Sub-allotment First!",
                                    sound: false,
                                });
                                return;
                            }
						}
						catch {
                            Lobibox.alert("warning", {
                                msg: "Please Select Fundsource/Sub-allotment First!",
                                sound: false,
                            });
                            return;
						}
						var holder_id = holder_data[selection[0][0]][11];
						var obligation_token = holder_data[selection[0][0]][12];
						$("#exampleModal").modal('show');
						$(".ObligationContent").html(loading);
						$.ajax({
							type: 'GET',
							headers: { "RequestVerificationToken": '@GetAntiXsrfRequestToken()' },
							url: '@Url.Action("openObligationAmount", "Obligations")',
							data: {
								id: holder_id,
								obligation_token: obligation_token
							},
							success: function (output) {
								setTimeout(function () {
									$(".ObligationContent").html(output);
								}, 500);
							}
						});
						console.log('@Url.Action("openObligationAmount", "Obligations")' + "/" + holder_id + "?token=" + obligation_token);
					}
				},
			}
		},
		beforeRemoveRow: function (index, column) {
			var selection = this.getSelected();
			var holder_data = this.getData();
			var single_token = holder_data[selection[0][0]][12];
			var first_column = selection[0][0];
			var last_column = selection[0][2];
			var many_token = [];
			for (var j = first_column; j <= last_column; j++) {
				many_token.push({
					many_token: holder_data[j][12]
				})
			}
			console.log("execute here!");
			console.log(selection);
			var ajax_data = {
				"single_token": single_token,
				"many_token": many_token
			};
			console.log(ajax_data);
			ajaxServer(ajax_data,'@Url.Action("DeleteObligation", "Obligations")');
		},
		afterUndo: function (index, column) {
		},
		afterCreateRow: function (row, column) {

			console.log("row "+row);
			console.log("column "+ column);

			CHECK_AFTER_ROW = true;
            TRAP_LOAD = true;
            TRAP_LOAD1 = true;
			hot.setDataAtCell(row, 12, guid());
			hot.setDataAtCell(row, 1, today);
			hot.setDataAtCell(row, 6, Address);
			let above_ors = +hot.getDataAtCell(row - 1, 8) + 1;
			hot.setDataAtCell(row, 8, (above_ors).toString().padStart(4, '0'));

			//DIRI

		},
		afterChange: function (changes, source) {
			if (!changes || source === 'loadData' || CHECK_AFTER_ROW) {
				CHECK_AFTER_ROW = false;
				return;
			}
			changes.forEach(([row, col, oldValue, newValue]) => {
				if (col == 0) {
					CHECK_FIRST_ROW1 = true;
					console.log("if");
					var ajax_data = [];
					ajax_data.push(
						{
							source_id: fund_sub_data_array[hot.getDataAtCell(row, 0)].source_id,
							source_type: fund_sub_data_array[hot.getDataAtCell(row, 0)].source_type,
							Date: hot.getDataAtCell(row, 1),
							Dv: hot.getDataAtCell(row, 2),
							Pr_no: hot.getDataAtCell(row, 3),
							Po_no: hot.getDataAtCell(row, 4),
							Payee: hot.getDataAtCell(row, 5),
							Address: hot.getDataAtCell(row, 6),
							Particulars: hot.getDataAtCell(row, 7),
							Ors_no: hot.getDataAtCell(row, 8),
							Created_by: hot.getDataAtCell(row, 9),
							Gross: hot.getDataAtCell(row, 10),
                            obligation_token: hot.getDataAtCell(row, 12)
							@*Date_recieved: hot.getDataAtCell(row, 11),
							Time_recieved: hot.getDataAtCell(row, 12),
							Date_released: hot.getDataAtCell(row, 13),
							Time_released: hot.getDataAtCell(row, 14),*@
						}
					);
					ajaxServer(ajax_data, '@Url.Action("SaveObligation", "Obligations")');
					console.log(ajax_data);
				}
				else {
					CHECK_AFTER_ROW = true;
				}
			});
			if (CHECK_FIRST_ROW1) {
				CHECK_FIRST_ROW = false;
                CHECK_FIRST_ROW1 = false;
				console.log("wew");
			}
            else if (TRAP_LOAD) {
                TRAP_LOAD = false;
                console.log("TREAP LOAD");
                return;
			}
            else if (TRAP_LOAD1) {
                TRAP_LOAD1 = false;
                console.log("TRAP LOAD1");
                return;
            }
			else if (CHECK_FIRST_ROW) {
                console.log("else");
                var ajax_data = [];
                $.each(hot.getSourceData(), function () {
                    ajax_data.push(
                        {
                            source_id: this[0] ? fund_sub_data_array[this[0]].source_id : 0,
                            source_type: this[0] ? fund_sub_data_array[this[0]].source_type : 0,
                            Date: this[1] ? this[1] : "",
                            Dv: this[2] ? this[2] : "",
                            Pr_no: this[3] ? this[3] : "",
                            Po_no: this[4] ? this[4] : "",
                            Payee: this[5] ? this[5] : "",
                            Address: this[6] ? this[6] : "",
                            Particulars: this[7] ? this[7] : "",
                            Ors_no: this[8] ? this[8] : "",
							Created_by: this[9] ? this[9] : "",
							Gross: this[10] ? this[10] : "",
                            obligation_token: this[12]
                           @* Date_recieved: this[11] ? this[11] : "",
                            Time_recieved: this[12] ? this[12] : "",
                            Date_released: this[13] ? this[13] : "",
                            Time_released: this[14] ? this[14] : "",*@
                        }
                    );
				});
                ajaxServer(ajax_data, '@Url.Action("SaveObligation", "Obligations")');
				console.log(ajax_data);
			}
		},
		hiddenColumns: {
			columns: [11,12],
			indicators: true
		},
		licenseKey: 'non-commercial-and-evaluation',
	});
	var tableData = JSON.stringify(hot.getSourceData());
@*	console.log(hot.getSourceData());*@
</script>