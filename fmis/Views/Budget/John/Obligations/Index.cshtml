@model IEnumerable<fmis.Models.Obligation>
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

<input type="hidden" class="obligation" value="@ViewBag.temp">
<h3 style="color: #438eb9;">Obligation </h3>
<hr />
<input id="search_field2" style="float: left" type="search" placeholder="Search" />
<br />
<br />
<p style="color: #438eb9; ">Please <b>ENTER</b> first then <b>CTRL + S</b> for saving the data.</p>
<div id="example" class="hot"></div>
<br />
<div class="controls" hidden>
    <button id="export-file">Download CSV</button>
</div>


<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <h4 style="margin-top:20px; margin-left:20px; ">Uacs Amount Entry / Disbursement</h4>
            <div class="modal-body ObligationContent">

            </div>
            <div class="modal-footer">
                @*   <button type="button" class="btn btn-sm btn-success">
                        Save <i class="ace-icon fa fa-save"></i>
                    </button>*@
                <button type="button" data-dismiss="modal" class="btn btn-sm btn-default">
                    Close <i class="ace-icon fa fa-close"></i>
                </button>
            </div>
        </div>
    </div>
</div>



<script>


    let guid = () => {
        let s4 = () => {
            return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
        }
        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
    }


    function ajaxServer(ajax_data, url, lobi_type, lobi_msg) {
        $.ajax({
            type: 'POST',
            url: url,
            headers: { "RequestVerificationToken": '@GetAntiXsrfRequestToken()' },
            data: { data: ajax_data },
            success: function (output) {
                $('#loading_modal').modal('hide');
                Lobibox.notify(lobi_type, {
                    msg: lobi_msg,
                    sound: false
                });
                console.log(output);
            }
    });
}

    document.onkeydown = function (e) {
        if (e.ctrlKey && e.keyCode === 83) {
            $('#loading_modal').modal('show');
            var ajax_data = [];
            $.each(hot.getSourceData(), function () {
                ajax_data.push(
                    {
                        Date: this[0] ? this[0] : "",
                        Dv: this[1] ? this[1] : "",
                        Pr_no: this[2] ? this[2] : "",
                        Po_no: this[3] ? this[3] : "",
                        Payee: this[4] ? this[4] : "",
                        Address: this[5] ? this[5] : "",
                        Particulars: this[6] ? this[6] : "",
                        Ors_no: this[7] ? this[7] : "",
                        Fund_source: this[8] ? this[8] : "",
                        Gross: this[9] ? this[9] : "",
                        Created_by: this[10] ? this[10] : "",
                        Date_recieved: this[11] ? this[11] : "",
                        Time_recieved: this[12] ? this[12] : "",
                        Date_released: this[13] ? this[13] : "",
                        Time_released: this[14] ? this[14] : "",
                        Id: this[15] ? this[15] : "",
                        token: this[16] ? this[16] : guid()
                    }
                );
            });

            ajaxServer(ajax_data, '@Url.Action("SaveObligation", "Obligations")', 'success', 'Sucessfully saved the new rows!');

            return false;

        }
    };


    var obligation = $.parseJSON($(".obligation").val());

    const data = [];
    var counter = 0;
    $.each(obligation, function () {
        data[counter] = [this.Date, this.Dv, this.Pr_no, this.Po_no, this.Payee, this.Address, this.Particulars, this.Ors_no, this.Fund_source, this.Gross, this.Created_by, this.Date_recieved, this.Time_recieved, this.Date_released, this.Time_released, this.Id , this.token]
        counter++;
    })
    const searchField = document.querySelector('#search_field2');
    const button = document.querySelector('#export-file');
    const container = document.getElementById('example');
    const hot = new Handsontable(container, {
        data: data,
        width: '100%',
        colWidths: 108,
        rowHeaders: true,
        colHeaders: true,
        search: {
            searchResultClass: 'search-result-custom'
        },
        contextMenu: {
            items: {
                "make_bold": {
                    name: 'Print ORS',
                    callback: function (key, options) {
                        var selection = this.getSelected();
                        var tempdata = this.getData();
                        var data = [];
                        var url = '@Url.Action("Export", "FundSource")';
                        window.open(url);
                    }
                },
                "": {
                    name: 'UACS Amount Entry / Disbmt.',
                    callback: function (key, options) {
                        $("#exampleModal").modal('show');
                        $(".ObligationContent").html(loading);
                        var selection = this.getSelected();
                        var holder_data = this.getData();
                        var holder_id = holder_data[selection[0][0]][15]

                        $.ajax({
                        type: 'GET',
                        headers: { "RequestVerificationToken": '@GetAntiXsrfRequestToken()' },
                        url: '@Url.Action("ObligationModal", "Obligations")',
                        data: { id: holder_id },
                        success: function (output) {
                            @*console.log(output);*@
                            setTimeout(function () {
                                $(".ObligationContent").html(output);
                            }, 500);
                        }
                    });


                    }
                }, "row_below": {}, "remove_row": {}, "row_above": {}, "copy": {},
            }
        },
        beforeRemoveRow: function (index, column) {
            var selection = this.getSelected();
            var holder_data = this.getData();
            var single_id = holder_data[selection[0][0]][15];

            console.log(selection);
            console.log(holder_data);
            console.log(column);

            var first_column = selection[0][0];
            var last_column = selection[0][2];
            console.log(first_column);
            console.log(last_column);
            var many_id = [];
            for (var j = first_column; j <= last_column; j++) {
                many_id.push({
                    many_id: holder_data[j][15],
                    many_token: guid() + holder_data[j][15]
                })
            }

            if (single_id) {
                var ajax_data = {
                    "single_id": single_id,
                    "many_id": many_id,
                    "single_token": guid()
                };

                ajaxServer(ajax_data,'@Url.Action("DeleteConfirmed", "Obligations")','warning','Successfully removed.');
            }

        },
        afterUndo: function (index, column) {
            Lobibox.notify("info", {
                msg: "You are doing undo!",
                sound: false
            });
            console.log(this.getData());
        },
          @*  var selection = this.getSelected();
            var holder_data = this.getData();
            var holder_id = holder_data[selection[0][0]][15]

            if (holder_id) {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("DeleteConfirmed", "Obligations")',
                    dataType: "JSON",
                    data: { id: holder_id },
                    success: function (output) {
                        console.log(output);
                    }
                });
            }

            Lobibox.notify("warning", {
                msg: "Your selected row was remove",
                sound: false
            });

        },*@
        height: 'auto',
        hiddenColumns: {
            columns: [15,16],
            indicators: true
        },
        licenseKey: 'non-commercial-and-evaluation', // for non-commercial use onlWy
        dataSchema: { Date: null, Dv: null, Pr_no: null, Po_no: null, Payee: null, Address: null, Particulars: null, Ors_no: null, Fund_source: null, Gross: null, Created_by: null, Date_recieved: null, Time_recieved: null, Date_released: null, Time_released: null },
        columns: [
            { data: 'Date ', type: 'date' },
            { data: 'Dv', type: 'text' },
            { data: 'Pr_no', type: 'text' },
            { data: 'Po_no', type: 'text' },
            { data: 'Payee', type: 'text' },
            { data: 'Address', type: 'text' },
            { data: 'Particulars', type: 'text' },
            { data: 'Ors_no', type: 'numeric' },
            { data: 'Fund_source', type: 'text' },
            { data: 'Gross', type: 'text' },
            { data: 'Created_by', type: 'text' },
            { data: 'Date_recieved', type: 'text' },
            { data: 'Time_recieved', type: 'text' },
            { data: 'Date_released', type: 'text' },
            { data: 'Time_released', type: 'text' },
            { data: 'Id ', type: 'text' },
            { data: 'token ', type: 'text' }

        ]
    });

    Handsontable.dom.addEvent(searchField, 'keyup', function (event) {
        const search = hot.getPlugin('search');
        const queryResult = search.query(this.value);

        console.log(queryResult);
        hot.validateCells();
    });

    const exportPlugin = hot.getPlugin('exportFile');

    button.addEventListener('click', () => {
        exportPlugin.downloadFile('csv', {
            bom: false,
            columnDelimiter: ',',
            columnHeaders: true,
            exportHiddenColumns: true,
            exportHiddenRows: true,
            fileExtension: 'csv',
            filename: 'Handsontable-CSV-file_[YYYY]-[MM]-[DD]',
            mimeType: 'text/csv',
            rowDelimiter: '\r\n',
            rowHeaders: true
        });
    });


    hot.updateSettings({
        colHeaders: ['DATE', 'DV', 'PR #', 'PO #', 'PAYEE', 'ADDRESS', 'PARTICULARS', 'ORS #', 'FUND SOURCE', 'GROSS', 'CREATED BY', 'DATE RECEIVED', 'TIME RECEIVED', 'DATE RELEASED', 'TIME RELEASED', 'ID', 'TOKEN'],
        cell: [
            {
                row: 0,
                col: 0,
                className: 'custom-cell',
            },
        ],
        columns: [
            {
                type: 'date',
                dateFormat: 'MM/DD/YYYY',
                correctFormat: true,
                defaultDate: Date.now()
            },
            {
                // 2nd cell is simple text, no special options here
            },
            {

            },
            {

            },
            {

            },
            {

            },
            {

            },

            {

            },

            {
                type: 'dropdown',
                source: ['Rusel', 'John', 'Carlo', 'Arnel', 'Amalio']
            },

            {
            },

            {
            },

            {
                type: 'date',
                dateFormat: 'MM/DD/YYYY',
            },

            {
                type: 'time',
                timeFormat: 'h:mm:ss a',
                correctFormat: true
            },

            {
                type: 'date',
                dateFormat: 'MM/DD/YYYY',
            },

            {
                type: 'time',
                timeFormat: 'h:mm:ss a',
                correctFormat: true
            },
            {
                //HIDDEN ID
            },
            {
                //HIDDEN TOKEN
            },
        ]
    });

    var tableData = JSON.stringify(hot.getSourceData());
    console.log(hot.getSourceData());


</script>




@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}