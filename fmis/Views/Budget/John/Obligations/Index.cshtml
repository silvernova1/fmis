@model IEnumerable<fmis.Models.Obligation>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/handsontable/dist/handsontable.full.min.css" />

<style>
    .search-result-custom {
        color: #ff0000;
        font-weight: 900;
    }

    .htCore tbody tr td, .htCore thead tr th, body {
    }


    .htCore thead tr th {
        color: #fff;
        font-size: 13px;
        background-color: #2ECC71
    }
</style>


<input type="hidden" class="obligation" value="@ViewBag.temp">
<input id="search_field2" style="float: left" type="search" placeholder="Search" />
<br />
<br />
<div id="example" class="hot"></div>
<br />
<div class="controls">
    <button id="export-file">Download CSV</button>
</div>

<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">New message</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="mb-3">
                        <label for="recipient-name" class="col-form-label">Recipient:</label>
                        <input type="text" class="form-control" id="recipient-name">
                    </div>
                    <div class="mb-3">
                        <label for="message-text" class="col-form-label">Message:</label>
                        <textarea class="form-control" id="message-text"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary">Send message</button>
            </div>
        </div>
    </div>
</div>


<script>

    document.onkeydown = function (e) {
        if (e.ctrlKey && e.keyCode === 83) {
            $('#loading_modal').modal('show');

            var json = [];
            $.each(hot.getSourceData(), function () {
                json.push({ Date: this[0], Dv: this[1], Pr_no: this[2], Po_no: this[3], Payee: this[4], Address: this[5], Particulars: this[6], Ors_no: this[7], Fund_source: this[8], Gross: this[9], Created_by: this[10], Date_recieved: this[11], Time_recieved: this[12], Date_released: this[13], Time_released: this[13] } );
            });

            $.ajax({
                type: 'POST',
                url: '@Url.Action("SaveObligation", "Obligations")',
                dataType: "JSON",
                data: { data: json },
                success: function (output) {
                    $('#loading_modal').modal('hide');
                    Lobibox.notify("success", {
                        msg: "Successfully Saved...",
                        sound: false
                    });
                    console.log(output);
                }
            });

            return false;
        }
    };


    var obligation = $.parseJSON($(".obligation").val());

    const data = [];
    var counter = 0;
    $.each(obligation, function () {
        data[counter] = [this.Date, this.Dv, this.Pr_no, this.Po_no, this.Payee, this.Address, this.Particulars, this.Ors_no, this.Fund_source, this.Gross, this.Created_by, this.Date_recieved, this.Time_recieved, this.Date_released, this.Time_released]
        counter++;
    })
    const searchField = document.querySelector('#search_field2');
    const button = document.querySelector('#export-file');
    const container = document.getElementById('example');
    const hot = new Handsontable(container, {
        data: data,
        width: '100%',
        colWidths: 100,
        rowHeaders: true,
        colHeaders: true,
        search: {
            searchResultClass: 'search-result-custom'
        },
        @*contextMenu: [['Print ORS'], 'row_above', 'row_below', 'remove_row', ['Add Obligated Amount']],*@
        contextMenu: {
            items: {
                "make_bold": {
                    name: 'Print ORS',
                    callback: function (key, options) {
                        var selection = this.getSelected();
                        var tempdata = this.getData();
                        var data = [];
                        var url = "www.youjizz.com";
                        @*data = selectedRows(selection, tempdata, 1);*@
                        @*openWindowWithPost(url, data, allotmentID);*@
                        @*openWindowWithPost(url);*@
                        window.open(url);
                    }
                },
                "": {
                    name: 'UACS Amount Entry / Disbmt.',
                    callback: function (key, options) {
                        var selection = this.getSelected();
                        var tempdata = this.getData();
                        @*var data = [];
                        data = selectedRows(selection, tempdata, 0);*@
                        console.log(tempdata[selection[0][0]]);
                        $('#exampleModal').modal('show');
                    }
                }, "row_below": {}, "remove_row": {}, "row_above": {}, "copy": {},
            }
        },
        height: 'auto',
        licenseKey: 'non-commercial-and-evaluation', // for non-commercial use only
        dataSchema: { Date: null, Dv: null, Pr_no: null, Po_no: null, Payee: null, Address: null, Particulars: null, Ors_no: null, Fund_source: null, Gross: null, Created_by: null, Date_recieved: null, Time_recieved: null, Date_released: null, Time_released: null},
        columns: [
            { data: 'Date ', type: 'date' },
            { data: 'Dv', type: 'text' },
            { data: 'Pr_no', type: 'text' },
            { data: 'Po_no', type: 'text' },
            { data: 'Payee', type: 'text' },
            { data: 'Address', type: 'text' },
            { data: 'Particulars', type: 'text' },
            { data: 'Ors_no', type: 'numeric' },
            { data: 'Fund_source', type: 'text' },
            { data: 'Gross', type: 'text' },
            { data: 'Created_by', type: 'text' },
            { data: 'Date_recieved', type: 'text' },
            { data: 'Time_recieved', type: 'text' },
            { data: 'Date_released', type: 'text' },
            { data: 'Time_released', type: 'text' }

        ]
    });

    Handsontable.dom.addEvent(searchField, 'keyup', function (event) {
        const search = hot.getPlugin('search');
        const queryResult = search.query(this.value);

        console.log(queryResult);
        hot.render();
    });

    const exportPlugin = hot.getPlugin('exportFile');

    button.addEventListener('click', () => {
        exportPlugin.downloadFile('csv', {
            bom: false,
            columnDelimiter: ',',
            columnHeaders: true,
            exportHiddenColumns: true,
            exportHiddenRows: true,
            fileExtension: 'csv',
            filename: 'Handsontable-CSV-file_[YYYY]-[MM]-[DD]',
            mimeType: 'text/csv',
            rowDelimiter: '\r\n',
            rowHeaders: true
        });
    });

    hot.addHook('afterChange', function (changes, src) {
        [
            [row, col, oldVal, newVal]
        ] = changes;
        if (hot.propToCol(col) === 3 && newVal.slice(0, 1) !== 'Y') {
            console.log(newVal);
            hot.setDataAtCell(row, hot.propToCol(col), 'Y' + newVal.slice(1, newVal.length))
        }
    })

    hot.updateSettings({
        colHeaders: ['Date', 'Dv', 'Pr_no', 'Po_no', 'Payee', 'Address', 'Particulars', 'Ors_no', 'Fund_source', 'Gross', 'Created_by', 'Date_recieved', 'Time_recieved', 'Date_released', 'Time_released'],
        cell: [
            {
                row: 0,
                col: 0,
                className: 'custom-cell',
            },
        ],
        columns: [
            {
                type: 'date',
                dateFormat: 'MM/DD/YYYY',
            },
            {
                // 2nd cell is simple text, no special options here
            },
            {

            },
            {

            },
            {

            },
            {

            },
            {

            },

            {

            },

            {
                type: 'dropdown',
                source: ['Rusel', 'John', 'Carlo', 'Arnel', 'Amalio']
            },

            {
            },

            {
            },

            {
                type: 'date',
                dateFormat: 'MM/DD/YYYY',
            },

            {
                type: 'time',
                timeFormat: 'h:mm:ss a',
                correctFormat: true
            },

            {
                type: 'date',
                dateFormat: 'MM/DD/YYYY',
            },

            {
                type: 'time',
                timeFormat: 'h:mm:ss a',
                correctFormat: true
            },
        ]
    });

    var tableData = JSON.stringify(hot.getSourceData());
    console.log(hot.getSourceData());


</script>
@*<style>

        td.custom-cell {
            color: #fff;
            background-color: #37bc6c;
        }

        .handsontable th:nth-child(0) {
            background-color: aquamarine;
            font-weight: bold;
        }


        .custom-table tdata th:nth-child(even),
        .custom-table tbody tr:nth-child(odd) th {
            background-color: #d7f1e1;
        }
    </style>*@
