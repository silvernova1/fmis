@model fmis.Models.FundSourceTrustFund
@using fmis.Models.John;

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

@{
    ViewData["Title"] = "Create";
    Layout = null;
}

<form asp-action="Create">
    <input hidden type="text" id="funds_input_token" name="token" value="" />
    <div>
        <input type="hidden" asp-for="BudgetAllotmentTrustFundId" value="@ViewBag.BudgetAllotmentTrustFundId" />
        <input type="hidden" asp-for="AllotmentClassId" value="@ViewBag.AllotmentClassId" />
        <input type="hidden" asp-for="AppropriationId" value="@ViewBag.AppropriationId" />
        <div class="alert alert-info no-margin alert-dismissable" style="margin-top:10px;">
            <h7><i class="fa fa-bar-chart-o fa-fw"></i> Create Fund Source (Trust Fund)</h7>
            <div class="pull-right">
                <div class="btn-group">
                    <input type="submit" id="btnsubmit" onclick="fundSourceToken" value="Create" class="btn btn-success btn-xs" />
                    <a class="btn btn-danger btn-xs" data-dismiss="modal">Exit</a>
                </div>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-6">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-group">
                    <label>Fund Source: </label>
                    <select class="form-control" asp-for="FundId" asp-items="ViewBag.FundId"></select>
                </div>
                <div class="form-group">
                    <label>PAP Title:</label>
                    @Html.DropDownList("PrexcTrustFundId", null, htmlAttributes: new { @class = "js-example-basic-single form-control", @id = "ddlBranches", onchange = "return get_sbu(this)" })
                </div>
                <div class="form-group">
                    <label>PAP Type: </label>
                    <input asp-for="PapType" id="pap_type" class="form-control" readonly />
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    <label>Responsibility Center: </label>
                    <select class="form-control" asp-for="RespoId" asp-items="ViewBag.RespoId"></select>
                </div>
                <div class="form-group">
                    <label>FundSource (Trust Fund) Title:</label>
                    <input asp-for="FundSourceTrustFundTitle" class="form-control" required />
                    <span asp-validation-for="FundSourceTrustFundTitle" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label>FundSource (Trust Fund) Code:</label>
                    <input asp-for="FundSourceTrustFundTitleCode" id="pap_code1" class="form-control" readonly />
                    <span asp-validation-for="FundSourceTrustFundTitleCode" class="text-danger"></span>
                </div>

            </div>
        </div>
        <input type="hidden" id="FundSourceTrustFundId" />
        <input type="hidden" class="fundsourceamount_trust_fund" value="@ViewBag.temp">
        <input type="hidden" class="uacs" value="@ViewBag.uacs">
        <br />
        <input id="search_field2" style="float: left" type="search" hidden placeholder="Search" />
        <div id="fundsource_amount_create_trust_fund" class="hot handsontable htColumnHeaders"></div>
        <br />
        <div class="controls" hidden>
            <button id="export-file">Download CSV</button>
        </div>
    </div>
</form>

<script>
    $(document).ready(function () {
        $('.js-example-basic-single').select2();
    });

    get_sbu();

    function get_sbu() {
        var selected_val = $('#ddlBranches').find(":selected").attr('value');
        $.ajax({
            type: "POST",
            url: '@Url.Action("selectAT", "FundSourceTrustFund")',
            data: "id=" + selected_val,
            success: function (data) {
                if (data.length > 0) {
                    $('#pap_code1').val(data[0].pap_code1);
                    $('#pap_type').val(data[0].pap_type);
                }
                else {
                    $('#pap_code1').val('');
                    $('#pap_type').val('');
                }
            }
        });
    }
</script>


<script>
    var BudgetAllotmentTrustFundId = @ViewBag.BudgetAllotmentTrustFundId;
    console.log(BudgetAllotmentTrustFundId);
    var fundsource_token_trust_fund = generate_token();
    $("#funds_input_token").val(fundsource_token_trust_fund);
    var CHECK_AFTER_ROW = false;
    var CHECK_FIRST_ROW = false;
    function ajaxServer(ajax_data, url) {
        $.ajax({
            type: 'POST',
            url: url,
            headers: { "RequestVerificationToken": '@GetAntiXsrfRequestToken()' },
            data: { data: ajax_data },
            success: function (output) {
                $('#loading_modal').modal('hide');
                console.log(output);
            }
        });
    }
    const data = [];
    var counter = 0;
    var obligation_amount = 0;
    var uacs = $.parseJSON($(".uacs").val());
    var uacs_data_dropdown = []; //dara
    var uacs_data_array = []; //dara
    var get_account_title = []; //dara
    var uacs_counter = 0;
    $.each(uacs, function () {
        uacs_data_dropdown[uacs_counter] = this.Account_title; //dara
        var json_data = new Object(); //dara
        json_data.UacsTrustFundId = this.UacsTrustFundId; //dara
        uacs_data_array[this.Account_title] = json_data; //dara
        get_account_title[this.UacsTrustFundId] = this.Account_title;
        uacs_counter++;
    });
    const searchField = document.querySelector('#search_field2');
    const button = document.querySelector('#export-file');
    const container = document.getElementById('fundsource_amount_create_trust_fund');
    const hot = new Handsontable(container, {
        data: data,
        rowHeaders: true,
        colHeaders: true,
        colWidths: [150, 150],
        colHeaders: ['EXPENSE TITLE', 'AMOUNT', 'ID', 'TOKEN'],
        columns: [
            {
                type: 'dropdown',
                source: uacs_data_dropdown
            },
            {
                type: 'numeric',
                numericFormat: {
                    pattern: '0,0.00',
                }
            },
            {
                //HIDDEN FUNDSOURCE TOKEN
            },
            {
                //HIDDEN FUNDSOURCE AMOUNT TOKEN
            },
        ],
        stretchH: 'all',
        height: '450px',
        className: 'htLeft',
        search: {
            searchResultClass: 'search-result-custom'
        },
        contextMenu: ['row_above', 'row_below', 'remove_row'],
        beforeRemoveRow: function (index, column) {
            var selection = this.getSelected();
            var holder_data = this.getData();
            var single_token = holder_data[selection[0][0]][3];
            console.log(selection);
            console.log(holder_data);
            console.log(column);
            var first_column = selection[0][0];
            var last_column = selection[0][2];
            console.log(first_column);
            console.log(last_column);
            var many_token = [];
            for (var j = first_column; j <= last_column; j++) {
                many_token.push({
                    many_token: holder_data[j][3]
                })
            }
            if (single_token) {
                var ajax_data = {
                    "single_token": single_token,
                    "many_token": many_token,
                };
                console.log(ajax_data);
                ajaxServer(ajax_data,'@Url.Action("DeleteFundSourceAmountTrustFund", "FundSourceTrustFund")');
            }
        },
        afterUndo: function (index, column) {
        },
        afterCreateRow: function (row, column) {
            CHECK_FIRST_ROW = true;
            console.log(generate_token());
            hot.setDataAtCell(row, 3, generate_token());
        },
        afterChange: function (changes, source) {
            if (!changes || source === 'loadData' || CHECK_AFTER_ROW) {
                CHECK_AFTER_ROW = false;
                return;
            }
            changes.forEach(([row, col, oldValue, newValue]) => {
                if (col == 0) {
                    var ajax_data = [];
                    ajax_data.push(
                        {
                            BudgetAllotmentTrustFundId: BudgetAllotmentTrustFundId,
                            UacsTrustFundId: uacs_data_array[hot.getDataAtCell(row, col)].UacsTrustFundId,
                            Amount: hot.getDataAtCell(row, col + 2),
                            FundSourceAmountTokenTrustFund: hot.getDataAtCell(row, col + 3),
                            FundSourceTokenTrustFund: fundsource_token_trust_fund
                        }
                    );
                    console.log(ajax_data);
                    ajaxServer(ajax_data, '@Url.Action("SaveFundSourceAmountTrustFund", "FundSourceTrustFund")');
                    CHECK_FIRST_ROW = true;
                }
            });
            if (CHECK_FIRST_ROW) {
                CHECK_FIRST_ROW = false; //TRAP THE DOUBLE LOAD IN FIRST ROW
            } else {
                var ajax_data = [];
                $.each(hot.getSourceData(), function () {
                    ajax_data.push({
                        BudgetAllotmentTrustFundId: BudgetAllotmentTrustFundId,
                        UacsTrustFundId: uacs_data_array[this[0]].UacsTrustFundId,
                        Amount: this[1],
                        FundSourceAmountTokenTrustFund: this[3],
                        FundSourceTokenTrustFund: fundsource_token_trust_fund
                    });
                });
                console.log(ajax_data);
                ajaxServer(ajax_data, '@Url.Action("SaveFundSourceAmountTrustFund", "FundSourceTrustFund")');
            }
		},
        hiddenColumns: {
            columns: [2,3],
            indicators: true
        },
        licenseKey: 'non-commercial-and-evaluation', // for non-commercial use only
    });
    var tableData = JSON.stringify(hot.getSourceData());
    console.log(hot.getSourceData());
</script>