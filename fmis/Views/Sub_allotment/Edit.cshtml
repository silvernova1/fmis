@model fmis.Models.Sub_allotment
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@using System.Text.Json;

@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

<form asp-action="Edit" method="post">
    <input type="hidden" asp-for="SubAllotmentId" value="@Model.SubAllotmentId" />
    <input type="hidden" asp-for="Budget_allotmentBudgetAllotmentId" value="@Model.Budget_allotmentBudgetAllotmentId" />
    <input type="hidden" class="suballotment_amount_uacs" value="@JsonSerializer.Serialize(Model.SubAllotmentAmounts)">
    <input type="hidden" class="uacs" value="@ViewBag.uacs">
    <input type="hidden" class="suballotment_token" value="@Model.token">
    <div class="alert alert-success no-margin alert-dismissable" style="margin-top:10px;">
        <h7><i class="fa fa-bar-chart-o fa-fw"></i> Edit Budget Source (Sub Alloment)</h7>
        <div class="pull-right">
            <div class="btn-group">
                <input type="submit" value="Save" class="btn btn-success btn-xs" />
                <a class="btn btn-danger btn-xs" data-dismiss="modal">Exit</a>
            </div>
        </div>
    </div>
    <br />
    <div class="row">
        <div class="col-md-6">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Budget_allotmentBudgetAllotmentId" value="@ViewBag.BudgetId" />
            <div class="form-group">
                <label asp-for="prexc" class="control-label"></label>
                @Html.DropDownList("prexcId", null, htmlAttributes: new { @class = "prexc form-control" })
            </div>
            <div class="form-group">
                <label asp-for="Suballotment_code" class="control-label"></label>
                <input asp-for="Suballotment_code" class="form-control" />
                <span asp-validation-for="Suballotment_code" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <textarea asp-for="Description" class="form-control"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
        </div>
        <div class="col-md-6">
            <div class="form-group">
                <label asp-for="Suballotment_title" class="control-label"></label>
                <input asp-for="Suballotment_title" class="form-control" />
                <span asp-validation-for="Suballotment_title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Responsibility_number" class="control-label"></label>
                <input asp-for="Responsibility_number" class="form-control" />
                <span asp-validation-for="Responsibility_number" class="text-danger"></span>
            </div>
        </div>
    </div>
    <input type="hidden" class="suballotment_amount_edit" value="@ViewBag.temp">

    <br />
    <input id="search_field2" style="float: left" type="search" hidden placeholder="Search" />
    <div id="suballotment_amount_edit" class="hot handsontable htColumnHeaders"></div>
    <br />
    <div class="controls" hidden>
        <button id="export-file">Download CSV</button>
    </div>
</form>

<script>
    $(document).ready(function () {
        $('.prexc').select2();
    });
</script>

<script>

    var sub_allotment_id= @Model.SubAllotmentId;
    var BudgetId = @Model.Budget_allotmentBudgetAllotmentId;
    var suballotment_token = generate_token();

        let guid = () => {
        let s4 = () => {
            return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
        }
        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
    }


    function ajaxServer(ajax_data, url) {
        $.ajax({
            type: 'POST',
            url: url,
            headers: { "RequestVerificationToken": '@GetAntiXsrfRequestToken()' },
            data: { data: ajax_data },
            success: function (output) {
                $('#loading_modal').modal('hide');
                console.log(output);
            }
        });
    }

    $(".obligation_amount").html(obligation_amount);
    var uacs = $.parseJSON($(".uacs").val());
    var uacs_data_dropdown = [];
    var uacs_data_array = [];
    var get_account_title = [];
    var uacs_counter = 0;
    $.each(uacs, function () {
        uacs_data_dropdown[uacs_counter] = this.Account_title;
        var json_data = new Object();
        json_data.UacsId = this.UacsId;
        uacs_data_array[this.Account_title] = json_data;
        get_account_title[this.UacsId] = this.Account_title;
        uacs_counter++;
    });


    var suballotment_amount_uacs = $.parseJSON($(".suballotment_amount_uacs").val());
    const data = [];
    var counter = 0;
    var obligation_amount = 0;
    $.each(suballotment_amount_uacs, function () {
        data[counter] = [get_account_title[this.UacsId], this.Amount, this.suballotment_amount_token, this.suballotment_token]
        counter++;
        obligation_amount += this.Amount;
    })


    const searchField = document.querySelector('#search_field2');
    const button = document.querySelector('#export-file');
    const container = document.getElementById('suballotment_amount_edit');
    const hot = new Handsontable(container, {
        data: data,
        rowHeaders: true,
        colHeaders: true,
        colWidths: [150, 150],
        colHeaders: ['EXPENSES', 'AMOUNT', 'ID', 'TOKEN'],
        columns: [
            {
                type: 'dropdown',
                source: uacs_data_dropdown
            },
            {
            },
            {
                //HIDDEN ID
            },
            {
                //HIDDEN TOKEN
            },
        ],
        stretchH: 'all',
        height: '200px',
        search: {
            searchResultClass: 'search-result-custom'
        },
        contextMenu: ['row_above', 'row_below', 'remove_row'],
        beforeRemoveRow: function (index, column) {
            var selection = this.getSelected();
            var holder_data = this.getData();
            var single_token = holder_data[selection[0][0]][2];
            console.log(selection);
            console.log(holder_data);
            console.log(column);
            var first_column = selection[0][0];
            var last_column = selection[0][2];
            console.log(first_column);
            console.log(last_column);
            var many_token = [];
            for (var j = first_column; j <= last_column; j++) {
                many_token.push({
                    many_token: holder_data[j][2]
                })
            }
            if (single_token) {
                var ajax_data = {
                    "single_token": single_token,
                    "many_token": many_token,
                };
                console.log(ajax_data);
                ajaxServer(ajax_data,'@Url.Action("DeleteSuballotment_amount", "Sub_allotment")');
            }
        },
        afterUndo: function (index, column) {
        },
        afterCreateRow: function (row, column) {
            CHECK_FIRST_ROW = true;
            hot.setDataAtCell(row, 2, generate_token());
        },
        afterChange: function (changes, source) {
                if (!changes || source === 'loadData' || CHECK_AFTER_ROW) {
                CHECK_AFTER_ROW = false;
                return;
            }

            changes.forEach(([row, col, oldValue, newValue]) => {
                if (col == 0) {
                    var ajax_data = [];
                    ajax_data.push(
                        {
                            SubAllotmentId: sub_allotment_id,
                            BudgetId: BudgetId,
                            UacsId: uacs_data_array[hot.getDataAtCell(row, col)].UacsId,
                            Amount: hot.getDataAtCell(row, col + 1),
                            suballotment_amount_token: hot.getDataAtCell(row, col + 2),
                            suballotment_token: suballotment_token
                        }
                    );
                    @*console.log(hot.getSourceData());*@
                    ajaxServer(ajax_data, '@Url.Action("SaveSuballotment_amount", "Sub_allotment")');
                    CHECK_FIRST_ROW = true;
                }
            });

            if (CHECK_FIRST_ROW) {
                CHECK_FIRST_ROW = false; //TRAP THE DOUBLE LOAD IN FIRST ROW
            } else {
                var ajax_data = [];
                $.each(hot.getSourceData(), function () {
                    ajax_data.push({
                        SubAllotmentId: sub_allotment_id,
                        BudgetId: BudgetId,
                        UacsId: uacs_data_array[this[0]].UacsId,
                        Amount: this[1],
                        suballotment_amount_token: this[2],
                        suballotment_token: suballotment_token
                    });
                });
                @*console.log(ajax_data);*@
                $(".obligation_amount").html(obligation_amount);
                ajaxServer(ajax_data, '@Url.Action("SaveSuballotment_amount", "Sub_allotment")');
            }
		},
          @*  if (source === 'loadData') {
                return; //don't save this change
            }
            console.log(hot.getSourceData());
            console.log(changes);
            var ajax_data = [];
            $(".obligation_amount").html();
            obligation_amount = 0;
            $.each(hot.getSourceData(), function () {
                ajax_data.push(
                    {
                        FundSourceId: sub_allotment_id,
                        budget_id: budget_id,
                        Expenses: this[0],
                        Amount: this[1],
                        Id: this[2],
                        suballotment_amount_token: this[3],
                        suballotment_token: suballotment_token
                    }
                );
                obligation_amount += parseInt(this[1]);
            });
            console.log(ajax_data);
            $(".obligation_amount").html(obligation_amount);
            ajaxServer(ajax_data, '@Url.Action("SaveSuballotment_amount", "Sub_allotment")');
        },*@
        hiddenColumns: {
            columns: [2,3],
            indicators: true
        },
        licenseKey: 'non-commercial-and-evaluation', // for non-commercial use only
    });
    var tableData = JSON.stringify(hot.getSourceData());
    console.log(hot.getSourceData());
</script>
