@model fmis.Models.Sub_allotment

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

@{
    ViewData["Title"] = "Create";
    Layout = null;
}

<form asp-action="Create">
    <input hidden type="text" id="subs_input_token" name="token" value="" />
    <div >
        <input type="hidden" asp-for="Budget_allotmentBudgetAllotmentId" value="@ViewBag.budget_id" />
        <div class="alert alert-success no-margin alert-dismissable" style="margin-top:10px;">
            <h7><i class="fa fa-bar-chart-o fa-fw"></i> Create Budget Source (Sub Allotment)</h7>
            <div class="pull-right">
                <div class="btn-group">
                     <input type="submit" id="btnsubmit" onclick="subAllotmentToken" value="Create" class="btn btn-success btn-xs" />
                     <a class="btn btn-danger btn-xs" data-dismiss="modal">Exit</a>
                </div>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-6">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div class="form-group">
                   @* <label asp-for="Prexc" class="control-label"></label>*@
                    <label>Prexc:</label>
                    @Html.DropDownList("Id", null, htmlAttributes: new { @class = "prexc form-control" })
                </div>
                <div class="form-group">
                   @* <label asp-for="Suballotment_title" class="control-label"></label>*@
                    <label>Suballotment_title:</label>
                    <input asp-for="Suballotment_title" class="form-control" required>
                    <span asp-validation-for="Suballotment_title" class="text-danger"></span>
                </div>
                <div class="form-group">
                    @*<label asp-for="Description" class="control-label"></label>*@
                    <label>Description:</label>
                    <textarea asp-for="Description" class="form-control" required></textarea>
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @*<label asp-for="Suballotment_code" class="control-label"></label>*@
                    <label>Suballotment_code:</label>
                    <input asp-for="Suballotment_code" class="form-control" required />
                    <span asp-validation-for="Suballotment_code" class="text-danger"></span>
                </div>
                <div class="form-group">
                    @*<label asp-for="Responsibility_number" class="control-label"></label>*@
                    <label>Responsibility_number:</label>
                    <input asp-for="Responsibility_number" class="form-control" required />
                    <span asp-validation-for="Responsibility_number" class="text-danger"></span>
                </div>
                <strong id="" class="obligation_amount"> </strong>
            </div>
        </div>
        <input type="hidden" id="SubId" />
        <input type="hidden" class="suballotment_amount" value="@ViewBag.temp">
        <input type="hidden" class="uacs" value="@ViewBag.uacs">
        <br />
        <input id="search_field2" style="float: left" type="search" hidden placeholder="Search" />
        <br />
        @*<p style="margin-left: 5px; color: cornflowerblue; ">Please ENTER first then CTRL + S for saving the data.</p>*@
        <div id="suballotment_amount_create" class="hot handsontable htColumnHeaders"></div>
        <br />
        <div class="controls" hidden>
            <button id="export-file">Download CSV</button>
        </div>
    </div>
</form>

<script>
    $(document).ready(function () {
        $('.js-example-basic-single').select2();
    });
</script>

<script>

    var BudgetId = @ViewBag.budget_id;

    var sub_allotment_token = generate_token();

    $("#subs_input_token").val(sub_allotment_token);

    function ajaxServer(ajax_data, url) {
        $.ajax({
            type: 'POST',
            url: url,
            headers: { "RequestVerificationToken": '@GetAntiXsrfRequestToken()' },
            data: { data: ajax_data },
            success: function (output) {
                $('#loading_modal').modal('hide');
                console.log(output);
            }
        });
    }

    const data = [];
    var counter = 0;
    var obligation_amount = 0;
    var uacs = $.parseJSON($(".uacs").val());
    const uacs_data = [];
    var uacs_counter = 0;
    $.each(uacs, function () {
        uacs_data[uacs_counter] = this.Account_title
        uacs_counter++;
    })
    console.log(uacs_data);
    const searchField = document.querySelector('#search_field2');
    const button = document.querySelector('#export-file');
    const container = document.getElementById('suballotment_amount_create');
    const hot = new Handsontable(container, {
        data: data,
        rowHeaders: true,
        colHeaders: true,
        colWidths: [150, 150],
        colHeaders: ['EXPENSES', 'AMOUNT', 'ID', 'TOKEN'],
        columns: [
            {
                type: 'dropdown',
                source: uacs_data
            },
            {
            },
            {
                //HIDDEN ID
            },
            {
                //HIDDEN TOKEN
            },
        ],
        stretchH: 'all',
        height: '200px',
        search: {
            searchResultClass: 'search-result-custom'
        },
        contextMenu: ['row_above', 'row_below', 'remove_row'],
        beforeRemoveRow: function (index, column) {
            var selection = this.getSelected();
            var holder_data = this.getData();
            var single_token = holder_data[selection[0][0]][3];
            console.log(selection);
            console.log(holder_data);
            console.log(column);
            var first_column = selection[0][0];
            var last_column = selection[0][2];
            console.log(first_column);
            console.log(last_column);
            var many_token = [];
            for (var j = first_column; j <= last_column; j++) {
                many_token.push({
                    many_token: holder_data[j][3]
                })
            }
            if (single_token) {
                var ajax_data = {
                    "single_token": single_token,
                    "many_token": many_token,
                };
                console.log(ajax_data);
                 ajaxServer(ajax_data,'@Url.Action("DeleteSuballotment_amount", "Sub_allotment")');
            }
        },
        afterUndo: function (index, column) {
        },
        afterCreateRow: function (row, column) {
            console.log(generate_token());
            hot.setDataAtCell(row, 3, generate_token());
        },
        afterChange: function (changes, source) {
            if (source === 'loadData') {
                return; //don't save this change
            }
            console.log(changes);
            var ajax_data = [];
            $(".obligation_amount").html();
            obligation_amount = 0;
            $.each(hot.getSourceData(), function () {
                ajax_data.push(
                    {
                        BudgetId: BudgetId,
                        Expenses: this[0],
                        Amount: this[1],
                        Id: this[2],
                        sub_allotment_amount_token: this[3],
                        sub_allotment_token: sub_allotment_token
                    }
                );
                obligation_amount += parseInt(this[1]);
            });
            console.log(ajax_data);
            $(".obligation_amount").html(obligation_amount);
            ajaxServer(ajax_data, '@Url.Action("SaveSuballotment_amount", "Sub_allotment")');
    },
        hiddenColumns: {
            columns: [2,3],
            indicators: true
        },
        licenseKey: 'non-commercial-and-evaluation', // for non-commercial use only
    });
    var tableData = JSON.stringify(hot.getSourceData());
    console.log(hot.getSourceData());

</script>