@model IEnumerable<fmis.Models.Utilization>
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

<style>
    .filterHeader {
        color: black;
    }
    input {
        width: 750px;
    }
    .wtHider {
        margin-bottom: 100px;
    }
</style>

<input type="hidden" class="utilization" value="@ViewBag.utilization_json">
<h3 class="grey lighter smaller">
   (BURS) Budget Utilization Request and Status
</h3>
<hr>
@*<input id="search_field2" style="float: left" type="search" placeholder="Search" />*@
<br />
<div id="example" class="hot"></div>
<br />
<div class="controls" hidden>
    <button id="export-file">Download CSV</button>
</div>

<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg" style="width:90%;">
        <div class="modal-content">
            <h3 style="margin-left:20px;" class="grey lighter smaller-150">
                UACS Amount Entry / Disbursement (Utilization)
            </h3>
            <div class="modal-body UtilizationContent">
            </div>
            <div class="modal-footer">
                <button type="button" data-dismiss="modal" class="btn btn-sm btn-default">
                    Close <i class="ace-icon fa fa-close"></i>
                </button>
            </div>
            <input type="hidden" class="fund_sub" value="@ViewBag.fundsource">
        </div>
    </div>
</div>

<script>
    let guid = () => {
        let s4 = () => {
            return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
        }
        return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
    }


    //SET AUTO DATE
    var today = new Date();
    var dd = String(today.getDate()).padStart(2, '0');
    var mm = String(today.getMonth() + 1).padStart(2, '0');
    var yyyy = today.getFullYear();
    today = mm + '/' + dd + '/' + yyyy;
    //SET AUTO ADDRESS
    var Address = "CEBU CITY"


    const debounceFn = Handsontable.helper.debounce((colIndex, event) => {
        const filtersPlugin = hot.getPlugin('filters');
        filtersPlugin.removeConditions(colIndex);
        filtersPlugin.addCondition(colIndex, 'contains', [event.target.value]);
        filtersPlugin.filter();
    }, 100);
    const addEventListeners = (input, colIndex) => {
        input.addEventListener('keydown', event => {
            debounceFn(colIndex, event);
        });
    };
    // Build elements which will be displayed in header.
    const getInitializedElements = colIndex => {
        const div = document.createElement('div');
        const input = document.createElement('input');
        div.className = 'filterHeader';
        addEventListeners(input, colIndex);
        div.appendChild(input);
        return div;
    };
    // Add elements to header on `afterGetColHeader` hook.
    const addInput = (col, TH) => {
        // Hooks can return a value other than number (for example `columnSorting` plugin uses this).
        if (typeof col !== 'number') {
            return col;
        }
        if (col >= 0 && TH.childElementCount < 2) {
            TH.appendChild(getInitializedElements(col));
        }
    };
    var SOURCE_TYPE = "";
    var CHECK_AFTER_ROW = false;
    var CHECK_FIRST_ROW = true;
    var CHECK_FIRST_ROW1 = false;
    var TRAP_LOAD = false;
    var TRAP_LOAD1 = false;

    function ajaxServer(ajax_data, url) {
        $.ajax({
            type: 'POST',
            url: url,
            headers: { "RequestVerificationToken": '@GetAntiXsrfRequestToken()' },
            data: { data: ajax_data },
            success: function (output) {
                $('#loading_modal').modal('hide');
                console.log(output);
            }
        });
    }
    var utilization = $.parseJSON($(".utilization").val());
    var fund_sub_data_dropdown = [];
    var fund_sub_data_array = [];
    var get_fund_sub = [];
    var get_utilized_amount = [];
    var fund_sub_counter = 0;
    $.each($.parseJSON($(".fund_sub").val()), function () {
        fund_sub_data_dropdown[fund_sub_counter] = this.source_title;
        var json_data = new Object();
        json_data.source_id = this.source_id;
        json_data.source_type = this.source_type;
        fund_sub_data_array[this.source_title] = json_data;
        get_fund_sub[this.source_id + this.source_type] = this.source_title;
        get_utilized_amount[this.source_id + this.source_type] = this.utilized_amount;
        fund_sub_counter++;
    });
    const data = [];
    var counter = 0;
    $.each(utilization, function () {
        data[counter] = [
            get_fund_sub[this.source_id + this.source_type], //1
   @*       get_utilized_amount[this.source_id + this.source_type], //2*@
			moment(this.Date, "YYYY/MM/DD").format('MM/DD/YYYY'), //3
            this.Dv, //4
            this.Pr_no, //5
            this.Po_no, //7
            this.Payee, //7
            this.Address, //8
            this.Particulars, //9
            this.Ors_no, //10
            this.Created_by, //11
            this.Gross, //10
            this.Id, //16
            this.utilization_token //17
        ]
        counter++;
    });
    const searchField = document.querySelector('#search_field2');
    const button = document.querySelector('#export-file');
    const container = document.getElementById('example');
    const hot = new Handsontable(container, {
        data: data,
        height: 'auto',
        className: 'as-you-type-demo',
        filters: true,
        afterGetColHeader: addInput,
        beforeOnCellMouseDown(event, coords) {
            // Deselect the column after clicking on input.
            if (coords.row === -1 && event.target.nodeName === 'INPUT') {
                event.stopImmediatePropagation();
                this.deselectCell();
            }
        },
        colWidths: [180, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 80],
        rowHeaders: true,
        fixedColumnsLeft: 7,
        colHeaders: ['FUND SOURCE & SUB ALLOTMENT', 'DATE', 'DV', 'PR #', 'PO #', 'PAYEE', 'ADDRESS', 'PARTICULARS', 'ORS #', 'CREATED BY', 'TOTAL AMOUNT',
            'EXP CODE 1', 'AMOUNT 1',
            'ID', 'TOKEN', 'UTILIZATION AMOUNT TOKEN'],
        columns: [
            {
                //FUNDSOURCE&SUBALLOTMENT
                type: 'dropdown',
                source: fund_sub_data_dropdown
            },
            {
                //DATE
                type: 'date',
                dateFormat: 'MM/DD/YYYY',
                defaultDate: Date.now(),
                correctFormat: true,
            },
            {
                //DV
                type: 'text'
            },
            {
                //PR#
                type: 'text'
            },
            {
                //PO#
                type: 'text'
            },
            {
                //PAYEE
                type: 'text'
            },
            {
                //ADDRESS
                type: 'text'
            },
            {
                //PARTICULARS
                type: 'text'
            },
            {
                //ORS NUMBER
                type: 'text',
                readOnly: true
            },
            {
                //CREATED BY
                type: 'text',
                readOnly: true,
            },
            {
                //GROSS TOTAL AMOUNT
                type: 'numeric',
                numericFormat: {
                    pattern: '0,0.00',
                },
                readOnly: true,
            },
            {
                type: 'dropdown',
                source: uacs_data_dropdown
            },
            {

            },
            {
                //HIDDEN ID
            },
            {
                //HIDDEN TOKEN
            },
            {

            },
        ],
        rowHeaders: true,
        undo: true,
        search: {
            searchResultClass: 'search-result-custom'
        },
        contextMenu: {
                items: {
				"make_bold": {
					name: 'Print BUR',
                    callback: function (key, options) {
                        var selected = hot.getSelected() || [];
		                var holder_data = hot.getData();

		                var first_column = selected[0][0];
		                var last_column = selected[0][2];
		                var many_token = [];

                        for (let j = first_column; j <= last_column; j++) {
                            console.log("utilization: " + holder_data[j]);
                            many_token.push(holder_data[j][14]);
		                }

		                var url = '@Url.Action("PrintBur", "Utilization")' + "?";
		                for (i = 0; i < many_token.length; i++) {
			                if ((i + 1) != many_token.length)
				                url = url + "id=" + many_token[i] + "&";
			                else
				                url = url + "id=" + many_token[i];
                        }

		                window.open(url);
                    }
				},
				"": {
					name: 'UACS Amount Entry / Disbmt.',
					callback: function (key, options) {
						var selection = this.getSelected();
						var holder_data = this.getData();
						try {
                            if (!holder_data[0]) {
                                Lobibox.alert("warning", {
                                    msg: "Please Select Fundsource/Sub-allotment First!",
                                    sound: false,
                                });
                                return;
                            }
                            if (!holder_data[0][0]) {
                                Lobibox.alert("warning", {
                                    msg: "Please Select Fundsource/Sub-allotment First!",
                                    sound: false,
                                });
                                return;
                            }
                            if (!holder_data[selection[0][0]][0] || holder_data[selection[0][0]][0] == 'undefined') {
                                Lobibox.alert("warning", {
                                    msg: "Please Select Fundsource/Sub-allotment First!",
                                    sound: false,
                                });
                                return;
                            }
						}
						catch {
                            Lobibox.alert("warning", {
                                msg: "Please Select Fundsource/Sub-allotment First!",
                                sound: false,
                            });
                            return;
						}
						var holder_id = holder_data[selection[0][0]][13];
						var utilization_token = holder_data[selection[0][0]][14];
						$("#exampleModal").modal('show');
						$(".UtilizationContent").html(loading);
						$.ajax({
							type: 'GET',
							headers: { "RequestVerificationToken": '@GetAntiXsrfRequestToken()' },
							url: '@Url.Action("openUtilizationAmount", "Utilization")',
							data: {
								id: holder_id,
                                utilization_token: utilization_token
							},
							success: function (output) {
								setTimeout(function () {
                                    $(".UtilizationContent").html(output);
								}, 500);
							}
						});
                        console.log('@Url.Action("openUtilizationAmount", "Utilization")' + "/" + holder_id + "?token=" + utilization_token);
					}
				}, "row_below": {}, "remove_row": {}, "row_above": {}, "copy": {},
			}
		},
        beforeRemoveRow: function (index, column) {
            var selection = this.getSelected();
            var holder_data = this.getData();
            var single_token = holder_data[selection[0][0]][14];
            var first_column = selection[0][0];
            var last_column = selection[0][2];
            var many_token = [];
            for (var j = first_column; j <= last_column; j++) {
                many_token.push({
                    many_token: holder_data[j][14]
                })
            }
            if (single_token) {
                var ajax_data = {
                    "single_token": single_token,
                    "many_token": many_token
                };
              @*  console.log(ajax_data);*@
                ajaxServer(ajax_data,'@Url.Action("DeleteUtilization", "Utilization")');
            }
        },
        afterUndo: function (index, column) {
        },
        afterCreateRow: function (row, column) {
            CHECK_AFTER_ROW = true;
            TRAP_LOAD = true;
            TRAP_LOAD1 = true;
            hot.setDataAtCell(row, 14, guid()); //SET TOKEN
            hot.setDataAtCell(row, 1, today); //SET DATE AND TODAY
            hot.setDataAtCell(row, 6, Address); //SET ADDRESS

            let above_ors = +hot.getDataAtCell(row - 1, 8) + 1;
            hot.setDataAtCell(row, 8, (above_ors).toString().padStart(4, '0'));
        },
        afterChange: function (changes, source) {
              if (!changes || source === 'loadData' || CHECK_AFTER_ROW)
			{
                CHECK_AFTER_ROW = false;
				console.log("haha");
				return;
			}
			changes.forEach(([row, col, oldValue, newValue]) => {
				if (col == 0) {
					CHECK_FIRST_ROW1 = true;
					console.log("if");
					var ajax_data = [];
					ajax_data.push(
						{
							source_id: fund_sub_data_array[hot.getDataAtCell(row, 0)].source_id,
							source_type: fund_sub_data_array[hot.getDataAtCell(row, 0)].source_type,
                            Date: hot.getDataAtCell(row, 1),
                            Dv: hot.getDataAtCell(row, 2),
                            Pr_no: hot.getDataAtCell(row, 3),
                            Po_no: hot.getDataAtCell(row, 4),
                            Payee: hot.getDataAtCell(row, 5),
                            Address: hot.getDataAtCell(row, 6),
                            Particulars: hot.getDataAtCell(row, 7),
                            Ors_no: hot.getDataAtCell(row, 8),
                            Created_by: hot.getDataAtCell(row, 9),
                            Gross: hot.getDataAtCell(row, 10),
                            utilization_token: hot.getDataAtCell(row, 14)
						}
					);
					ajaxServer(ajax_data, '@Url.Action("SaveUtilization", "Utilization")');
					console.log(ajax_data);
				}
				else {
                    CHECK_FIRST_ROW = true;
				}
			});
			if (CHECK_FIRST_ROW1) {
				CHECK_FIRST_ROW = false;
                CHECK_FIRST_ROW1 = false;
				console.log("wew");
			}
			else if (CHECK_FIRST_ROW) {
                console.log("else");
                var ajax_data = [];
                $.each(hot.getSourceData(), function () {
                    ajax_data.push(
                        {
                            source_id: this[0] ? fund_sub_data_array[this[0]].source_id : 0,
                            source_type: this[0] ? fund_sub_data_array[this[0]].source_type : 0,
                            Gross: this[1] ? this[1] : "",
                            Date: this[2] ? this[2] : "",
                            Dv: this[3] ? this[3] : "",
                            Pr_no: this[4] ? this[4] : "",
                            Po_no: this[5] ? this[5] : "",
                            Payee: this[6] ? this[6] : "",
                            Address: this[7] ? this[7] : "",
                            Particulars: this[8] ? this[8] : "",
                            Ors_no: this[9] ? this[9] : "",
                            Created_by: this[10] ? this[10] : "",
                            Gross : this[11] ? this[11] : "",
                            utilization_token: this[14]
                        }
                    );
				});
                ajaxServer(ajax_data, '@Url.Action("SaveUtilization", "Utilization")');
				console.log(ajax_data);
			}
		},
        hiddenColumns: {
            columns: [13,14,15],
            indicators: true
        },
        licenseKey: 'non-commercial-and-evaluation', // for non-commercial use onlWy
    });
    const exportPlugin = hot.getPlugin('exportFile');
    button.addEventListener('click', () => {
        exportPlugin.downloadFile('csv', {
            bom: false,
            columnDelimiter: ',',
            columnHeaders: true,
            exportHiddenColumns: true,
            exportHiddenRows: true,
            fileExtension: 'csv',
            filename: 'Utilization-[YYYY]-[MM]-[DD]',
            mimeType: 'text/csv',
            rowDelimiter: '\r\n',
            rowHeaders: true
        });
    });
    var tableData = JSON.stringify(hot.getSourceData());
    console.log(hot.getSourceData());
</script>