#pragma checksum "D:\fmis\fmis\Views\Budget\Notification\NotificationList.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8e9ade24f1fe93141a1c853387455344252e8aae"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Budget_Notification_NotificationList), @"mvc.1.0.view", @"/Views/Budget/Notification/NotificationList.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\fmis\fmis\Views\_ViewImports.cshtml"
using fmis;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\fmis\fmis\Views\_ViewImports.cshtml"
using fmis.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\fmis\fmis\Views\_ViewImports.cshtml"
using fmis.Models.UserModels;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\fmis\fmis\Views\_ViewImports.cshtml"
using System.Security.Claims;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\fmis\fmis\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\fmis\fmis\Views\Budget\Notification\NotificationList.cshtml"
using System.Globalization;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"8e9ade24f1fe93141a1c853387455344252e8aae", @"/Views/Budget/Notification/NotificationList.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c636cde0ce5b472ea04d81eadec7dcf23c48d750", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Budget_Notification_NotificationList : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<IEnumerable<Logs>>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/images/doh.png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("msg-photo"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("alt", new global::Microsoft.AspNetCore.Html.HtmlString("Alex\'s Avatar"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
            WriteLiteral("\r\n");
#nullable restore
#line 144 "D:\fmis\fmis\Views\Budget\Notification\NotificationList.cshtml"
 if (Model.Count() > 0)
{
    foreach (var item in Model)
    {

#line default
#line hidden
#nullable disable
            WriteLiteral("        <li style=\"background-color: lightcyan;\">\r\n            <a href=\"#\" onclick=\"openNotification($(this))\" class=\"clearfix\">\r\n                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("img", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "8e9ade24f1fe93141a1c853387455344252e8aae5266", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n                <span class=\"msg-body\">\r\n                    <span class=\"msg-title\">\r\n                        <span class=\"blue\">");
#nullable restore
#line 153 "D:\fmis\fmis\Views\Budget\Notification\NotificationList.cshtml"
                                      Write(item.created_name);

#line default
#line hidden
#nullable disable
            WriteLiteral(":</span>\r\n                        from <span class=\"green\">");
#nullable restore
#line 154 "D:\fmis\fmis\Views\Budget\Notification\NotificationList.cshtml"
                                            Write(item.created_section);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span> <span class=\"red\">");
#nullable restore
#line 154 "D:\fmis\fmis\Views\Budget\Notification\NotificationList.cshtml"
                                                                                           Write(item.logs_type);

#line default
#line hidden
#nullable disable
            WriteLiteral("</span> the amount of <b>");
#nullable restore
#line 154 "D:\fmis\fmis\Views\Budget\Notification\NotificationList.cshtml"
                                                                                                                                   Write(item.amount.ToString("C", new CultureInfo("en-PH")));

#line default
#line hidden
#nullable disable
            WriteLiteral("</b> from \r\n");
#nullable restore
#line 155 "D:\fmis\fmis\Views\Budget\Notification\NotificationList.cshtml"
                         if (item.source_type.Equals("fund_source"))
                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                            <span class=\"orange\">Fund Source</span>\r\n");
#nullable restore
#line 158 "D:\fmis\fmis\Views\Budget\Notification\NotificationList.cshtml"
                        }
                        else if (item.source_type.Equals("sub_allotment"))
                        {

#line default
#line hidden
#nullable disable
            WriteLiteral("                            <span class=\"orange\">Sub Allotment</span>\r\n");
#nullable restore
#line 162 "D:\fmis\fmis\Views\Budget\Notification\NotificationList.cshtml"
                        }

#line default
#line hidden
#nullable disable
            WriteLiteral("                    </span>\r\n                    <span class=\"msg-time\">\r\n                        <i class=\"ace-icon fa fa-clock-o\"></i>\r\n                        <span>");
#nullable restore
#line 166 "D:\fmis\fmis\Views\Budget\Notification\NotificationList.cshtml"
                         Write(calculateTwoDays(item.CreatedAt??DateTime.Now,"minutes"));

#line default
#line hidden
#nullable disable
            WriteLiteral("</span>\r\n                    </span>\r\n                </span>\r\n            </a>\r\n        </li>\r\n");
#nullable restore
#line 171 "D:\fmis\fmis\Views\Budget\Notification\NotificationList.cshtml"
    }   
}
else
{

#line default
#line hidden
#nullable disable
            WriteLiteral("    <center>\r\n        <strong class=\"red\">\r\n            No Logs\r\n        </strong>\r\n    </center>\r\n");
#nullable restore
#line 180 "D:\fmis\fmis\Views\Budget\Notification\NotificationList.cshtml"
}

#line default
#line hidden
#nullable disable
        }
        #pragma warning restore 1998
#nullable restore
#line 4 "D:\fmis\fmis\Views\Budget\Notification\NotificationList.cshtml"
           
    public struct DateTimeSpan
    {
        public int Years { get; }
        public int Months { get; }
        public int Days { get; }
        public int Hours { get; }
        public int Minutes { get; }
        public int Seconds { get; }
        public int Milliseconds { get; }

        public DateTimeSpan(int years, int months, int days, int hours, int minutes, int seconds, int milliseconds)
        {
            Years = years;
            Months = months;
            Days = days;
            Hours = hours;
            Minutes = minutes;
            Seconds = seconds;
            Milliseconds = milliseconds;
        }

        enum Phase { Years, Months, Days, Done }

        public static DateTimeSpan CompareDates(DateTime date1, DateTime date2)
        {
            if (date2 < date1)
            {
                var sub = date1;
                date1 = date2;
                date2 = sub;
            }

            DateTime current = date1;
            int years = 0;
            int months = 0;
            int days = 0;

            Phase phase = Phase.Years;
            DateTimeSpan span = new DateTimeSpan();
            int officialDay = current.Day;

            while (phase != Phase.Done)
            {
                switch (phase)
                {
                    case Phase.Years:
                        if (current.AddYears(years + 1) > date2)
                        {
                            phase = Phase.Months;
                            current = current.AddYears(years);
                        }
                        else
                        {
                            years++;
                        }
                        break;
                    case Phase.Months:
                        if (current.AddMonths(months + 1) > date2)
                        {
                            phase = Phase.Days;
                            current = current.AddMonths(months);
                            if (current.Day < officialDay && officialDay <= DateTime.DaysInMonth(current.Year, current.Month))
                                current = current.AddDays(officialDay - current.Day);
                        }
                        else
                        {
                            months++;
                        }
                        break;
                    case Phase.Days:
                        if (current.AddDays(days + 1) > date2)
                        {
                            current = current.AddDays(days);
                            var timespan = date2 - current;
                            span = new DateTimeSpan(years, months, days, timespan.Hours, timespan.Minutes, timespan.Seconds, timespan.Milliseconds);
                            phase = Phase.Done;
                        }
                        else
                        {
                            days++;
                        }
                        break;
                }
            }

            return span;
        }
    }

    public string calculateTwoDays(DateTime logs_date,string diff_type)
    {
        var today = DateTime.Now;
        var dateSpan = DateTimeSpan.CompareDates(logs_date, today);

        string test_date = " Years="+dateSpan.Years + 
                " Months=" +dateSpan.Months+ 
                " Days=" +dateSpan.Days+ 
                " Hours=" +dateSpan.Hours+ 
                " Minutes=" +dateSpan.Minutes+
                " Miliseconds=" +dateSpan.Milliseconds;

        string result = "";
        if (dateSpan.Years > 0)
        {
            if (dateSpan.Years == 1)
                result = dateSpan.Years + " year ago";
            else
                result = dateSpan.Years + " years ago";
        }
        else if (dateSpan.Months > 0)
        {
            if (dateSpan.Months == 1)
                result = dateSpan.Months + " month ago";
            else
                result = dateSpan.Months + " months ago";
        }
        else if (dateSpan.Days > 0)
        {
            if (dateSpan.Days == 1)
                result = dateSpan.Days + " day ago";
            else
                result = dateSpan.Days + " days ago";
        }
        else if (dateSpan.Hours > 0)
        {
            if (dateSpan.Hours == 1)
                result = dateSpan.Hours + " hour ago";
            else
                result = dateSpan.Hours + " hours ago";
        }
        else if (dateSpan.Minutes > 10)
            result = dateSpan.Minutes + " minutes ago";
        else
            result = "a moment ago";

        return result;
    }

#line default
#line hidden
#nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IEnumerable<Logs>> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
