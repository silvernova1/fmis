using ClosedXML.Excel;
using DocumentFormat.OpenXml.Spreadsheet;
using fmis.Data;
using fmis.DataHealpers;
using fmis.Filters;
using fmis.Models;
using fmis.Models.John;
using fmis.Models.silver;
using fmis.ViewModel;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Owin;
using OfficeOpenXml.FormulaParsing.Excel.Functions.Math;
using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.AspNetCore.Authorization;
using fmis.Models.Carlo;
using DocumentFormat.OpenXml.Presentation;
using System.Threading;
using OfficeOpenXml.Style;
using OfficeOpenXml;
using System.Drawing;
using fmis.Data.Accounting;
using MySqlX.XDevAPI.Common;
using OfficeOpenXml.Export.ToCollection.Exceptions;

namespace fmis.Controllers.Budget.John
{
    [Authorize(Policy = "BudgetAdmin")]
    public class ReportsController : Controller
    {
        private readonly MyDbContext _MyDbContext;

        public ReportsController(MyDbContext MyDbContext)
        {
            _MyDbContext = MyDbContext;
        }

        //public IActionResult Sample()
        //{
        //    var datas = _MyDbContext.FundSources.Include(x => x.AllotmentClass).Include(x => x.Uacs).Include(x => x.Prexc).ToList();
        //    return Json(datas);
        //}

        public async Task<IActionResult> Index()
        {
            ViewBag.filter = new FilterSidebar("budget_report", "saob", "");
            return View(await _MyDbContext.FundSources.ToListAsync());
        }

        #region COOKIES

        public int YearlyRefId => int.Parse(User.FindFirst("YearlyRefId").Value);

        #endregion


        public async Task<IActionResult> Export(string fn, string date_from, string date_to, int? post_yearly_reference)
        {

            var timer = new Stopwatch();
            timer.Start();

            int id = YearlyRefId;
            if (post_yearly_reference != null)
            {
                id = YearlyRefId;
            }
            else
            {
                id = YearlyRefId;
            }

            DateTime date1 = Convert.ToDateTime(date_from);
            DateTime date2 = Convert.ToDateTime(date_to);
            DateTime datefilter = Convert.ToDateTime(date_to);
            String date3 = datefilter.ToString("MMMM dd, yyyy", CultureInfo.InvariantCulture);

                date1.ToString("yyyy-MM-dd 00:00:00");
                date2.ToString("yyyy-MM-dd 23:59:59");
            DateTime dateTimeNow = date2;
            DateTime dateTomorrow = dateTimeNow.Date.AddDays(1);
            /*var lastDayOfMonth = DateTime.DaysInMonth(date1.Year, date1.Month);*/


            //LASTDAY OF THE MONTH
            var firstDayOfMonth = new DateTime(date2.Year, date2.Month, 1);
            var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
            DateTime lastday = Convert.ToDateTime(lastDayOfMonth);
            lastday.ToString("yyyy-MM-dd 23:59:59");

            var subs = (from sub in _MyDbContext.SubAllotment
                        join ba in _MyDbContext.Budget_allotments
                        on sub.BudgetAllotmentId equals ba.BudgetAllotmentId
                        join yr in _MyDbContext.Yearly_reference
                        on ba.YearlyReferenceId equals yr.YearlyReferenceId
                        where ba.BudgetAllotmentId == 2 && sub.AllotmentClassId == 2 && sub.AppropriationId == 2
                        select new
                        {
                            AllotmentTitle = sub.Suballotment_title
                        });


            var dateTime = _MyDbContext.FundSources.Where(x => x.CreatedAt >= date1 && x.CreatedAt <= dateTomorrow).Select(y => new { y.FundSourceTitle });


            var fortheMonthTotalinTotalPS = (from oa in _MyDbContext.ObligationAmount
                                             join o in _MyDbContext.Obligation  
                                             on oa.ObligationId equals o.Id
                                             join f in _MyDbContext.FundSources
                                             on o.FundSourceId equals f.FundSourceId
                                             where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                             select new
                                             {
                                                 amount = oa.Amount,
                                                 uacsId = oa.UacsId,
                                                 sourceId = o.FundSourceId,
                                                 sourceType = o.source_type,
                                                 date = o.Date,
                                                 status = o.status,
                                                 allotmentClassID = f.AllotmentClassId,
                                                 appropriationID = f.AppropriationId,
                                                 fundSourceTitle = f.FundSourceTitle,
                                                 oaStatus = oa.status
                                             });

            var asAtTotalinTotalPS = (from oa in _MyDbContext.ObligationAmount
                                      join o in _MyDbContext.Obligation
                                      on oa.ObligationId equals o.Id
                                      join f in _MyDbContext.FundSources
                                      on o.FundSourceId equals f.FundSourceId
                                      where o.Date >= date1 && o.Date <= date2
                                      select new
                                      {
                                          amount = oa.Amount,
                                          sourceId = o.FundSourceId,
                                          sourceType = o.source_type,
                                          uacsId = oa.UacsId,
                                          status = o.status,
                                          allotmentClassID = f.AllotmentClassId,
                                          appropriationID = f.AppropriationId,
                                          fundSourceTitle = f.FundSourceTitle,
                                          fundSourceBudgetAllotmentId = f.BudgetAllotmentId
                                      });
            var PsTotal = _MyDbContext.FundSources.Where(x => x.AllotmentClassId == 1 && x.AppropriationId == 1 && x.BudgetAllotmentId == id && !x.FundSourceTitle.Contains("RLIP")).Sum(x => x.Beginning_balance);
            var PsTotalRlip = _MyDbContext.FundSources.Where(x => x.AllotmentClassId == 1 && x.AppropriationId == 1 && x.BudgetAllotmentId == id && x.FundSourceTitle.Contains("RLIP")).Sum(x => x.Beginning_balance);




            var fortheMonthTotalinTotalPSConap = (from oa in _MyDbContext.ObligationAmount
                                                  join o in _MyDbContext.Obligation
                                                  on oa.ObligationId equals o.Id
                                                  join f in _MyDbContext.FundSources
                                                  on o.FundSourceId equals f.FundSourceId
                                                  where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                  select new
                                                  {
                                                      amount = oa.Amount,
                                                      uacsId = oa.UacsId,
                                                      sourceId = o.FundSourceId,
                                                      sourceType = o.source_type,
                                                      date = o.Date,
                                                      status = o.status,
                                                      allotmentClassID = f.AllotmentClassId,
                                                      appropriationID = f.AppropriationId
                                                  });

            var asAtTotalinTotalPSConap = (from oa in _MyDbContext.ObligationAmount
                                           join o in _MyDbContext.Obligation
                                           on oa.ObligationId equals o.Id
                                           join f in _MyDbContext.FundSources
                                           on o.FundSourceId equals f.FundSourceId
                                           where o.Date >= date1 && o.Date <= date2
                                           select new
                                           {
                                               amount = oa.Amount,
                                               sourceId = o.FundSourceId,
                                               sourceType = o.source_type,
                                               uacsId = oa.UacsId,
                                               status = o.status,
                                               allotmentClassID = f.AllotmentClassId,
                                               appropriationID = f.AppropriationId,
                                               IsAdded = f.IsAddToNextAllotment,
                                               Year = f.BudgetAllotment.Yearly_reference.YearlyReference
                                           });


            var PsConapTotal = _MyDbContext.FundSources.Where(x => x.AppropriationId == 2 && x.AllotmentClassId == 1).Sum(x => x.Beginning_balance);
            var unobligatedTotalinTotalPSConap = PsConapTotal - asAtTotalinTotalPSConap.Where(x => x.appropriationID == 2).Sum(x => x.amount);


            var fortheMonthTotalinTotalCoConap = (from oa in _MyDbContext.ObligationAmount
                                                  join o in _MyDbContext.Obligation
                                                  on oa.ObligationId equals o.Id
                                                  join f in _MyDbContext.FundSources
                                                  on o.FundSourceId equals f.FundSourceId
                                                  where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                  select new
                                                  {
                                                      amount = oa.Amount,
                                                      uacsId = oa.UacsId,
                                                      sourceId = o.FundSourceId,
                                                      sourceType = o.source_type,
                                                      date = o.Date,
                                                      status = o.status,
                                                      allotmentClassID = f.AllotmentClassId,
                                                      appropriationID = f.AppropriationId
                                                  });

            var asAtTotalinTotalCoConap = (from oa in _MyDbContext.ObligationAmount
                                           join o in _MyDbContext.Obligation
                                           on oa.ObligationId equals o.Id
                                           join f in _MyDbContext.FundSources
                                           on o.FundSourceId equals f.FundSourceId
                                           where o.Date >= date1 && o.Date <= date2
                                           select new
                                           {
                                               amount = oa.Amount,
                                               sourceId = o.FundSourceId,
                                               sourceType = o.source_type,
                                               uacsId = oa.UacsId,
                                               status = o.status,
                                               allotmentClassID = f.AllotmentClassId,
                                               appropriationID = f.AppropriationId
                                           });




            var CoConapTotal = _MyDbContext.FundSources.Where(x => x.AppropriationId == 2 && x.AllotmentClassId == 3).Sum(x => x.Beginning_balance);
            var unobligatedTotalinTotalCoConap = CoConapTotal - asAtTotalinTotalCoConap.Where(x => x.appropriationID == 2 && x.allotmentClassID == 3).Sum(x => x.amount);


            var fortheMonthTotalinTotalMOOE = (from oa in _MyDbContext.ObligationAmount
                                               join o in _MyDbContext.Obligation
                                               on oa.ObligationId equals o.Id
                                               join f in _MyDbContext.FundSources
                                               on o.FundSourceId equals f.FundSourceId
                                               where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                               select new
                                               {
                                                   amount = oa.Amount,
                                                   uacsId = oa.UacsId,
                                                   sourceId = o.FundSourceId,
                                                   date = o.Date,
                                                   status = o.status,
                                                   allotmentClassID = f.AllotmentClassId
                                               });

            var asAtTotalinTotalMOOE = (from oa in _MyDbContext.ObligationAmount
                                        join o in _MyDbContext.Obligation
                                        on oa.ObligationId equals o.Id
                                        join f in _MyDbContext.FundSources
                                        on o.FundSourceId equals f.FundSourceId
                                        where o.Date >= date1 && o.Date <= date2
                                        select new
                                        {
                                            amount = oa.Amount,
                                            sourceId = o.FundSourceId,
                                            uacsId = oa.UacsId,
                                            status = o.status,
                                            allotmentClassID = f.AllotmentClassId
                                        });

            var fortheMonthTotalinTotalCO = (from oa in _MyDbContext.ObligationAmount
                                             join o in _MyDbContext.Obligation
                                             on oa.ObligationId equals o.Id
                                             join f in _MyDbContext.FundSources
                                             on o.FundSourceId equals f.FundSourceId
                                             where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                             select new
                                             {
                                                 amount = oa.Amount,
                                                 uacsId = oa.UacsId,
                                                 sourceId = o.FundSourceId,
                                                 date = o.Date,
                                                 status = o.status,
                                                 allotmentClassID = f.AllotmentClassId
                                             });

            var asAtTotalinTotalCO = (from oa in _MyDbContext.ObligationAmount
                                      join o in _MyDbContext.Obligation
                                      on oa.ObligationId equals o.Id
                                      join f in _MyDbContext.FundSources
                                      on o.FundSourceId equals f.FundSourceId
                                      where o.Date >= date1 && o.Date <= date2
                                      select new
                                      {
                                          amount = oa.Amount,
                                          sourceId = o.FundSourceId,
                                          uacsId = oa.UacsId,
                                          status = o.status,
                                          allotmentClassID = f.AllotmentClassId
                                      });





            DataTable dt = new DataTable("Saob Report");

            var ballots = from ballot in _MyDbContext.Budget_allotments.ToList()
                          select ballot;



            using (XLWorkbook wb = new XLWorkbook())
            {
                var ws = wb.Worksheets.Add(dt);
                ws.Column(7).AdjustToContents();
                ws.Worksheet.SheetView.FreezeColumns(12);
                ws.Worksheet.SheetView.FreezeRows(19);

                //IXLRange range = ws.Range(ws.Cell(2, 1).Address, ws.Cell(13, 11).Address);

                //range.Style.Border.OutsideBorder = XLBorderStyleValues.Medium;
                var currentRow = 20;

                Double total = 0.00;
                Double allotment_total = 0;
                Double allotment_totalSaa = 0;


                //PS SAA
                var PsTotalSaa = _MyDbContext.SubAllotment.Where(x => x.AllotmentClassId == 1 && x.AppropriationId == 1 && x.BudgetAllotmentId == id).Sum(x => x.Beginning_balance);

                //PS Sub Negative Total
                var PsTotalSubNegative = (from sn in _MyDbContext.SubNegative
                                          join sa in _MyDbContext.Suballotment_amount
                                          on sn.SubAllotmentAmountId equals sa.SubAllotmentAmountId
                                          join s in _MyDbContext.SubAllotment
                                          on sn.SubAllotmentId equals s.SubAllotmentId
                                          select new
                                          {
                                              Amount = sn.Amount,
                                              AllotmentClassId = s.AllotmentClassId,
                                              AppropriationId = s.AppropriationId,
                                              BudgetAllotmentId = s.BudgetAllotmentId
                                          }).ToList();




                var unobligatedTotalinTotalPSSaa = PsTotalSaa - asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.sourceType == "sub_allotment" && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount);
                var totalPercentPSSaa = (double)asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount) / allotment_total;


                var wsFreeze = ws.Worksheet.Cell("Freeze View");

                ws.Worksheet.SheetView.FreezeColumns(12);
                ws.Worksheet.SheetView.FreezeRows(19);


                //range.Style.Border.OutsideBorder = XLBorderStyleValues.Medium;
                ws.Cell("A7").Style.Font.FontSize = 10;
                ws.Cell("A7").Style.Font.FontName = "Calibri Light";
                ws.Range("A7").Value = "Department:";
                ws.Range("A7").Style.Alignment.WrapText = false;

                ws.Cell("A8").Style.Font.FontSize = 10;
                ws.Cell("A8").Style.Font.FontName = "Calibri Light";
                ws.Range("A8").Value = "Agency /OU:";
                ws.Range("A8").Style.Alignment.WrapText = false;

                ws.Cell("A9").Style.Font.FontSize = 10;
                ws.Cell("A9").Style.Font.FontName = "Calibri Light";
                ws.Range("A9").Value = "Fund";
                ws.Range("A9").Style.Alignment.WrapText = false;

                ws.Cell("E7").Style.Font.SetBold();
                ws.Cell("E7").Style.Font.FontSize = 10;
                ws.Cell("E7").Style.Font.FontName = "Lucida Bright";
                ws.Range("E7").Value = "HEALTH";
                ws.Range("E7").Style.Alignment.WrapText = false;

                ws.Cell("E8").Style.Font.SetBold();
                ws.Cell("E8").Style.Font.FontSize = 10;
                ws.Cell("E8").Style.Font.FontName = "Lucida Bright";
                ws.Range("E8").Value = "CENTRAL VISAYAS CENTER FOR HEALTH DEVELOPMENT";
                ws.Range("E8").Style.Alignment.WrapText = false;

                ws.Cell("E9").Style.Font.SetBold();
                ws.Cell("E9").Style.Font.FontSize = 10;
                ws.Cell("E9").Style.Font.FontName = "Lucida Bright";
                ws.Range("E9").Value = "GAA";
                ws.Range("E9").Style.Alignment.WrapText = false;


                ws.Cell("A4").Style.Font.SetBold();
                ws.Cell("A4").Style.Font.FontSize = 10;
                ws.Cell("A4").Style.Font.FontName = "Lucida Bright";
                ws.Cell(11, 1).Style.Font.SetFontColor(XLColor.RichBlack);
                ws.Cell(11, 1).Style.Fill.BackgroundColor = XLColor.White;
                ws.Columns(11, 1).AdjustToContents();
                ws.Cell("A4").RichText.AddText("STATEMENT OF ALLOTMENTS, OBLIGATIONS, DISBURSEMENTS AND BALANCES");
                ws.Range("A4:W4").Merge();
                ws.Cell("A4").Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);

                ws.Cell("A5").Style.Font.FontSize = 10;
                ws.Cell("A5").Style.Font.FontName = "Lucida Bright";
                ws.Cell("A5").Value = "As at" + " " + date2.ToString("MMMM dd, yyyy");
                ws.Range("A5:W5").Merge();
                ws.Cell("A5").Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);

                ws.Cell("A6").Style.Font.FontSize = 10;
                ws.Cell("A6").Style.Font.FontName = "Lucida Bright";
                ws.Cell("A6").Value = "(In Pesos)";
                ws.Range("A6:W6").Merge();
                ws.Cell("A6").Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);

                //ws.Columns(11, 13).Hide();
                ws.Rows(11, 13).Hide();
                ws.Rows(1, 3).Hide();
                ws.Row(18).Hide();

                // Merge a range

                ws.Range("A14:AA14").Style.Border.TopBorder = XLBorderStyleValues.Thick;
                ws.Range("A19:AA19").Style.Border.TopBorder = XLBorderStyleValues.Thin;
                ws.Range("A20:AA20").Style.Border.TopBorder = XLBorderStyleValues.Thin;

                /*ws.Range("A14:AA14").Style.Border.TopBorder = XLBorderStyleValues.Thick;
                ws.Range("A14:AA14").Style.Border.RightBorder = XLBorderStyleValues.Thin;
                ws.Range("A14:AA15").Style.Border.RightBorder = XLBorderStyleValues.Thin;
                ws.Range("A14:AA16").Style.Border.RightBorder = XLBorderStyleValues.Thin;
                ws.Range("A14:AA17").Style.Border.RightBorder = XLBorderStyleValues.Thin;*/

                ws.Cell(14, 1).Style.Font.SetBold();
                ws.Cell(14, 1).Style.Font.FontSize = 10;
                ws.Cell(14, 1).Style.Font.FontName = "Lucida Bright";
                ws.Cell(14, 1).Value = "P/A/P/ ALLOTMENT CLASS/ \n OBJECT OF EXPENDITURE";
                ws.Cell(14, 1).Style.Alignment.WrapText = true;
                ws.Cell(14, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(14, 1).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
                ws.Range(ws.Cell(14, 1), ws.Cell(17, 11)).Merge();
                //ws.Cell(14, 1).Style.Border.TopBorder = XLBorderStyleValues.Thin;
                //ws.Cell(17, 11).Style.Border.TopBorder = XLBorderStyleValues.Thin;
                ws.Rows(14, 19).Height = 16;
                ws.Columns(1, 11).Width = 2.6;

                // Merge a range
                ws.Cell(14, 12).Style.Font.SetBold();
                ws.Cell(14, 12).Style.Font.FontSize = 10;
                ws.Cell(14, 12).Style.Font.FontName = "Lucida Bright";
                ws.Cell(14, 12).Value = "EXPENSES \n CODE";
                ws.Cell(14, 12).Style.Alignment.WrapText = true;
                ws.Cell(14, 12).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(14, 12).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
                ws.Range(ws.Cell(14, 12), ws.Cell(17, 12)).Merge();
                ws.Column(12).Width = 12;

                // Merge a range
                ws.Cell(14, 13).Style.Font.SetBold();
                ws.Cell(14, 13).Style.Font.FontSize = 10;
                ws.Cell(14, 13).Style.Font.FontName = "Lucida Bright";
                ws.Cell(14, 13).Value = "ALLOTMENT \n RECEIVED";
                ws.Cell(14, 13).Style.Alignment.WrapText = true;
                ws.Cell(14, 13).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(14, 13).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
                ws.Range(ws.Cell(14, 13), ws.Cell(17, 13)).Merge();
                ws.Column(13).Width = 20;

                // Merge a range
                ws.Cell(14, 14).Style.Font.SetBold();
                ws.Cell(14, 14).Style.Font.FontSize = 10;
                ws.Cell(14, 14).Style.Font.FontName = "Lucida Bright";
                ws.Cell(14, 14).Style.Fill.BackgroundColor = XLColor.LightGray;
                ws.Cell(14, 14).Value = "TRANSFER FROM \n CENTRAL OFFICE \n (2022)";
                ws.Cell(14, 14).Style.Alignment.WrapText = true;
                ws.Cell(14, 14).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(14, 14).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
                ws.Range(ws.Cell(14, 14), ws.Cell(17, 14)).Merge();
                ws.Column(14).Width = 18;

                // Merge a range
                ws.Cell(14, 15).Style.Font.SetBold();
                ws.Cell(14, 15).Style.Font.FontSize = 10;
                ws.Cell(14, 15).Style.Font.FontName = "Lucida Bright";
                ws.Cell(14, 15).Style.Fill.BackgroundColor = XLColor.LightGray;
                ws.Cell(14, 15).Value = "NEGATIVE SAA \n FROM CENTRAL \n OFFICE (2022)";
                ws.Cell(14, 15).Style.Alignment.WrapText = true;
                ws.Cell(14, 15).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(14, 15).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
                ws.Range(ws.Cell(14, 15), ws.Cell(17, 15)).Merge();
                ws.Column(15).Width = 18;

                // Merge a range
                ws.Cell(14, 16).Style.Font.SetBold();
                ws.Cell(14, 16).Style.Font.FontSize = 10;
                ws.Cell(14, 16).Style.Font.FontName = "Lucida Bright";
                ws.Cell(14, 16).Style.Fill.BackgroundColor = XLColor.Gray;
                ws.Cell(14, 16).Value = "TOTAL SAA";
                ws.Cell(14, 16).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(14, 16).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
                ws.Range(ws.Cell(14, 16), ws.Cell(17, 16)).Merge();
                ws.Column(16).Width = 18;

                // Merge a range
                ws.Cell(14, 17).Style.Font.SetBold();
                ws.Cell(14, 17).Style.Font.FontSize = 10;
                ws.Cell(14, 17).Style.Font.FontName = "Lucida Bright";
                ws.Cell(14, 17).Value = "REALIGNMENT";
                ws.Cell(14, 17).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(14, 17).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
                ws.Range(ws.Cell(14, 17), ws.Cell(17, 17)).Merge();
                ws.Column(17).Width = 18;

                // Merge a range
                ws.Cell(14, 18).Style.Font.SetBold();
                ws.Cell(14, 18).Style.Font.FontSize = 10;
                ws.Cell(14, 18).Style.Font.FontName = "Lucida Bright";
                ws.Cell(14, 18).Value = "TRANSFER \n TO \n RETAINED \n HOSPITAL";
                ws.Cell(14, 18).Style.Alignment.WrapText = true;
                ws.Cell(14, 18).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(14, 18).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
                ws.Range(ws.Cell(14, 18), ws.Cell(17, 18)).Merge();
                ws.Column(18).Width = 18;

                // Merge a range
                ws.Cell(14, 19).Style.Font.SetBold();
                ws.Cell(14, 19).Style.Font.FontSize = 10;
                ws.Cell(14, 19).Style.Font.FontName = "Lucida Bright";
                ws.Cell(14, 19).Value = "TOTAL ADJUSTED \n ALLOTMENT";
                ws.Cell(14, 19).Style.Alignment.WrapText = true;
                ws.Cell(14, 19).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(14, 19).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
                ws.Range(ws.Cell(14, 19), ws.Cell(17, 19)).Merge();
                ws.Column(19).Width = 20;

                // Merge a range
                ws.Cell(14, 20).Style.Font.SetBold();
                ws.Cell(14, 20).Style.Font.FontSize = 10;
                ws.Cell(14, 20).Style.Font.FontName = "Lucida Bright";
                ws.Cell(14, 20).Value = "OBLIGATIONS INCURRED";
                ws.Cell(14, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#F2DCDB");
                ws.Cell(14, 20).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(14, 20).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
                ws.Range(ws.Cell(14, 20), ws.Cell(14, 21)).Merge();
                ws.Column(20).Width = 18;

                // Merge a range
                ws.Cell(15, 20).Style.Font.SetBold();
                ws.Cell(15, 20).Style.Font.FontSize = 10;
                ws.Cell(15, 20).Style.Font.FontName = "Lucida Bright";
                ws.Cell(15, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#F2DCDB");
                ws.Cell(15, 20).Value = "FOR THE MONTH" + "\n" + date2.ToString("MMMM").ToUpper();
                ws.Cell(15, 20).Style.Alignment.WrapText = true;
                ws.Cell(15, 20).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(15, 20).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
                ws.Range(ws.Cell(15, 20), ws.Cell(17, 20)).Merge();
                ws.Column(20).Width = 18;

                // Merge a range
                ws.Cell(15, 21).Style.Font.SetBold();
                ws.Cell(15, 21).Style.Font.FontSize = 10;
                ws.Cell(15, 21).Style.Font.FontName = "Lucida Bright";
                ws.Cell(15, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#F2DCDB");
                ws.Cell(15, 21).Value = "AS AT" + " " + date2.ToString("MMMM").ToUpper();
                ws.Cell(15, 21).Style.Alignment.WrapText = true;
                ws.Cell(15, 21).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(15, 21).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
                ws.Range(ws.Cell(15, 21), ws.Cell(17, 21)).Merge();
                ws.Column(21).Width = 18;

                // Merge a range
                ws.Cell(14, 22).Style.Font.SetBold();
                ws.Cell(14, 22).Style.Font.FontSize = 10;
                ws.Cell(14, 22).Style.Font.FontName = "Lucida Bright";
                ws.Cell(14, 22).Value = "UNOBLIGATED \n BALANCE OF \n ALLOTMENT";
                ws.Cell(14, 22).Style.Alignment.WrapText = true;
                ws.Cell(14, 22).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(14, 22).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
                ws.Range(ws.Cell(14, 22), ws.Cell(17, 22)).Merge();
                ws.Column(22).Width = 18;


                // Merge a range
                ws.Cell(14, 23).Style.Border.RightBorder = XLBorderStyleValues.Thick;
                ws.Cell(15, 23).Style.Border.RightBorder = XLBorderStyleValues.Thick;
                ws.Cell(16, 23).Style.Border.RightBorder = XLBorderStyleValues.Thick;
                ws.Cell(17, 23).Style.Border.RightBorder = XLBorderStyleValues.Thick;
                ws.Cell(14, 23).Style.Font.SetBold();
                ws.Cell(14, 23).Style.Font.FontSize = 10;
                ws.Cell(14, 23).Style.Font.FontName = "Lucida Bright";
                ws.Cell(14, 23).Value = "% \n OBLIGATIONS / \n ALLOTMENT";
                ws.Cell(14, 23).Style.Alignment.WrapText = true;
                ws.Cell(14, 23).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(14, 23).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
                ws.Range(ws.Cell(14, 23), ws.Cell(17, 23)).Merge();
                ws.Column(23).Width = 18;

                //START ACCOUNTING
                //DISBURSEMENT
                ws.Cell(14, 24).Style.Font.SetBold();
                ws.Cell(14, 24).Style.Font.FontSize = 10;
                ws.Cell(14, 24).Style.Font.FontName = "Lucida Bright";
                ws.Cell(14, 24).Value = "DISBURSEMENT";
                ws.Cell(14, 24).Style.Fill.BackgroundColor = XLColor.FromHtml("#DCE6F1");
                ws.Cell(14, 24).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(14, 24).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
                ws.Range(ws.Cell(14, 24), ws.Cell(14, 25)).Merge();
                ws.Column(24).Width = 18;

                // Merge a range
                ws.Cell(15, 24).Style.Font.SetBold();
                ws.Cell(15, 24).Style.Font.FontSize = 10;
                ws.Cell(15, 24).Style.Font.FontName = "Lucida Bright";
                ws.Cell(15, 24).Style.Fill.BackgroundColor = XLColor.FromHtml("#DCE6F1");
                ws.Cell(15, 24).Value = "FOR THE MONTH" + "\n" + date2.ToString("MMMM").ToUpper();
                ws.Cell(15, 24).Style.Alignment.WrapText = true;
                ws.Cell(15, 24).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(15, 24).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
                ws.Range(ws.Cell(15, 24), ws.Cell(17, 24)).Merge();
                ws.Column(20).Width = 18;

                // Merge a range
                ws.Cell(15, 25).Style.Font.SetBold();
                ws.Cell(15, 25).Style.Font.FontSize = 10;
                ws.Cell(15, 25).Style.Font.FontName = "Lucida Bright";
                ws.Cell(15, 25).Style.Fill.BackgroundColor = XLColor.FromHtml("#DCE6F1");
                ws.Cell(15, 25).Value = "AS AT" + " " + date2.ToString("MMMM").ToUpper();
                ws.Cell(15, 25).Style.Alignment.WrapText = true;
                ws.Cell(15, 25).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(15, 25).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
                ws.Range(ws.Cell(15, 25), ws.Cell(17, 25)).Merge();
                ws.Column(25).Width = 18;


                // Merge a range
                ws.Cell(14, 26).Style.Font.SetBold();
                ws.Cell(14, 26).Style.Font.FontSize = 10;
                ws.Cell(14, 26).Style.Font.FontName = "Lucida Bright";
                ws.Cell(14, 26).Value = "UNPAID \n OBLIGATIONS";
                ws.Cell(14, 26).Style.Alignment.WrapText = true;
                ws.Cell(14, 26).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(14, 26).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
                ws.Range(ws.Cell(14, 26), ws.Cell(17, 26)).Merge();
                ws.Column(26).Width = 18;


                // Merge a range
                ws.Cell(14, 27).Style.Border.RightBorder = XLBorderStyleValues.Thick;
                ws.Cell(15, 27).Style.Border.RightBorder = XLBorderStyleValues.Thick;
                ws.Cell(16, 27).Style.Border.RightBorder = XLBorderStyleValues.Thick;
                ws.Cell(17, 27).Style.Border.RightBorder = XLBorderStyleValues.Thick;
                ws.Cell(14, 27).Style.Font.SetBold();
                ws.Cell(14, 27).Style.Font.FontSize = 10;
                ws.Cell(14, 27).Style.Font.FontName = "Lucida Bright";
                ws.Cell(14, 27).Value = "% \n DISBURSEMENT / \n OBLIGATIONS";
                ws.Cell(14, 27).Style.Alignment.WrapText = true;
                ws.Cell(14, 27).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(14, 27).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
                ws.Range(ws.Cell(14, 27), ws.Cell(17, 27)).Merge();
                ws.Column(27).Width = 18;

                //END ACCOUNTING

                // Merge a range
                ws.Cell(19, 1).Style.Font.SetBold();
                ws.Cell(19, 1).Style.Font.FontSize = 10;
                ws.Cell(19, 1).Style.Font.FontName = "Lucida Bright";
                ws.Cell(19, 1).Value = "(1)";
                ws.Cell(19, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(19, 1).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
                ws.Range(ws.Cell(19, 1), ws.Cell(19, 11)).Merge();

                // Merge a range
                ws.Cell(19, 12).Style.Font.SetBold();
                ws.Cell(19, 12).Style.Font.FontSize = 10;
                ws.Cell(19, 12).Style.Font.FontName = "Lucida Bright";
                ws.Cell(19, 12).Value = "(2)";
                ws.Cell(19, 12).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(19, 12).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

                // Merge a range
                ws.Cell(19, 13).Style.Font.SetBold();
                ws.Cell(19, 13).Style.Font.FontSize = 10;
                ws.Cell(19, 13).Style.Font.FontName = "Lucida Bright";
                ws.Cell(19, 13).Value = "(3)";
                ws.Cell(19, 13).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(19, 13).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

                // Merge a range
                ws.Cell(19, 14).Style.Font.SetBold();
                ws.Cell(19, 14).Style.Font.FontSize = 10;
                ws.Cell(19, 14).Style.Font.FontName = "Lucida Bright";
                ws.Cell(19, 14).Value = "(4)";
                ws.Cell(19, 14).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(19, 14).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

                // Merge a range
                ws.Cell(19, 15).Style.Font.SetBold();
                ws.Cell(19, 15).Style.Font.FontSize = 10;
                ws.Cell(19, 15).Style.Font.FontName = "Lucida Bright";
                ws.Cell(19, 15).Value = "(5)";
                ws.Cell(19, 15).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(19, 15).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

                // Merge a range
                ws.Cell(19, 16).Style.Font.SetBold();
                ws.Cell(19, 16).Style.Font.FontSize = 10;
                ws.Cell(19, 16).Style.Font.FontName = "Lucida Bright";
                ws.Cell(19, 16).Value = "(7) =  (5) + (6)";
                ws.Cell(19, 16).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(19, 16).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

                // Merge a range
                ws.Cell(19, 17).Style.Font.SetBold();
                ws.Cell(19, 17).Style.Font.FontSize = 10;
                ws.Cell(19, 17).Style.Font.FontName = "Lucida Bright";
                ws.Cell(19, 17).Value = "(8)";
                ws.Cell(19, 17).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(19, 17).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

                // Merge a range
                ws.Cell(19, 18).Style.Font.SetBold();
                ws.Cell(19, 18).Style.Font.FontSize = 10;
                ws.Cell(19, 18).Style.Font.FontName = "Lucida Bright";
                ws.Cell(19, 18).Value = "(9)";
                ws.Cell(19, 18).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(19, 18).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

                // Merge a range
                ws.Cell(19, 19).Style.Font.SetBold();
                ws.Cell(19, 19).Style.Font.FontSize = 10;
                ws.Cell(19, 19).Style.Font.FontName = "Lucida Bright";
                ws.Cell(19, 19).Value = "(10) = (3) + (7) + (8) + (9)";

                // Merge a range
                ws.Cell(19, 20).Style.Font.SetBold();
                ws.Cell(19, 20).Style.Font.FontSize = 10;
                ws.Cell(19, 20).Style.Font.FontName = "Lucida Bright";
                ws.Cell(19, 20).Value = "(11)";
                ws.Cell(19, 20).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(19, 20).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

                ws.Cell(19, 21).Style.Font.SetBold();
                ws.Cell(19, 21).Style.Font.FontSize = 10;
                ws.Cell(19, 21).Style.Font.FontName = "Lucida Bright";
                ws.Cell(19, 21).Value = "(12)";
                ws.Cell(19, 21).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(19, 21).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

                ws.Cell(19, 22).Style.Font.SetBold();
                ws.Cell(19, 22).Style.Font.FontSize = 10;
                ws.Cell(19, 22).Style.Font.FontName = "Lucida Bright";
                ws.Cell(19, 22).Value = "(13) = (10) - (12)";
                ws.Cell(19, 22).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(19, 22).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;

                ws.Cell(19, 23).Style.Font.SetBold();
                ws.Cell(19, 23).Style.Font.FontSize = 10;
                ws.Cell(19, 23).Style.Font.FontName = "Lucida Bright";
                ws.Cell(19, 23).Value = "(14) = (12) / (10)";
                ws.Cell(19, 23).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                ws.Cell(19, 23).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;


                string year = _MyDbContext.Yearly_reference.FirstOrDefault(x => x.YearlyReferenceId == id).YearlyReference;
                DateTime next_year = DateTime.ParseExact(year, "yyyy", null);
                var res = next_year.AddYears(-1);
                var result = res.Year.ToString();
                var lastYr = res.Year.ToString();


                var budget_allotments = await _MyDbContext.Budget_allotments
                    .Include(x => x.FundSources)
                        .ThenInclude(x => x.AllotmentClass)
                    .Include(x => x.FundSources)
                        .ThenInclude(x => x.Prexc)
                    .Include(x => x.FundSources)
                        .ThenInclude(x => x.Appropriation)
                    .Include(x => x.FundSources)
                        .ThenInclude(x => x.FundTransferedTo)
                    .Include(x => x.FundSources)
                        .ThenInclude(x => x.FundSourceAmounts)
                            .ThenInclude(x => x.Uacs)
                    .Include(x => x.SubAllotment)
                        .ThenInclude(x => x.SubTransferedTo)
                     .Include(x => x.SubAllotment)
                        .ThenInclude(x => x.SubAllotmentAmounts)
                     .Include(x => x.SubAllotment)
                        .ThenInclude(x => x.SubNegative)
                     .Include(x => x.SubAllotment)
                        .ThenInclude(x => x.prexc)
                    .Where(x => x.YearlyReferenceId == id)
                        .AsSplitQuery()
                        .ToListAsync();

                var allotmentClassId = (from f in _MyDbContext.FundSources
                                        join a in _MyDbContext.AllotmentClass
                                        on f.AllotmentClassId equals a.Id
                                        select new
                                        {
                                            AllotmentClassID = a.Id,
                                            AppropriationID = f.AppropriationId
                                        }).FirstOrDefault();

                foreach (BudgetAllotment budget_allotment in budget_allotments)
                {
                    //Border
                    for (int i = 1; i < 28; i++)
                    {
                        //Thick border
                        ws.Cell(currentRow, i).Style.Border.TopBorder = XLBorderStyleValues.Thin;
                        ws.Cell(currentRow, i).Style.Border.TopBorderColor = XLColor.Black;
                        ws.Cell(currentRow, i).Style.Border.BottomBorder = XLBorderStyleValues.Thin;
                        ws.Cell(currentRow, i).Style.Border.BottomBorderColor = XLColor.Black;
                    }
                    ws.Range("K20:AA20").Style.Border.RightBorder = XLBorderStyleValues.Thin;
                    ws.Range("K20:AA20").Style.Border.RightBorderColor = XLColor.Black;

                    ws.Cell(currentRow, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 2).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 3).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 4).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 5).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 6).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 7).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 8).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 9).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 10).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 11).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 12).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 13).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 14).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 15).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 16).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 17).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 18).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 19).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 22).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 23).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 24).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 25).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 26).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 27).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                    ws.Cell(currentRow, 1).Style.Font.SetBold();
                    ws.Cell(currentRow, 1).Style.Font.FontSize = 16;
                    ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                    ws.Cell(currentRow, 1).Value = "CURRENT APPROPRIATION";
                    currentRow++;


                    if (_MyDbContext.FundSources.Where(x => x.AllotmentClassId == 1 && x.AppropriationId == 1 && x.BudgetAllotmentId == id).Any())
                    {

                        ws.Cell(currentRow, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 2).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 3).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 4).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 5).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 6).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 7).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 8).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 9).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 10).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 11).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 12).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 13).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 14).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 15).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 16).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 17).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 18).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 19).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 22).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 23).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 24).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 25).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 26).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 27).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 1).Style.Font.SetBold();
                        ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 1).Value = "Personnel Services".ToUpper();
                        currentRow++;
                    }



                    //START PS LOOP

                    foreach (FundSource fundSource in budget_allotment.FundSources.Where(x => x.AppropriationId == 1 && x.AllotmentClassId == 1 && x.BudgetAllotmentId == id && !x.FundSourceTitle.Contains("RLIP")).OrderByDescending(x => x.FundSourceTitle).ToList())
                    {

                        ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 1).Value = fundSource.Prexc.pap_code1;
                        ws.Cell(currentRow, 1).Style.NumberFormat.Format = "00";
                        ws.Cell(currentRow, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                        ws.Range(ws.Cell(currentRow, 1), ws.Cell(currentRow, 11)).Merge();
                        currentRow++;

                        ws.Cell(currentRow, 1).Style.Font.SetBold();
                        ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 1).Value = fundSource.FundSourceTitle.ToUpper().ToString();
                        currentRow++;

                        foreach (FundSourceAmount fundsource_amount in fundSource.FundSourceAmounts.OrderBy(x => x.UacsId).Where(x => x.status == "activated").ToList())
                        {
                            var uacsID = from fa in _MyDbContext.FundSourceAmount
                                         join u in _MyDbContext.Uacs
                                         on fa.UacsId equals u.UacsId
                                         select fa.UacsId;


                            var fortheMonth = (from oa in _MyDbContext.ObligationAmount
                                               join o in _MyDbContext.Obligation
                                               on oa.ObligationId equals o.Id
                                               join f in _MyDbContext.FundSources
                                               on o.FundSourceId equals f.FundSourceId
                                               where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                               select new
                                               {
                                                   amount = oa.Amount,
                                                   uacsId = oa.UacsId,
                                                   date = o.Date,
                                                   sourceId = o.FundSourceId,
                                                   status = o.status,
                                                   fundsourceTitle = f.FundSourceTitle
                                               });

                            var fundsourceID = (from f in _MyDbContext.FundSources
                                                join fa in _MyDbContext.FundSourceAmount
                                                on f.FundSourceId equals fa.FundSourceId
                                                where f.FundSourceId == fa.FundSourceId
                                                select new
                                                {
                                                    faId = f.FundSourceId,
                                                    faBeginningBalance = fa.beginning_balance,
                                                    uacsID = fa.UacsId
                                                });

                            var fundsourceamountID = (from f in _MyDbContext.FundSources
                                                      join fa in _MyDbContext.FundSourceAmount
                                                      on f.FundSourceId equals fa.FundSourceId
                                                      where f.FundSourceId == fa.FundSourceId
                                                      select new
                                                      {
                                                          faAmountId = fa.FundSourceId
                                                      });




                            var asAt = (from oa in _MyDbContext.ObligationAmount
                                        join o in _MyDbContext.Obligation
                                        on oa.ObligationId equals o.Id
                                        where o.Date >= date1 && o.Date <= date2
                                        select new
                                        {
                                            amount = oa.Amount,
                                            uacsId = oa.UacsId,
                                            sourceId = o.FundSourceId,
                                            status = o.status
                                        });
                            var unobligated_amount = fundsource_amount.beginning_balance - asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);


                            total = 0;

                            ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 4).Value = fundsource_amount.Uacs.Account_title.ToUpper().ToString();

                            ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 12).Value = fundsource_amount.Uacs.Expense_code;
                            ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);

                            if (fundsource_amount.beginning_balance != 0)
                            {
                                ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 13).Value = fundsource_amount.beginning_balance;
                                ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }
                            else
                            {
                                ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 13).Value = "-";
                                ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }



                            if (_MyDbContext.FundsRealignment.Any(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId && x.status == "activated"))
                            {
                                //REALIGNMENT AMOUNT
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Value = "(" + _MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.status == "activated").FirstOrDefault()?.Realignment_amount + ")";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }
                            else if (_MyDbContext.FundsRealignment.Any(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId && x.status == "activated"))
                            {
                                //REALIGNMENT AMOUNT
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Value = _MyDbContext.FundsRealignment.Where(x => x.Realignment_to == fundsource_amount.UacsId && x.status == "activated").FirstOrDefault().Realignment_amount;
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }
                            else
                            {
                                //REALIGNMENT AMOUNT
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Value = "-";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = "-";
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            var afterrealignment_amount = fundsource_amount.beginning_balance - fundsource_amount.realignment_amount;
                            var afterrealignment_amountadd = fundsource_amount.beginning_balance + _MyDbContext.FundsRealignment.FirstOrDefault(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId)?.Realignment_amount;
                            if (_MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId).Any() || afterrealignment_amount != 0)
                            {
                                //TOTAL ADJUSTED ALLOTMENT
                                ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 19).Value = afterrealignment_amount;
                                ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }
                            if (_MyDbContext.FundsRealignment.Where(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId).Any())
                            {
                                //TOTAL ADJUSTED ALLOTMENT
                                ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 19).Value = afterrealignment_amountadd;
                                ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }
                            if (afterrealignment_amount == 0 || afterrealignment_amountadd == 0)
                            {
                                //TOTAL ADJUSTED ALLOTMENT
                                ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 19).Value = fundsource_amount.beginning_balance;
                                ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }
                            if (fundsource_amount.beginning_balance == 0)
                            {
                                //TOTAL ADJUSTED ALLOTMENT
                                ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 19).Value = "-";
                                ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }

                            if (fortheMonth.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated" && !x.fundsourceTitle.Contains("RLIP")).Sum(x => x.amount) != 0)
                            {
                                //OBLIGATED (FOR THE MONTH)
                                ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 20).Value = fortheMonth.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated" && !x.fundsourceTitle.Contains("RLIP")).Sum(x => x.amount);
                                ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }
                            else
                            {
                                //OBLIGATED (FOR THE MONTH)
                                ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 20).Value = "-";
                                ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }
                            if (asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount) != 0)
                            {
                                //OBLIGATED (AS AT)
                                ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 21).Value = asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);
                                ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#F2DCDB");
                                ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }
                            else
                            {
                                //OBLIGATED (AS AT)
                                ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 21).Value = "-";
                                ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#F2DCDB");
                                ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }


                            var addunobligated = afterrealignment_amount - asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);
                            var deductunobligated = afterrealignment_amountadd - asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);

                            if (_MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId).Any() || addunobligated != 0)
                            {
                                ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 22).Value = addunobligated;
                                ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }
                            if (_MyDbContext.FundsRealignment.Where(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId).Any())
                            {
                                ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 22).Value = deductunobligated;
                                ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }
                            if (addunobligated == 0 || deductunobligated == 0)
                            {
                                //UNOBLIGATED BALANCE OF ALLOTMENT
                                ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 22).Value = unobligated_amount;
                                ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }
                            if (unobligated_amount == 0)
                            {
                                //UNOBLIGATED BALANCE OF ALLOTMENT
                                ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 22).Value = "-";
                                ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }


                            //PERCENT OF UTILIZATION
                            if (/*asAt.Where(x => x.uacsId == fundsource_amount.UacsId).Sum(x => x.amount) == 0 || */afterrealignment_amount == 0)
                            {
                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 23).Value = "-";
                                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }
                            else
                            {

                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                var percentTotal = asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount) / afterrealignment_amount;
                                ws.Cell(currentRow, 23).Value = percentTotal;
                                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }

                            //TRANSFERED TO DATA FOR PS CURRENT
                            var transferTo = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundTransferedTo.Select(b => b.FundSourceAmountId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                            foreach (var transferedTo in _MyDbContext.FundTransferedTo.Where(x => x.FundSourceAmountId == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId/* && x.Id == transferTo*/).ToList())
                            {
                                currentRow++;
                                ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Account_title.ToUpper().ToString();

                                ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 13).Value = "-";

                                ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 19).Value = "(" + transferedTo.Amount.ToString("N", new CultureInfo("en-US")) + ")";

                                currentRow++;
                                ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                //ws.Cell(currentRow, 4).Style.Alignment.Indent = 3;
                                ws.Cell(currentRow, 4).Style.Font.SetItalic();
                                ws.Cell(currentRow, 4).Value = transferedTo.Particulars;

                                ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 13).Value = "-";

                                ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                ws.Cell(currentRow, 18).Value = "(" + transferedTo.Amount.ToString("N", new CultureInfo("en-US")) + ")";


                            }

                            //REALIGNMENT DATA FOR PS CURRENT
                            var data = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundSourceAmount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                            foreach (var realignment in _MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId && x.Realignment_to == data && x.status == "activated").ToList())
                            {
                                currentRow++;
                                Debug.WriteLine($"fsaid: {fundsource_amount.FundSourceAmountId}\nfundsrc_id {fundsource_amount}");
                                //ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundSourceAmount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().Account_title.ToUpper().ToString();
                                ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Account_title.ToUpper().ToString();
                                ws.Cell(currentRow, 1).Style.Alignment.Indent = 3;

                                ws.Cell(currentRow, 2).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Expense_code;
                                ws.Cell(currentRow, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                //ws.Cell(currentRow, 2).Style.Alignment.Indent = 3;

                                if (_MyDbContext.FundSourceAmount.Where(x => x.UacsId == realignment.Realignment_to).FirstOrDefault()?.beginning_balance == null)
                                {
                                    ws.Cell(currentRow, 3).Value = "-";
                                    ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                else
                                {
                                    ws.Cell(currentRow, 3).Value = _MyDbContext.FundSourceAmount.FirstOrDefault(x => x.UacsId == realignment.Realignment_to)?.beginning_balance;
                                    ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                //REALIGNMENT AMOUNT
                                ws.Cell(currentRow, 4).Value = realignment.Realignment_amount;
                                ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                //TRANSFER TO AMOUNT
                                ws.Cell(currentRow, 5).Value = "-";
                                ws.Cell(currentRow, 5).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                //ADJUSTED ALLOTMENT
                                if (_MyDbContext.FundSourceAmount.Where(x => x.UacsId == realignment.Realignment_to).FirstOrDefault()?.beginning_balance == null)
                                {
                                    ws.Cell(currentRow, 6).Value = "-";
                                    ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                else
                                {
                                    ws.Cell(currentRow, 6).Value = _MyDbContext.FundSourceAmount.FirstOrDefault(x => x.UacsId == realignment.Realignment_to)?.beginning_balance;
                                    ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                //REALIGNMENT - FOR THE MONTH
                                ws.Cell(currentRow, 7).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 7).Value = /*fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1 && x.fundSourceTitle != "AUTOMATIC APPROPRIATION").Sum(x => x.amount);*/"-";

                                //REALIGNMENT - AS AT
                                ws.Cell(currentRow, 8).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 8).Value = /*fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1 && x.fundSourceTitle != "AUTOMATIC APPROPRIATION").Sum(x => x.amount);*/"-";

                                ws.Cell(currentRow, 9).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 9).Value = /*fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1 && x.fundSourceTitle != "AUTOMATIC APPROPRIATION").Sum(x => x.amount);*/"-";

                                ws.Cell(currentRow, 10).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 10).Value = /*fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1 && x.fundSourceTitle != "AUTOMATIC APPROPRIATION").Sum(x => x.amount);*/"-";
                            }
                            currentRow++;
                            total = (double)fundsource_amount.beginning_balance;
                        }

                        var fortheMonthTotal = (from oa in _MyDbContext.ObligationAmount
                                                join o in _MyDbContext.Obligation
                                                on oa.ObligationId equals o.Id
                                                where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                select new
                                                {
                                                    amount = oa.Amount,
                                                    uacsId = oa.UacsId,
                                                    sourceId = o.FundSourceId,
                                                    date = o.Date,
                                                    status = o.status
                                                });

                        var subtotalTransferedTo = (from ft in _MyDbContext.FundTransferedTo
                                                    join fa in _MyDbContext.FundSourceAmount
                                                    on ft.FundSourceId equals fa.FundSourceId
                                                    where ft.FundSourceAmountId == fa.UacsId
                                                    select new
                                                    {
                                                        UacsId = fa.UacsId,
                                                        FundSourceId = fa.FundSourceId,
                                                    });

                        var asAtTotal = (from oa in _MyDbContext.ObligationAmount
                                         join o in _MyDbContext.Obligation
                                         on oa.ObligationId equals o.Id
                                         where o.Date >= date1 && o.Date <= date2
                                         select new
                                         {
                                             amount = oa.Amount,
                                             sourceId = o.FundSourceId,
                                             uacsId = oa.UacsId,
                                             status = o.status
                                         });

                        var asAtTotalSaro = (from oa in _MyDbContext.ObligationAmount
                                             join o in _MyDbContext.Obligation
                                             on oa.ObligationId equals o.Id
                                             join s in _MyDbContext.SubAllotment
                                             on o.SubAllotmentId equals s.SubAllotmentId
                                             where o.Date >= date1 && o.Date <= date2
                                             select new
                                             {
                                                 amount = oa.Amount,
                                                 sourceId = o.SubAllotmentId,
                                                 uacsId = oa.UacsId,
                                                 status = o.status,
                                                 appropriationId = s.AppropriationId,
                                                 suballotmentTitle = s.Suballotment_title
                                             });

                        var sub6 = fundSource.Beginning_balance - fundSource.FundsRealignment?.Sum(x => x.Realignment_amount) + fundSource.FundsRealignment?.Sum(x => x.Realignment_amount);
                        var sub9 = sub6 - asAtTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount);

                        ws.Cell(currentRow, 4).Style.Font.SetBold();
                        ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 4).Value = "SUBTOTAL " + fundSource.FundSourceTitle.ToUpper();

                        ws.Cell(currentRow, 13).Style.Font.SetBold();
                        ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(currentRow, 13).Value = fundSource.Beginning_balance;

                        //REALIGNMENT SUBTOTAL
                        var realignment_subtotal = budget_allotment.FundSources.FirstOrDefault().FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault().FundsRealignment?.Sum(x => x.Realignment_amount);
                        if (realignment_subtotal == null)
                        {
                            ws.Cell(currentRow, 17).Style.Font.SetBold();
                            ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 17).Value = "0.00";
                            ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        }
                        else
                        {
                            ws.Cell(currentRow, 17).Style.Font.SetBold();
                            ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 17).Value = realignment_subtotal;
                        }



                        ws.Cell(currentRow, 18).Style.Font.SetBold();
                        ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 18).Value = fundSource.FundTransferedTo.Sum(x => x.Amount);
                        ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        if (string.IsNullOrEmpty(fundSource.FundsRealignment?.Sum(x => x.Realignment_amount).ToString()))
                        {
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = fundSource.Beginning_balance - fundSource.FundTransferedTo.Sum(x => x.Amount);
                        }
                        else
                        {
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = sub6 - fundSource.FundTransferedTo.Sum(x => x.Amount);
                        }




                        ws.Cell(currentRow, 20).Style.Font.SetBold();
                        ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(currentRow, 20).Value = fortheMonthTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount);

                        //AS AT TOTAL
                        ws.Cell(currentRow, 21).Style.Font.SetBold();
                        ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(currentRow, 21).Value = asAtTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount);

                        if (string.IsNullOrEmpty(fundSource.FundsRealignment?.Sum(x => x.Realignment_amount).ToString()))
                        {
                            var unobligatedTotal = fundSource.Beginning_balance - asAtTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId).Sum(x => x.amount);
                            //SUBTOTAL UNOBLIGATED BALANCE OF ALLOTMENT
                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotal;
                        }
                        else
                        {
                            var unobligatedTotal = fundSource.Beginning_balance - asAtTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId).Sum(x => x.amount);
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = sub9;
                        }

                        if (string.IsNullOrEmpty(fundSource.FundsRealignment?.Sum(x => x.Realignment_amount).ToString()))
                        {
                            if (asAtTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount) == 0)
                            {
                                //PERCENT OF UTILIZATION
                                ws.Cell(currentRow, 23).Value = "-";
                                ws.Cell(currentRow, 23).Style.Font.SetBold();
                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }
                            else
                            {
                                //PERCENT OF UTILIZATION
                                ws.Cell(currentRow, 23).Value = asAtTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount) / fundSource.Beginning_balance;
                                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 23).Style.Font.SetBold();
                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }

                        }
                        else
                        {
                            //PERCENT OF UTILIZATION
                            ws.Cell(currentRow, 23).Value = asAtTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount) / sub9;
                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                            ws.Cell(currentRow, 23).Style.Font.SetBold();
                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        }


                        var subAllotmentTotal = _MyDbContext.SubAllotment.Where(x => x.AppropriationId == 1).Sum(x => x.Beginning_balance);

                        allotment_total += (double)fundSource.Beginning_balance + (double)subAllotmentTotal;
                        currentRow++;




                    }
                    if (_MyDbContext.FundSources.Where(x => x.AppropriationId == 1 && x.AllotmentClassId == 1 && x.BudgetAllotmentId == id).Any())
                    {
                        var transferto_filter = (from f in _MyDbContext.FundSources
                                                 join fa in _MyDbContext.FundSourceAmount
                                                 on f.FundSourceId equals fa.FundSourceId
                                                 join ft in _MyDbContext.FundTransferedTo
                                                 on fa.FundSourceId equals ft.FundSourceId
                                                 select new
                                                 {
                                                     FundSource_Id = f.FundSourceId,
                                                     Uacs_UacsId = fa.UacsId,
                                                     Uacs_FundSourceId = fa.FundSourceId,
                                                 }).FirstOrDefault();

                        ws.Cell(currentRow, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 2).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 3).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 4).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 5).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 6).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 7).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 8).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 9).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 10).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 11).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 12).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 13).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 14).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 15).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 16).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 17).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 18).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 19).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 22).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 23).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 11).Style.Font.SetBold();
                        ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(currentRow, 11).Value = "TOTAL PERSONNEL SERVICES";

                        var PTC = budget_allotment.FundSources.FirstOrDefault()?.Beginning_balance;
                        //var PsTotalCurrent = +(double)PTC;


                        ws.Cell(currentRow, 13).Style.Font.SetBold();
                        ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(currentRow, 13).Value = PsTotal;

                        //REALIGNMENT TOTAL
                        var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                        if (realignment_total == null)
                        {
                            ws.Cell(currentRow, 17).Style.Font.SetBold();
                            ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 17).Value = 0.00;
                        }
                        else
                        {
                            ws.Cell(currentRow, 17).Style.Font.SetBold();
                            ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 17).Value = realignment_total;
                        }


                        //PS CURRENT TOTAL TRANSFERED TO
                        ws.Cell(currentRow, 18).Style.Font.SetBold();
                        ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 18).Value = _MyDbContext.FundTransferedTo.Where(x => x.FundSource.AllotmentClassId == 1 && x.FundSource.AppropriationId == 1 && x.FundSource.BudgetAllotmentId == id).Sum(x => x.Amount);
                        ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        //TOTAL - TOTAL AFTER REALIGNMENT
                        ws.Cell(currentRow, 19).Style.Font.SetBold();
                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(currentRow, 19).Value = PsTotal - _MyDbContext.FundTransferedTo.Where(x => x.FundSource.AllotmentClassId == 1 && x.FundSource.AppropriationId == 1 && x.FundSource.BudgetAllotmentId == id).Sum(x => x.Amount);

                        //TOTAL - FOR THE MONTH
                        ws.Cell(currentRow, 20).Style.Font.SetBold();
                        ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1 && !x.fundSourceTitle.Contains("RLIP")).Sum(x => x.amount);

                        //TOTAL - AS AT
                        ws.Cell(currentRow, 21).Style.Font.SetBold();
                        ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(currentRow, 21).Value = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1 && !x.fundSourceTitle.Contains("RLIP")).Sum(x => x.amount);

                        //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT
                        var unobligatedTotalinTotalPS = PsTotal - asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1 && !x.fundSourceTitle.Contains("RLIP")).Sum(x => x.amount);
                        ws.Cell(currentRow, 22).Style.Font.SetBold();
                        ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalPS;
                        ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";

                        //PERCENT OF UTILIZATION
                        var totalPercentPS = (double)asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && !x.fundSourceTitle.Contains("RLIP")).Sum(x => x.amount) / allotment_total;
                        ws.Cell(currentRow, 23).Value = totalPercentPS;
                        ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                        ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(currentRow, 23).Style.Font.SetBold();
                        ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";

                        currentRow++;
                        //END PS LOOP
                    }

                    //SARO START
                    if (_MyDbContext.SubAllotment.Any(x => x.AppropriationId == 1 && x.BudgetAllotmentId == id && x.Suballotment_title.Contains("SARO")))
                    {
                        ws.Cell(currentRow, 1).Style.Font.SetBold();
                        ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 1).Value = "Special Allotment Release Order".ToUpper();
                        currentRow++;

                        foreach (SubAllotment subAllotment in budget_allotment.SubAllotment.Where(x => x.AllotmentClassId == 1 && x.AppropriationId == 1 && x.BudgetAllotmentId == id && x.Suballotment_title.Contains("SARO")).ToList())
                        {
                            ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 1).Value = _MyDbContext.Prexc.FirstOrDefault(x => x.Id == subAllotment.prexcId)?.pap_code1;
                            ws.Cell(currentRow, 1).Style.NumberFormat.Format = "00";
                            ws.Cell(currentRow, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                            ws.Range(ws.Cell(currentRow, 1), ws.Cell(currentRow, 11)).Merge();
                            currentRow++;

                            ws.Cell(currentRow, 1).Style.Font.SetBold();
                            ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 1).Value = subAllotment.Suballotment_title?.ToUpper().ToString();
                            currentRow++;


                            foreach (Suballotment_amount suballotment_amount in subAllotment.SubAllotmentAmounts.OrderBy(x => x.UacsId).Where(x => x.status == "activated"))
                            {
                                var uacsID = from Suballotment in _MyDbContext.Suballotment_amount
                                             join u in _MyDbContext.Uacs
                                             on Suballotment.UacsId equals u.UacsId
                                             select Suballotment.UacsId;


                                var fortheMonth = (from oa in _MyDbContext.ObligationAmount
                                                   join o in _MyDbContext.Obligation
                                                   on oa.ObligationId equals o.Id
                                                   join s in _MyDbContext.SubAllotment
                                                   on o.SubAllotmentId equals s.SubAllotmentId
                                                   where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                   select new
                                                   {
                                                       amount = oa.Amount,
                                                       uacsId = oa.UacsId,
                                                       date = o.Date,
                                                       sourceId = o.FundSourceId,
                                                       sourceType = o.source_type,
                                                       status = o.status,
                                                       allotmentClassID = s.AllotmentClassId,
                                                       suballotmentTitle = s.Suballotment_title

                                                   });

                                var fundsourceID = (from Suballotment in _MyDbContext.SubAllotment
                                                    join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                    on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                    where Suballotment.SubAllotmentId == Suballotment_amount.SubAllotmentId
                                                    select new
                                                    {
                                                        saId = Suballotment.SubAllotmentId
                                                    });

                                var fundsourceamountID = (from Suballotment in _MyDbContext.SubAllotment
                                                          join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                          on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                          where Suballotment.SubAllotmentId == Suballotment_amount.SubAllotmentId
                                                          select new
                                                          {
                                                              saAmountId = Suballotment_amount.SubAllotmentId
                                                          });

                                var asAt = (from oa in _MyDbContext.ObligationAmount
                                            join o in _MyDbContext.Obligation
                                            on oa.ObligationId equals o.Id
                                            join s in _MyDbContext.SubAllotment
                                            on o.SubAllotmentId equals s.SubAllotmentId
                                            where o.Date >= date1 && o.Date <= date2
                                            select new
                                            {
                                                amount = oa.Amount,
                                                uacsId = oa.UacsId,
                                                sourceId = o.SubAllotmentId,
                                                sourceType = o.source_type,
                                                status = o.status,
                                                suballotmentTitle = s.Suballotment_title
                                            });

                                var SAAunobligated_amount = suballotment_amount.beginning_balance - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);

                                total = 0;
                                var afterrealignment_amount = suballotment_amount.beginning_balance - suballotment_amount.realignment_amount;

                                ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == suballotment_amount.UacsId)?.Account_title.ToUpper().ToString();
                                ws.Cell(currentRow, 4).Style.Alignment.Indent = 3;

                                ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == suballotment_amount.UacsId)?.Expense_code;
                                ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                //ORIGINAL IS ws.Cell(currentRow, 13)
                                if (suballotment_amount.beginning_balance != 0)
                                {
                                    ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 13).Value = suballotment_amount.beginning_balance;
                                    ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                else
                                {
                                    ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 13).Value = "-";
                                    ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                //SUB NEGATIVE
                                if (suballotment_amount?.SubAllotment?.SubNegative?.FirstOrDefault()?.Amount == null)
                                {
                                    ws.Cell(currentRow, 15).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 15).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 15).Value = "";
                                    ws.Cell(currentRow, 15).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 15).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                else
                                {

                                    ws.Cell(currentRow, 15).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 15).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 15).Value = "(" + suballotment_amount?.SubAllotment?.SubNegative?.FirstOrDefault()?.Amount + ")";
                                    ws.Cell(currentRow, 15).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 15).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                }


                                //REALIGNMENT SAA
                                if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                {
                                    //REALIGNMENT SAA AMOUNT
                                    ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 17).Value = "(" + suballotment_amount.realignment_amount + ")";
                                    ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                else if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                {
                                    //REALIGNMENT AMOUNT
                                    ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 17).Value = _MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId).FirstOrDefault().Realignment_amount;
                                    ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                else
                                {
                                    //REALIGNMENT AMOUNT
                                    ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 17).Value = "-";
                                    ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }

                                //TRANSFERED TO DATA FOR PS CURRENT SAA
                                var transferTo = _MyDbContext.Uacs.Where(c => !_MyDbContext.SubTransferedTo.Select(b => b.SubAllotmentId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                foreach (var transferedToSaa in _MyDbContext.SubTransferedTo.Where(x => x.SubAllotmentAmountId == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId && x.status == "activated"/* && x.Id == transferTo*/).ToList())
                                {
                                    currentRow++;
                                    ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                    ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Account_title.ToUpper().ToString();

                                    ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                    ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                    ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 13).Value = "-";

                                    ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 19).Value = "(" + transferedToSaa.Amount.ToString("N", new CultureInfo("en-US")) + ")";

                                    currentRow++;
                                    ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    //ws.Cell(currentRow, 4).Style.Alignment.Indent = 3;
                                    ws.Cell(currentRow, 4).Style.Font.SetItalic();
                                    ws.Cell(currentRow, 4).Value = transferedToSaa.Particulars;

                                    ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                    ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                    ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 13).Value = "-";

                                    ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                    ws.Cell(currentRow, 18).Value = "(" + transferedToSaa.Amount.ToString("N", new CultureInfo("en-US")) + ")";
                                }

                                var SAAafterrealignment_amount = suballotment_amount.beginning_balance - suballotment_amount.realignment_amount;
                                var SaroPercentage = suballotment_amount.beginning_balance - suballotment_amount.realignment_amount;
                                var SAAafterrealignment_amountadd = suballotment_amount.beginning_balance + _MyDbContext.SubAllotment_Realignment.FirstOrDefault(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId)?.Realignment_amount;
                                if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any() || afterrealignment_amount != 0)
                                {
                                    //TOTAL ADJUSTED ALLOTMENT SAA
                                    ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 19).Value = SAAafterrealignment_amount;
                                    ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                {
                                    //TOTAL ADJUSTED ALLOTMENT SAA
                                    ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 19).Value = SAAafterrealignment_amountadd;
                                    ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                if (SAAafterrealignment_amount == 0 || SAAafterrealignment_amountadd == 0)
                                {
                                    //TOTAL ADJUSTED ALLOTMENT
                                    ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 19).Value = suballotment_amount.beginning_balance;
                                    ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                if (suballotment_amount.beginning_balance == 0)
                                {
                                    //TOTAL ADJUSTED ALLOTMENT
                                    ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 19).Value = "-";
                                    ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }

                                if (fortheMonth.Where(x => x.suballotmentTitle.Contains("SARO")).Sum(x => x.amount) != 0)
                                {
                                    //OBLIGATED (FOR THE MONTH)
                                    ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 20).Value = fortheMonth.Where(x => x.suballotmentTitle.Contains("SARO")).Sum(x => x.amount);
                                    ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                else
                                {
                                    //OBLIGATED (FOR THE MONTH)
                                    ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 20).Value = "-";
                                    ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }

                                if (asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount) != 0)
                                {
                                    //OBLIGATED (AS AT)
                                    ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#F2DCDB");
                                    ws.Cell(currentRow, 21).Value = asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                    ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                else
                                {
                                    //OBLIGATED (AS AT)
                                    ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#F2DCDB");
                                    ws.Cell(currentRow, 21).Value = "-";
                                    ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }

                                var SAAaddunobligated = SAAafterrealignment_amount - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                var SAAdeductunobligated = SAAafterrealignment_amountadd - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated").Sum(x => x.amount);

                                if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any() || SAAaddunobligated != 0)
                                {
                                    ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 22).Value = SAAaddunobligated;
                                    ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                {
                                    ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 22).Value = SAAdeductunobligated;
                                    ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                if (SAAaddunobligated == 0 || SAAdeductunobligated == 0)
                                {
                                    //UNOBLIGATED BALANCE OF ALLOTMENT
                                    ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 22).Value = SAAunobligated_amount;
                                    ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                if (SAAunobligated_amount == 0)
                                {
                                    //UNOBLIGATED BALANCE OF ALLOTMENT
                                    ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 22).Value = "-";
                                    ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }

                                //PERCENT OF UTILIZATION
                                if (SAAafterrealignment_amount == 0)
                                {
                                    ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 23).Value = "-";
                                    ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                    ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                else
                                {
                                    //PERCENT OF UTILIZATION
                                    ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 23).Value = asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount) / SAAafterrealignment_amount;
                                    ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                    ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }

                                //REALIGNMENT DATA SUB ALLOTMENT
                                var data = _MyDbContext.Uacs.Where(c => !_MyDbContext.Suballotment_amount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                foreach (var realignment in _MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId && x.Realignment_to == data))
                                {
                                    currentRow++;
                                    Debug.WriteLine($"fsaid: {suballotment_amount.SubAllotmentAmountId}\nfundsrc_id {suballotment_amount}");
                                    //ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundSourceAmount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().Account_title.ToUpper().ToString();
                                    ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Account_title.ToUpper().ToString();
                                    ws.Cell(currentRow, 1).Style.Alignment.Indent = 3;

                                    ws.Cell(currentRow, 2).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Expense_code;
                                    ws.Cell(currentRow, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                    //ws.Cell(currentRow, 2).Style.Alignment.Indent = 3;

                                    ws.Cell(currentRow, 3).Value = "#,##0.00";
                                    ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    //REALIGNMENT AMOUNT
                                    ws.Cell(currentRow, 4).Value = realignment.Realignment_amount;
                                    ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    //REALIGNMENT AMOUNT
                                    ws.Cell(currentRow, 6).Value = "";
                                    ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                currentRow++;
                                total = (double)suballotment_amount.beginning_balance;
                            }


                            var fortheMonthTotal = (from oa in _MyDbContext.ObligationAmount
                                                    join o in _MyDbContext.Obligation
                                                    on oa.ObligationId equals o.Id
                                                    join s in _MyDbContext.SubAllotment
                                                    on o.SubAllotmentId equals s.SubAllotmentId
                                                    where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday && s.Suballotment_title.Contains("SARO")
                                                    select new
                                                    {
                                                        amount = oa.Amount,
                                                        uacsId = oa.UacsId,
                                                        sourceId = o.SubAllotmentId,
                                                        sourceType = o.source_type,
                                                        date = o.Date,
                                                        status = o.status,
                                                        suballotmentTitle = s.Suballotment_title
                                                    });

                            var funds_filterTotal = (from Suballotment in _MyDbContext.SubAllotment
                                                     join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                     on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                     select new
                                                     {
                                                         Id = Suballotment.SubAllotmentId
                                                     });

                            var asAtTotal = (from oa in _MyDbContext.ObligationAmount
                                             join o in _MyDbContext.Obligation
                                             on oa.ObligationId equals o.Id
                                             join s in _MyDbContext.SubAllotment
                                             on o.SubAllotmentId equals s.SubAllotmentId
                                             where o.Date >= date1 && o.Date <= date2 && s.Suballotment_title.Contains("SARO")
                                             select new
                                             {
                                                 amount = oa.Amount,
                                                 sourceId = o.SubAllotmentId,
                                                 uacsId = oa.UacsId,
                                                 sourceType = o.source_type,
                                                 status = o.status,
                                                 suballotmentTitle = s.Suballotment_title
                                             });

                            var asAtTotalSaro = (from oa in _MyDbContext.ObligationAmount
                                                 join o in _MyDbContext.Obligation
                                                 on oa.ObligationId equals o.Id
                                                 join s in _MyDbContext.SubAllotment
                                                 on o.SubAllotmentId equals s.SubAllotmentId
                                                 where o.Date >= date1 && o.Date <= date2
                                                 select new
                                                 {
                                                     amount = oa.Amount,
                                                     sourceId = o.SubAllotmentId,
                                                     sourceType = o.source_type,
                                                     uacsId = oa.UacsId,
                                                     status = o.status,
                                                     appropriationID = s.AppropriationId,
                                                     fundSourceBudgetAllotmentId = s.BudgetAllotmentId,
                                                     suballotmentTitle = s.Suballotment_title
                                                 });


                            ws.Cell(currentRow, 4).Style.Font.SetBold();
                            ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 4).Value = "SUBTOTAL " + subAllotment.Suballotment_title?.ToUpper();

                            ws.Cell(currentRow, 13).Style.Font.SetBold();
                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 13).Value = subAllotment.Beginning_balance;

                            //REALIGNMENT SUBTOTAL
                            var SAArealignment_subtotal = budget_allotment.SubAllotment.FirstOrDefault().SubAllotmentRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.SubAllotment.FirstOrDefault().SubAllotmentRealignment?.Sum(x => x.Realignment_amount);
                            var SAAsub6 = subAllotment.Beginning_balance - subAllotment.SubAllotmentRealignment?.Sum(x => x.Realignment_amount) + subAllotment.SubAllotmentRealignment?.Sum(x => x.Realignment_amount);
                            if (SAArealignment_subtotal == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Value = "0.00";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = SAArealignment_subtotal;
                            }
                            //SUBTOTAL PS SAA CURRENT
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = subAllotment.SubTransferedTo.Sum(x => x.Amount);
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            if (string.IsNullOrEmpty(subAllotment.SubAllotmentRealignment?.Sum(x => x.Realignment_amount).ToString()))
                            {
                                ws.Cell(currentRow, 19).Style.Font.SetBold();
                                ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 19).Value = subAllotment.Beginning_balance - subAllotment.SubTransferedTo.Sum(x => x.Amount);
                            }
                            else
                            {
                                ws.Cell(currentRow, 19).Style.Font.SetBold();
                                ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 19).Value = SAAsub6 - subAllotment.SubTransferedTo.Sum(x => x.Amount);
                            }

                            if (fortheMonthTotal.Where(x => x.sourceId == subAllotment.SubAllotmentAmounts.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment") == null)
                            {
                                ws.Cell(currentRow, 20).Style.Font.SetBold();
                                ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 20).Value = "-";
                            }
                            else
                            {
                                ws.Cell(currentRow, 20).Style.Font.SetBold();
                                ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                //ws.Cell(currentRow, 20).Value = fortheMonthTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                ws.Cell(currentRow, 20).Value = fortheMonthTotal.Sum(x => x.amount);
                            }


                            //AS AT TOTAL
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            //ws.Cell(currentRow, 21).Value = asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                            ws.Cell(currentRow, 21).Value = asAtTotal.Sum(x => x.amount);

                            var unobligatedTotal = subAllotment.Beginning_balance - asAtTotal/*.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment")*/.Sum(x => x.amount);
                            //SUBTOTAL UNOBLIGATED BALANCE OF ALLOTMENT
                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotal;

                            //PERCENT OF UTILIZATION
                            ws.Cell(currentRow, 23).Style.Font.SetBold();
                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 23).Value = asAtTotalSaro.Where(x => x.sourceId == budget_allotment.SubAllotment.FirstOrDefault().SubAllotmentAmounts.FirstOrDefault().SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            allotment_totalSaa += (double)subAllotment.Beginning_balance;

                            currentRow++;

                        }

                    }
                    //TOTAL SARO START
                    if (_MyDbContext.SubAllotment.Where(x => x.AppropriationId == 1 && x.BudgetAllotmentId == id && x.Suballotment_title.Contains("SARO")).Any())
                    {

                        var fortheMonthTotalSaro = (from oa in _MyDbContext.ObligationAmount
                                                    join o in _MyDbContext.Obligation
                                                    on oa.ObligationId equals o.Id
                                                    join s in _MyDbContext.SubAllotment
                                                    on o.SubAllotmentId equals s.SubAllotmentId
                                                    where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                    select new
                                                    {
                                                        amount = oa.Amount,
                                                        uacsId = oa.UacsId,
                                                        sourceId = o.FundSourceId,
                                                        sourceType = o.source_type,
                                                        date = o.Date,
                                                        status = o.status,
                                                        allotmentClassID = s.AllotmentClassId,
                                                        appropriationID = s.AppropriationId,
                                                        suballotmentTitle = s.Suballotment_title
                                                    });

                        var asAtTotalSaro = (from oa in _MyDbContext.ObligationAmount
                                             join o in _MyDbContext.Obligation
                                             on oa.ObligationId equals o.Id
                                             join s in _MyDbContext.SubAllotment
                                             on o.SubAllotmentId equals s.SubAllotmentId
                                             where o.Date >= date1 && o.Date <= date2
                                             select new
                                             {
                                                 amount = oa.Amount,
                                                 sourceId = o.SubAllotmentId,
                                                 sourceType = o.source_type,
                                                 uacsId = oa.UacsId,
                                                 status = o.status,
                                                 appropriationID = s.AppropriationId,
                                                 fundSourceBudgetAllotmentId = s.BudgetAllotmentId,
                                                 suballotmentTitle = s.Suballotment_title
                                             });

                        var SaroTotal = _MyDbContext.SubAllotment.Where(x => x.AppropriationId == 1 && x.BudgetAllotmentId == id && x.Suballotment_title.Contains("SARO")).Sum(x => x.Beginning_balance);

                        ws.Cell(currentRow, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 2).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 3).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 4).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 5).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 6).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 7).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 8).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 9).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 10).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 11).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 12).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 13).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 14).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 15).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 16).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 17).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 18).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 19).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 22).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 23).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                        ws.Cell(currentRow, 11).Style.Font.SetBold();
                        ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(currentRow, 11).Value = "TOTAL SPECIAL ALLOTMENT RELEASE ORDER";

                        var PTC = budget_allotment.FundSources.FirstOrDefault()?.Beginning_balance;
                        //var PsTotalCurrent = +(double)PTC;


                        ws.Cell(currentRow, 13).Style.Font.SetBold();
                        ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(currentRow, 13).Value = SaroTotal;

                        //REALIGNMENT TOTAL
                        var realignment_total = budget_allotment.SubAllotment.FirstOrDefault()?.SubAllotmentRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.SubAllotment.FirstOrDefault()?.SubAllotmentRealignment?.Sum(x => x.Realignment_amount);
                        if (realignment_total == null)
                        {
                            ws.Cell(currentRow, 17).Style.Font.SetBold();
                            ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 17).Value = 0.00;
                        }
                        else
                        {
                            ws.Cell(currentRow, 17).Style.Font.SetBold();
                            ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 17).Value = realignment_total;
                        }


                        //PS CURRENT TOTAL TRANSFERED TO
                        ws.Cell(currentRow, 18).Style.Font.SetBold();
                        ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 18).Value = _MyDbContext.SubTransferedTo.Where(x => x.SubAllotment.AllotmentClassId == 1 && x.SubAllotment.AppropriationId == 1 && x.SubAllotment.BudgetAllotmentId == id).Sum(x => x.Amount);
                        ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        //TOTAL - TOTAL AFTER REALIGNMENT
                        ws.Cell(currentRow, 19).Style.Font.SetBold();
                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(currentRow, 19).Value = SaroTotal - _MyDbContext.SubTransferedTo.Where(x => x.SubAllotment.AllotmentClassId == 1 && x.SubAllotment.AppropriationId == 1 && x.SubAllotment.BudgetAllotmentId == id).Sum(x => x.Amount);

                        //TOTAL - FOR THE MONTH
                        ws.Cell(currentRow, 20).Style.Font.SetBold();
                        ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(currentRow, 20).Value = fortheMonthTotalSaro.Where(x => x.appropriationID == 1 && x.suballotmentTitle.Contains("SARO")).Sum(x => x.amount);

                        //TOTAL - AS AT
                        ws.Cell(currentRow, 21).Style.Font.SetBold();
                        ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(currentRow, 21).Value = asAtTotalSaro.Where(x => x.appropriationID == 1 && x.suballotmentTitle.Contains("SARO")).Sum(x => x.amount);

                        //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT
                        var unobligatedTotalSaro = SaroTotal - asAtTotalSaro.Where(x => x.appropriationID == 1 && x.suballotmentTitle.Contains("SARO")).Sum(x => x.amount);
                        ws.Cell(currentRow, 22).Style.Font.SetBold();
                        ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(currentRow, 22).Value = unobligatedTotalSaro;
                        ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";

                        //PERCENT OF UTILIZATION
                        var totalPercentSaro = (double)asAtTotalSaro.Where(x => x.appropriationID == 1 && x.suballotmentTitle.Contains("SARO")).Sum(x => x.amount) / (double)_MyDbContext.SubAllotment.Where(x => x.AppropriationId == 1 && x.Suballotment_title.Contains("SARO")).Sum(x => x.Beginning_balance);
                        ws.Cell(currentRow, 23).Value = totalPercentSaro;
                        ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                        ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(currentRow, 23).Style.Font.SetBold();
                        ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";

                        currentRow++;
                        //END PS LOOP
                    }
                    //TOTAL SARO END
                    //SARO ENDS


                    //START AUTOMATIC APPROPRIATION
                    if (_MyDbContext.FundSources.Where(x => x.AppropriationId == 1 && x.AllotmentClassId == 1 && x.BudgetAllotmentId == id && x.FundSourceTitle.Contains("RLIP")).Any())
                    {
                        ws.Cell(currentRow, 1).Style.Font.SetBold();
                        ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 1).Value = "AUTOMATIC APPROPRIATION";
                        currentRow++;

                        foreach (FundSource fundSource in budget_allotment.FundSources.Where(x => x.AppropriationId == 1 && x.AllotmentClassId == 1 && x.BudgetAllotmentId == id && x.FundSourceTitle.Contains("RLIP")).OrderByDescending(x => x.FundSourceTitle).ToList())
                        {
                            ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 4).Value = fundSource.FundSourceTitle.ToUpper().ToString();

                            foreach (FundSourceAmount fundsource_amount in fundSource.FundSourceAmounts.OrderBy(x => x.UacsId).Where(x => x.status == "activated").ToList())
                            {
                                var uacsID = from fa in _MyDbContext.FundSourceAmount
                                             join u in _MyDbContext.Uacs
                                             on fa.UacsId equals u.UacsId
                                             select fa.UacsId;


                                var fortheMonth = (from oa in _MyDbContext.ObligationAmount
                                                   join o in _MyDbContext.Obligation
                                                   on oa.ObligationId equals o.Id
                                                   join f in _MyDbContext.FundSources
                                                   on o.FundSourceId equals f.FundSourceId
                                                   where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                   select new
                                                   {
                                                       amount = oa.Amount,
                                                       uacsId = oa.UacsId,
                                                       date = o.Date,
                                                       sourceId = o.FundSourceId,
                                                       status = o.status,
                                                       fundsourceTitle = f.FundSourceTitle
                                                   });

                                var fundsourceID = (from f in _MyDbContext.FundSources
                                                    join fa in _MyDbContext.FundSourceAmount
                                                    on f.FundSourceId equals fa.FundSourceId
                                                    where f.FundSourceId == fa.FundSourceId
                                                    select new
                                                    {
                                                        faId = f.FundSourceId,
                                                        faBeginningBalance = fa.beginning_balance,
                                                        uacsID = fa.UacsId
                                                    });

                                var fundsourceamountID = (from f in _MyDbContext.FundSources
                                                          join fa in _MyDbContext.FundSourceAmount
                                                          on f.FundSourceId equals fa.FundSourceId
                                                          where f.FundSourceId == fa.FundSourceId
                                                          select new
                                                          {
                                                              faAmountId = fa.FundSourceId
                                                          });




                                var asAt = (from oa in _MyDbContext.ObligationAmount
                                            join o in _MyDbContext.Obligation
                                            on oa.ObligationId equals o.Id
                                            where o.Date >= date1 && o.Date <= date2
                                            select new
                                            {
                                                amount = oa.Amount,
                                                uacsId = oa.UacsId,
                                                sourceId = o.FundSourceId,
                                                status = o.status
                                            });
                                var unobligated_amount = fundsource_amount.beginning_balance - asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);


                                total = 0;

                                /*ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 4).Value = fundsource_amount.Uacs.Account_title.ToUpper().ToString();*/

                                ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 12).Value = fundsource_amount.Uacs.Expense_code;
                                ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);

                                if (fundsource_amount.beginning_balance != 0)
                                {
                                    ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 13).Value = fundsource_amount.beginning_balance;
                                    ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                else
                                {
                                    ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 13).Value = "-";
                                    ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }



                                if (_MyDbContext.FundsRealignment.Any(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId && x.status == "activated"))
                                {
                                    //REALIGNMENT AMOUNT
                                    ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 17).Value = "(" + _MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.status == "activated").FirstOrDefault()?.Realignment_amount + ")";
                                    ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                else if (_MyDbContext.FundsRealignment.Any(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId && x.status == "activated"))
                                {
                                    //REALIGNMENT AMOUNT
                                    ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 17).Value = _MyDbContext.FundsRealignment.Where(x => x.Realignment_to == fundsource_amount.UacsId && x.status == "activated").FirstOrDefault().Realignment_amount;
                                    ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                else
                                {
                                    //REALIGNMENT AMOUNT
                                    ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 17).Value = "-";
                                    ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 18).Value = "-";
                                ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                var afterrealignment_amount = fundsource_amount.beginning_balance - fundsource_amount.realignment_amount;
                                var afterrealignment_amountadd = fundsource_amount.beginning_balance + _MyDbContext.FundsRealignment.FirstOrDefault(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId)?.Realignment_amount;
                                if (_MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId).Any() || afterrealignment_amount != 0)
                                {
                                    //TOTAL ADJUSTED ALLOTMENT
                                    ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 19).Value = afterrealignment_amount;
                                    ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                if (_MyDbContext.FundsRealignment.Where(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId).Any())
                                {
                                    //TOTAL ADJUSTED ALLOTMENT
                                    ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 19).Value = afterrealignment_amountadd;
                                    ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                if (afterrealignment_amount == 0 || afterrealignment_amountadd == 0)
                                {
                                    //TOTAL ADJUSTED ALLOTMENT
                                    ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 19).Value = fundsource_amount.beginning_balance;
                                    ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                if (fundsource_amount.beginning_balance == 0)
                                {
                                    //TOTAL ADJUSTED ALLOTMENT
                                    ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 19).Value = "-";
                                    ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }

                                if (fortheMonth.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated" && x.fundsourceTitle.Contains("RLIP")).Sum(x => x.amount) != 0)
                                {
                                    //OBLIGATED (FOR THE MONTH)
                                    ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 20).Value = fortheMonth.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated" && x.fundsourceTitle.Contains("RLIP")).Sum(x => x.amount);
                                    ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                else
                                {
                                    //OBLIGATED (FOR THE MONTH)
                                    ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 20).Value = "-";
                                    ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                if (asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount) != 0)
                                {
                                    //OBLIGATED (AS AT)
                                    ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 21).Value = asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);
                                    ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#F2DCDB");
                                    ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                else
                                {
                                    //OBLIGATED (AS AT)
                                    ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 21).Value = "-";
                                    ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#F2DCDB");
                                    ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }


                                var addunobligated = afterrealignment_amount - asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);
                                var deductunobligated = afterrealignment_amountadd - asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);

                                if (_MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId).Any() || addunobligated != 0)
                                {
                                    ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 22).Value = addunobligated;
                                    ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                if (_MyDbContext.FundsRealignment.Where(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId).Any())
                                {
                                    ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 22).Value = deductunobligated;
                                    ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                if (addunobligated == 0 || deductunobligated == 0)
                                {
                                    //UNOBLIGATED BALANCE OF ALLOTMENT
                                    ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 22).Value = unobligated_amount;
                                    ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                if (unobligated_amount == 0)
                                {
                                    //UNOBLIGATED BALANCE OF ALLOTMENT
                                    ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 22).Value = "-";
                                    ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }


                                //PERCENT OF UTILIZATION
                                if (/*asAt.Where(x => x.uacsId == fundsource_amount.UacsId).Sum(x => x.amount) == 0 || */afterrealignment_amount == 0)
                                {
                                    ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 23).Value = "-";
                                    ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                    ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                else
                                {

                                    ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                    var percentTotal = asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount) / afterrealignment_amount;
                                    ws.Cell(currentRow, 23).Value = percentTotal;
                                    ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                    ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }

                                //TRANSFERED TO DATA FOR PS CURRENT
                                var transferTo = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundTransferedTo.Select(b => b.FundSourceAmountId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                foreach (var transferedTo in _MyDbContext.FundTransferedTo.Where(x => x.FundSourceAmountId == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId/* && x.Id == transferTo*/).ToList())
                                {
                                    currentRow++;
                                    ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                    ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Account_title.ToUpper().ToString();

                                    ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                    ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 13).Value = "-";

                                    ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 19).Value = "(" + transferedTo.Amount.ToString("N", new CultureInfo("en-US")) + ")";

                                    currentRow++;
                                    ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    //ws.Cell(currentRow, 4).Style.Alignment.Indent = 3;
                                    ws.Cell(currentRow, 4).Style.Font.SetItalic();
                                    ws.Cell(currentRow, 4).Value = transferedTo.Particulars;

                                    ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                    ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 13).Value = "-";

                                    ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                    ws.Cell(currentRow, 18).Value = "(" + transferedTo.Amount.ToString("N", new CultureInfo("en-US")) + ")";


                                }

                                //REALIGNMENT DATA FOR PS CURRENT
                                var data = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundSourceAmount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                foreach (var realignment in _MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId && x.Realignment_to == data && x.status == "activated").ToList())
                                {
                                    currentRow++;
                                    Debug.WriteLine($"fsaid: {fundsource_amount.FundSourceAmountId}\nfundsrc_id {fundsource_amount}");
                                    //ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundSourceAmount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().Account_title.ToUpper().ToString();
                                    ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Account_title.ToUpper().ToString();
                                    ws.Cell(currentRow, 1).Style.Alignment.Indent = 3;

                                    ws.Cell(currentRow, 2).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Expense_code;
                                    ws.Cell(currentRow, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                    //ws.Cell(currentRow, 2).Style.Alignment.Indent = 3;

                                    if (_MyDbContext.FundSourceAmount.Where(x => x.UacsId == realignment.Realignment_to).FirstOrDefault()?.beginning_balance == null)
                                    {
                                        ws.Cell(currentRow, 3).Value = "-";
                                        ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 3).Value = _MyDbContext.FundSourceAmount.FirstOrDefault(x => x.UacsId == realignment.Realignment_to)?.beginning_balance;
                                        ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    //REALIGNMENT AMOUNT
                                    ws.Cell(currentRow, 4).Value = realignment.Realignment_amount;
                                    ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    //TRANSFER TO AMOUNT
                                    ws.Cell(currentRow, 5).Value = "-";
                                    ws.Cell(currentRow, 5).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    //ADJUSTED ALLOTMENT
                                    if (_MyDbContext.FundSourceAmount.Where(x => x.UacsId == realignment.Realignment_to).FirstOrDefault()?.beginning_balance == null)
                                    {
                                        ws.Cell(currentRow, 6).Value = "-";
                                        ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 6).Value = _MyDbContext.FundSourceAmount.FirstOrDefault(x => x.UacsId == realignment.Realignment_to)?.beginning_balance;
                                        ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    //REALIGNMENT - FOR THE MONTH
                                    ws.Cell(currentRow, 7).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 7).Value = /*fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1 && x.fundSourceTitle != "AUTOMATIC APPROPRIATION").Sum(x => x.amount);*/"-";

                                    //REALIGNMENT - AS AT
                                    ws.Cell(currentRow, 8).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 8).Value = /*fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1 && x.fundSourceTitle != "AUTOMATIC APPROPRIATION").Sum(x => x.amount);*/"-";

                                    ws.Cell(currentRow, 9).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 9).Value = /*fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1 && x.fundSourceTitle != "AUTOMATIC APPROPRIATION").Sum(x => x.amount);*/"-";

                                    ws.Cell(currentRow, 10).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 10).Value = /*fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1 && x.fundSourceTitle != "AUTOMATIC APPROPRIATION").Sum(x => x.amount);*/"-";
                                }
                                currentRow++;
                                total = (double)fundsource_amount.beginning_balance;
                            }

                            var fortheMonthTotal = (from oa in _MyDbContext.ObligationAmount
                                                    join o in _MyDbContext.Obligation
                                                    on oa.ObligationId equals o.Id
                                                    where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                    select new
                                                    {
                                                        amount = oa.Amount,
                                                        uacsId = oa.UacsId,
                                                        sourceId = o.FundSourceId,
                                                        date = o.Date,
                                                        status = o.status
                                                    });

                            var subtotalTransferedTo = (from ft in _MyDbContext.FundTransferedTo
                                                        join fa in _MyDbContext.FundSourceAmount
                                                        on ft.FundSourceId equals fa.FundSourceId
                                                        where ft.FundSourceAmountId == fa.UacsId
                                                        select new
                                                        {
                                                            UacsId = fa.UacsId,
                                                            FundSourceId = fa.FundSourceId,
                                                        });

                            var asAtTotal = (from oa in _MyDbContext.ObligationAmount
                                             join o in _MyDbContext.Obligation
                                             on oa.ObligationId equals o.Id
                                             where o.Date >= date1 && o.Date <= date2
                                             select new
                                             {
                                                 amount = oa.Amount,
                                                 sourceId = o.FundSourceId,
                                                 uacsId = oa.UacsId,
                                                 status = o.status
                                             });

                            var asAtTotalSaro = (from oa in _MyDbContext.ObligationAmount
                                                 join o in _MyDbContext.Obligation
                                                 on oa.ObligationId equals o.Id
                                                 join s in _MyDbContext.SubAllotment
                                                 on o.SubAllotmentId equals s.SubAllotmentId
                                                 where o.Date >= date1 && o.Date <= date2
                                                 select new
                                                 {
                                                     amount = oa.Amount,
                                                     sourceId = o.SubAllotmentId,
                                                     uacsId = oa.UacsId,
                                                     status = o.status,
                                                     appropriationId = s.AppropriationId,
                                                     suballotmentTitle = s.Suballotment_title
                                                 });
                        }

                        if (_MyDbContext.FundSources.Where(x => x.AppropriationId == 1 && x.AllotmentClassId == 1 && x.BudgetAllotmentId == id && x.FundSourceTitle.Contains("RLIP")).Any())
                        {
                            var transferto_filter = (from f in _MyDbContext.FundSources
                                                     join fa in _MyDbContext.FundSourceAmount
                                                     on f.FundSourceId equals fa.FundSourceId
                                                     join ft in _MyDbContext.FundTransferedTo
                                                     on fa.FundSourceId equals ft.FundSourceId
                                                     select new
                                                     {
                                                         FundSource_Id = f.FundSourceId,
                                                         Uacs_UacsId = fa.UacsId,
                                                         Uacs_FundSourceId = fa.FundSourceId,
                                                     }).FirstOrDefault();

                            ws.Cell(currentRow, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 2).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 3).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 4).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 5).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 6).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 7).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 8).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 9).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 10).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 11).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 12).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 13).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 14).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 15).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 16).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 17).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 18).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 19).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 22).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 23).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 11).Style.Font.SetBold();
                            ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 11).Value = "TOTAL AUTOMATIC APPROPRIATIONS";

                            var PTC = budget_allotment.FundSources.FirstOrDefault()?.Beginning_balance;
                            //var PsTotalCurrent = +(double)PTC;


                            ws.Cell(currentRow, 13).Style.Font.SetBold();
                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 13).Value = PsTotalRlip;

                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_total;
                            }


                            //PS CURRENT TOTAL TRANSFERED TO
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = _MyDbContext.FundTransferedTo.Where(x => x.FundSource.AllotmentClassId == 1 && x.FundSource.AppropriationId == 1 && x.FundSource.BudgetAllotmentId == id).Sum(x => x.Amount);
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = PsTotalRlip - _MyDbContext.FundTransferedTo.Where(x => x.FundSource.AllotmentClassId == 1 && x.FundSource.AppropriationId == 1 && x.FundSource.BudgetAllotmentId == id).Sum(x => x.Amount);

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1 && x.fundSourceTitle.Contains("RLIP")).Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1 && x.fundSourceTitle.Contains("RLIP")).Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT
                            var unobligatedTotalinTotalPS = PsTotalRlip - asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1 && x.fundSourceTitle.Contains("RLIP")).Sum(x => x.amount);
                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalPS;
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";

                            //PERCENT OF UTILIZATION
                            var totalPercentPS = (double)asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.fundSourceTitle.Contains("RLIP")).Sum(x => x.amount) / allotment_total;
                            ws.Cell(currentRow, 23).Value = totalPercentPS;
                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 23).Style.Font.SetBold();
                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";

                            currentRow++;
                            //END PS LOOP
                        }
                        //END AUTOMATIC APPROPRIATION
                    }
                    //END AUTOMATIC APPROPRIATION




                    var saa = _MyDbContext.Budget_allotments
                        .Include(sub_allotment => sub_allotment.SubAllotment)
                        .ThenInclude(suballotment_amount => suballotment_amount.SubAllotmentAmounts)
                        .ThenInclude(uacs => uacs.Uacs)
                        .Include(x => x.SubAllotment)
                            .ThenInclude(x => x.SubTransferedTo)
                        .Include(x => x.SubAllotment)
                            .ThenInclude(x => x.prexc)
                        .Where(x => x.YearlyReferenceId == id)
                        .AsSplitQuery();

                    var prexc = (from p in _MyDbContext.Prexc
                                 join s in _MyDbContext.SubAllotment
                                 on p.Id equals s.prexcId
                                 select new
                                 {
                                     papInitial = p.pap_initial,
                                     prexcId = p.Id
                                 }).ToList();


                    foreach (BudgetAllotment b in saa)
                    {

                        if (_MyDbContext.SubAllotment.Any(x => x.AppropriationId == 1 && x.BudgetAllotmentId == id))
                        {
                            ws.Cell(currentRow, 1).Style.Font.SetBold();
                            ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 1).Value = "Current Saa Personnel Services".ToUpper();
                            currentRow++;
                        }
                        //START PS SAA CURRENT WITH PAP GROUPINGS
                        foreach (var groups in budget_allotment.SubAllotment.Where(x => x.AllotmentClassId == 1 && x.AppropriationId == 1 && x.BudgetAllotmentId == id && !x.Suballotment_title.Contains("SARO")).OrderBy(x => x.Suballotment_title).GroupBy(x => new { x.prexcId, x.AllotmentClassId }).ToList())
                        {

                            foreach (var subAllotment in groups)
                            {
                                ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 1).Value = _MyDbContext.Prexc.FirstOrDefault(x => x.Id == subAllotment.prexcId)?.pap_code1;
                                ws.Cell(currentRow, 1).Style.NumberFormat.Format = "00";
                                ws.Cell(currentRow, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                ws.Range(ws.Cell(currentRow, 1), ws.Cell(currentRow, 11)).Merge();
                                currentRow++;

                                ws.Cell(currentRow, 1).Style.Font.SetBold();
                                ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 1).Value = subAllotment.Suballotment_title?.ToUpper().ToString();

                                ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                ws.Cell(currentRow, 11).Value = subAllotment.Date.ToShortDateString();
                                ws.Column(11).Width = 15;
                                currentRow++;

                                ws.Cell(currentRow, 2).Style.Font.SetItalic();
                                ws.Cell(currentRow, 2).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 2).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                ws.Cell(currentRow, 2).Value = subAllotment.prexc.pap_initial?.ToUpper().ToString() + "-" + subAllotment.Description?.ToString();
                                ws.Range(ws.Cell(currentRow, 2), ws.Cell(currentRow, 18)).Merge();
                                currentRow++;

                                foreach (var suballotment_amount in subAllotment.SubAllotmentAmounts.OrderBy(x => x.UacsId).Where(x => x.status == "activated"))
                                {
                                    var uacsID = from Suballotment in _MyDbContext.Suballotment_amount
                                                 join u in _MyDbContext.Uacs
                                                 on Suballotment.UacsId equals u.UacsId
                                                 select Suballotment.UacsId;


                                    var fortheMonth = (from oa in _MyDbContext.ObligationAmount
                                                       join o in _MyDbContext.Obligation
                                                       on oa.ObligationId equals o.Id
                                                       join f in _MyDbContext.FundSources
                                                       on o.FundSourceId equals f.FundSourceId
                                                       where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                       select new
                                                       {
                                                           amount = oa.Amount,
                                                           uacsId = oa.UacsId,
                                                           date = o.Date,
                                                           sourceId = o.FundSourceId,
                                                           sourceType = o.source_type,
                                                           status = o.status,
                                                           allotmentClassID = f.AllotmentClassId

                                                       });

                                    var fundsourceID = (from Suballotment in _MyDbContext.SubAllotment
                                                        join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                        on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                        where Suballotment.SubAllotmentId == Suballotment_amount.SubAllotmentId
                                                        select new
                                                        {
                                                            saId = Suballotment.SubAllotmentId
                                                        });

                                    var fundsourceamountID = (from Suballotment in _MyDbContext.SubAllotment
                                                              join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                              on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                              where Suballotment.SubAllotmentId == Suballotment_amount.SubAllotmentId
                                                              select new
                                                              {
                                                                  saAmountId = Suballotment_amount.SubAllotmentId
                                                              });

                                    var asAt = (from oa in _MyDbContext.ObligationAmount
                                                join o in _MyDbContext.Obligation
                                                on oa.ObligationId equals o.Id
                                                where o.Date >= date1 && o.Date <= date2
                                                select new
                                                {
                                                    amount = oa.Amount,
                                                    uacsId = oa.UacsId,
                                                    sourceId = o.SubAllotmentId,
                                                    sourceType = o.source_type,
                                                    status = o.status
                                                });

                                    var SAAunobligated_amount = suballotment_amount.beginning_balance - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);

                                    total = 0;
                                    var afterrealignment_amount = suballotment_amount.beginning_balance - suballotment_amount.realignment_amount;

                                    ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == suballotment_amount.UacsId)?.Account_title.ToUpper().ToString();
                                    ws.Cell(currentRow, 4).Style.Alignment.Indent = 3;

                                    ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == suballotment_amount.UacsId)?.Expense_code;
                                    ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                    //ORIGINAL IS ws.Cell(currentRow, 13)
                                    if (suballotment_amount.beginning_balance != 0)
                                    {
                                        ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 14).Value = suballotment_amount.beginning_balance;
                                        ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 14).Value = "-";
                                        ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    //SUB NEGATIVE
                                    foreach (var subNegative in _MyDbContext.SubNegative.Where(x => x.SubAllotmentAmountId == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId && x.status == "activated").ToList())
                                    {
                                        ws.Cell(currentRow, 15).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 15).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 15).Value = "(" + subNegative.Amount.ToString("N", new CultureInfo("en-US")) + ")";
                                        ws.Cell(currentRow, 15).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 15).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    //REALIGNMENT SAA
                                    if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                    {
                                        //REALIGNMENT SAA AMOUNT
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Value = "(" + suballotment_amount.realignment_amount + ")";
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                    {
                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Value = _MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId).FirstOrDefault().Realignment_amount;
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Value = "-";
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    //TRANSFERED TO DATA FOR PS CURRENT SAA
                                    var transferTo = _MyDbContext.Uacs.Where(c => !_MyDbContext.SubTransferedTo.Select(b => b.SubAllotmentId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                    foreach (var transferedToSaa in _MyDbContext.SubTransferedTo.Where(x => x.SubAllotmentAmountId == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId && x.status == "activated" /*&& x.Id == transferTo*/).ToList())
                                    {
                                        currentRow++;
                                        ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                        ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Account_title.ToUpper().ToString();

                                        ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                        ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 13).Value = "-";

                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 19).Value = "(" + transferedToSaa.Amount.ToString("N", new CultureInfo("en-US")) + ")";

                                        currentRow++;
                                        ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        //ws.Cell(currentRow, 4).Style.Alignment.Indent = 3;
                                        ws.Cell(currentRow, 4).Style.Font.SetItalic();
                                        ws.Cell(currentRow, 4).Value = transferedToSaa.Particulars;

                                        ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                        ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 13).Value = "-";

                                        ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        ws.Cell(currentRow, 18).Value = "(" + transferedToSaa.Amount.ToString("N", new CultureInfo("en-US")) + ")";
                                    }

                                    var SAAafterrealignment_amount = suballotment_amount.beginning_balance - suballotment_amount.realignment_amount;
                                    var SAAafterrealignment_amountadd = suballotment_amount.beginning_balance + _MyDbContext.SubAllotment_Realignment.FirstOrDefault(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId)?.Realignment_amount;
                                    if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any() || afterrealignment_amount != 0)
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT SAA
                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Value = SAAafterrealignment_amount;
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT SAA
                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Value = SAAafterrealignment_amountadd;
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (SAAafterrealignment_amount == 0 || SAAafterrealignment_amountadd == 0)
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT
                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Value = suballotment_amount.beginning_balance;
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (suballotment_amount.beginning_balance == 0)
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT
                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Value = "-";
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    if (fortheMonth.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount) != 0)
                                    {
                                        //OBLIGATED (FOR THE MONTH)
                                        ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 20).Value = fortheMonth.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                        ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        //OBLIGATED (FOR THE MONTH)
                                        ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 20).Value = "-";
                                        ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    if (asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount) != 0)
                                    {
                                        //OBLIGATED (AS AT)
                                        ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#F2DCDB");
                                        ws.Cell(currentRow, 21).Value = asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                        ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        //OBLIGATED (AS AT)
                                        ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#F2DCDB");
                                        ws.Cell(currentRow, 21).Value = "-";
                                        ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    var SAAaddunobligated = SAAafterrealignment_amount - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                    var SAAdeductunobligated = SAAafterrealignment_amountadd - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated").Sum(x => x.amount);

                                    if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any() || SAAaddunobligated != 0)
                                    {
                                        ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 22).Value = SAAaddunobligated;
                                        ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                    {
                                        ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 22).Value = SAAdeductunobligated;
                                        ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (SAAaddunobligated == 0 || SAAdeductunobligated == 0)
                                    {
                                        //UNOBLIGATED BALANCE OF ALLOTMENT
                                        ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 22).Value = SAAunobligated_amount;
                                        ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (SAAunobligated_amount == 0)
                                    {
                                        //UNOBLIGATED BALANCE OF ALLOTMENT
                                        ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 22).Value = "-";
                                        ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    //PERCENT OF UTILIZATION
                                    if (SAAafterrealignment_amount == 0)
                                    {
                                        ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 23).Value = "-";
                                        ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                        ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        //PERCENT OF UTILIZATION
                                        ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 23).Value = asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount) / SAAafterrealignment_amount;
                                        ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                        ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    //REALIGNMENT DATA SUB ALLOTMENT
                                    var data = _MyDbContext.Uacs.Where(c => !_MyDbContext.Suballotment_amount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                    foreach (var realignment in _MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId && x.Realignment_to == data))
                                    {
                                        currentRow++;
                                        Debug.WriteLine($"fsaid: {suballotment_amount.SubAllotmentAmountId}\nfundsrc_id {suballotment_amount}");
                                        //ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundSourceAmount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().Account_title.ToUpper().ToString();
                                        ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Account_title.ToUpper().ToString();
                                        ws.Cell(currentRow, 1).Style.Alignment.Indent = 3;

                                        ws.Cell(currentRow, 2).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Expense_code;
                                        ws.Cell(currentRow, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        //ws.Cell(currentRow, 2).Style.Alignment.Indent = 3;

                                        ws.Cell(currentRow, 3).Value = "#,##0.00";
                                        ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 4).Value = realignment.Realignment_amount;
                                        ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 6).Value = "";
                                        ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    currentRow++;
                                    total = (double)suballotment_amount.beginning_balance;
                                }


                                //SUB TOTAL

                                var fortheMonthTotal = (from oa in _MyDbContext.ObligationAmount
                                                        join o in _MyDbContext.Obligation
                                                        on oa.ObligationId equals o.Id
                                                        where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                        select new
                                                        {
                                                            amount = oa.Amount,
                                                            uacsId = oa.UacsId,
                                                            sourceId = o.SubAllotmentId,
                                                            sourceType = o.source_type,
                                                            date = o.Date,
                                                            status = o.status
                                                        });

                                var funds_filterTotal = (from Suballotment in _MyDbContext.SubAllotment
                                                         join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                         on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                         select new
                                                         {
                                                             Id = Suballotment.SubAllotmentId
                                                         });

                                var asAtTotal = (from oa in _MyDbContext.ObligationAmount
                                                 join o in _MyDbContext.Obligation
                                                 on oa.ObligationId equals o.Id
                                                 where o.Date >= date1 && o.Date <= date2
                                                 select new
                                                 {
                                                     amount = oa.Amount,
                                                     sourceId = o.SubAllotmentId,
                                                     uacsId = oa.UacsId,
                                                     sourceType = o.source_type,
                                                     status = o.status
                                                 });


                                ws.Cell(currentRow, 4).Style.Font.SetBold();
                                ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 4).Value = "SUBTOTAL " + subAllotment.Suballotment_title?.ToUpper();

                                ws.Cell(currentRow, 14).Style.Font.SetBold();
                                ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 14).Value = subAllotment.Beginning_balance;


                                //SUB NEGATIVE SUB TOTAL

                                ws.Cell(currentRow, 15).Style.Font.SetBold();
                                ws.Cell(currentRow, 15).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 15).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 15).Value = "(" + subAllotment.SubNegative.Where(x => x.SubAllotmentId == subAllotment.SubAllotmentId).Sum(x => x.Amount).ToString("N", new CultureInfo("en-US")) + ")";
                                ws.Cell(currentRow, 15).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 15).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                //REALIGNMENT SUBTOTAL
                                var SAArealignment_subtotal = budget_allotment.SubAllotment.FirstOrDefault().SubAllotmentRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.SubAllotment.FirstOrDefault().SubAllotmentRealignment?.Sum(x => x.Realignment_amount);
                                var SAAsub6 = subAllotment.Beginning_balance - subAllotment.SubAllotmentRealignment?.Sum(x => x.Realignment_amount) + subAllotment.SubAllotmentRealignment?.Sum(x => x.Realignment_amount);
                                //var SAAsub9 = SAAsub6 - asAtTotal.Where(x => x.sourceId == subAllotment.SubAllotmentAmounts.FirstOrDefault().SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                if (SAArealignment_subtotal == null)
                                {
                                    ws.Cell(currentRow, 17).Style.Font.SetBold();
                                    ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 17).Value = "0.00";
                                    ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                }
                                else
                                {
                                    ws.Cell(currentRow, 17).Style.Font.SetBold();
                                    ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 17).Value = SAArealignment_subtotal;
                                }
                                //SUBTOTAL PS SAA CURRENT
                                ws.Cell(currentRow, 18).Style.Font.SetBold();
                                ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 18).Value = subAllotment.SubTransferedTo.Sum(x => x.Amount);
                                ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                if (string.IsNullOrEmpty(subAllotment.SubAllotmentRealignment?.Sum(x => x.Realignment_amount).ToString()))
                                {
                                    ws.Cell(currentRow, 19).Style.Font.SetBold();
                                    ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 19).Value = subAllotment.Beginning_balance - subAllotment.SubTransferedTo.Sum(x => x.Amount);
                                }
                                else
                                {
                                    ws.Cell(currentRow, 19).Style.Font.SetBold();
                                    ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 19).Value = SAAsub6 - subAllotment.SubTransferedTo.Sum(x => x.Amount);
                                }

                                if (fortheMonthTotal.Where(x => x.sourceId == subAllotment.SubAllotmentAmounts.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment") == null)
                                {
                                    ws.Cell(currentRow, 20).Style.Font.SetBold();
                                    ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 20).Value = "-";
                                }
                                else
                                {
                                    ws.Cell(currentRow, 20).Style.Font.SetBold();
                                    ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 20).Value = fortheMonthTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                }


                                //AS AT TOTAL
                                ws.Cell(currentRow, 21).Style.Font.SetBold();
                                ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 21).Value = asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);


                                var unobligatedTotal = subAllotment.Beginning_balance - asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                //SUBTOTAL UNOBLIGATED BALANCE OF ALLOTMENT
                                ws.Cell(currentRow, 22).Style.Font.SetBold();
                                ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 22).Value = unobligatedTotal;

                                //PERCENT OF UTILIZATION
                                ws.Cell(currentRow, 23).Style.Font.SetBold();
                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 23).Value = asAtTotal.Where(x => x.sourceId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount) / budget_allotment.FundSources.FirstOrDefault()?.Beginning_balance;
                                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                allotment_totalSaa += (double)subAllotment.Beginning_balance;
                                currentRow++;

                            }

                            //TOTAL PER GROUP
                            ws.Cell(currentRow, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 2).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 3).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 4).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 5).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 6).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 7).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 8).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 9).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 10).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 11).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 12).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 13).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 14).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 15).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 16).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 17).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 18).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 19).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 22).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 23).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                            ws.Cell(currentRow, 11).Style.Font.SetBold();
                            ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 11).Value = "TOTAL" + " " + groups.FirstOrDefault().prexc.pap_initial.ToUpper().ToString();

                            ws.Cell(currentRow, 14).Style.Font.SetBold();
                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 14).Value = groups.Sum(x => x.Beginning_balance);

                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.SubAllotment.FirstOrDefault()?.SubAllotmentRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.SubAllotment.FirstOrDefault()?.SubAllotmentRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_total;
                            }
                            //TRANSFERED TO
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = _MyDbContext.SubTransferedTo.Where(x => x.SubAllotment.AllotmentClassId == 1 && x.SubAllotment.AppropriationId == 1 && x.SubAllotment.BudgetAllotmentId == id).Sum(x => x.Amount);
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            var Total_Adjusted_Allotment = groups.FirstOrDefault().Beginning_balance - groups.FirstOrDefault().SubAllotmentRealignment?.Sum(x => x.Realignment_amount) + groups.FirstOrDefault().SubAllotmentRealignment?.Sum(x => x.Realignment_amount);

                            if (string.IsNullOrEmpty(budget_allotment.SubAllotment.FirstOrDefault().SubAllotmentRealignment?.Sum(x => x.Realignment_amount).ToString()))
                            {
                                ws.Cell(currentRow, 19).Style.Font.SetBold();
                                ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 19).Value = groups.FirstOrDefault().Beginning_balance - groups.FirstOrDefault().SubTransferedTo.Sum(x => x.Amount);
                            }
                            else
                            {
                                ws.Cell(currentRow, 19).Style.Font.SetBold();
                                ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 19).Value = Total_Adjusted_Allotment - groups.FirstOrDefault().SubTransferedTo.Sum(x => x.Amount);
                            }

                            var fortheMonthTotalGroupings = (from oa in _MyDbContext.ObligationAmount
                                                             join o in _MyDbContext.Obligation
                                                             on oa.ObligationId equals o.Id
                                                             join s in _MyDbContext.SubAllotment
                                                             on o.SubAllotmentId equals s.SubAllotmentId
                                                             where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday && !s.Suballotment_title.Contains("SARO")
                                                             select new
                                                             {
                                                                 amount = oa.Amount,
                                                                 uacsId = oa.UacsId,
                                                                 sourceId = o.SubAllotmentId,
                                                                 sourceType = o.source_type,
                                                                 date = o.Date,
                                                                 status = o.status,
                                                                 suballotmentTitle = s.Suballotment_title
                                                             });
                            //FOR THE MONTH TOTAL GROUPINGS
                            if (fortheMonthTotalGroupings.Where(x => x.sourceId == groups.FirstOrDefault().SubAllotmentAmounts.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment") == null)
                            {
                                ws.Cell(currentRow, 20).Style.Font.SetBold();
                                ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 20).Value = "-";
                            }
                            else
                            {
                                ws.Cell(currentRow, 20).Style.Font.SetBold();
                                ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 20).Value = fortheMonthTotalGroupings.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                            }
                            var asAtTotalGroupings = (from oa in _MyDbContext.ObligationAmount
                                                      join o in _MyDbContext.Obligation
                                                      on oa.ObligationId equals o.Id
                                                      where o.Date >= date1 && o.Date <= date2
                                                      select new
                                                      {
                                                          amount = oa.Amount,
                                                          sourceId = o.SubAllotmentId,
                                                          sourceType = o.source_type,
                                                          uacsId = oa.UacsId,
                                                          status = o.status
                                                      });

                            //AS AT TOTAL GROUPINGS
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotalGroupings.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            var unobligatedTotalGroupings = groups.FirstOrDefault().Beginning_balance - asAtTotalGroupings.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                            //SUBTOTAL UNOBLIGATED BALANCE OF ALLOTMENT GROUPINGS
                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalGroupings;

                            //PERCENT OF UTILIZATION
                            ws.Cell(currentRow, 23).Style.Font.SetBold();
                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 23).Value = asAtTotalGroupings.Where(x => x.sourceId == groups.FirstOrDefault().SubAllotmentAmounts.FirstOrDefault().SubAllotmentId && x.status == "activated").Sum(x => x.amount) / groups.FirstOrDefault()?.Beginning_balance;
                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            allotment_totalSaa += (double)groups.FirstOrDefault().Beginning_balance;

                            currentRow++;

                        }

                        //START TOTAL PS SAA WITH GROUPINGS
                        if (_MyDbContext.SubAllotment.Where(x => x.AppropriationId == 1 && x.AllotmentClassId == 1 && x.BudgetAllotmentId == id && !x.Suballotment_title.Contains("SARO")).GroupBy(x => new { x.prexcId, x.AllotmentClassId }).Any())
                        {
                            //START TOTAL PS SAA WITH GROUPINGS
                            ws.Cell(currentRow, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 2).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 3).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 4).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 5).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 6).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 7).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 8).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 9).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 10).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 11).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 12).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 13).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 14).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 15).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 16).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 17).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 18).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 19).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 22).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 23).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 11).Style.Font.SetBold();
                            ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 11).Value = "TOTAL PS SAA";


                            ws.Cell(currentRow, 14).Style.Font.SetBold();
                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 14).Value = budget_allotment.SubAllotment.Where(x => x.AppropriationId == 1 && x.AllotmentClassId == 1 && x.BudgetAllotmentId == id && !x.Suballotment_title.Contains("SARO") && x.prexcId == x.prexcId).Sum(x => x.Beginning_balance);

                            //Sub Negative Total
                            ws.Cell(currentRow, 15).Style.Font.SetBold();
                            ws.Cell(currentRow, 15).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 15).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 15).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 15).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 15).Value = "(" + PsTotalSubNegative.Where(x => x.AppropriationId == 1 && x.AllotmentClassId == 1 && x.BudgetAllotmentId == id).Sum(x => x.Amount).ToString("N", new CultureInfo("en-US")) + ")";


                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_total;
                            }


                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = _MyDbContext.SubTransferedTo.Where(x => x.SubAllotment.AllotmentClassId == 1 && x.SubAllotment.AppropriationId == 1 && x.SubAllotment.BudgetAllotmentId == id).Sum(x => x.Amount);
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = PsTotalSaa - _MyDbContext.SubTransferedTo.Where(x => x.SubAllotment.AllotmentClassId == 1 && x.SubAllotment.AppropriationId == 1 && x.SubAllotment.BudgetAllotmentId == id).Sum(x => x.Amount); ;

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT

                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalPSSaa;

                            if (asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.sourceType == "sub_allotment").Sum(x => x.amount) == 0 && PsTotalSaa == 0)
                            {
                                ws.Cell(currentRow, 23).Style.Font.SetBold();
                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 23).Value = "";
                                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                            }
                            else
                            {
                                var totalPercentPSSaaTotal = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.sourceType == "sub_allotment").Sum(x => x.amount) / PsTotalSaa;
                                //PERCENT OF UTILIZATION
                                ws.Cell(currentRow, 23).Style.Font.SetBold();
                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 23).Value = totalPercentPSSaaTotal;
                                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                            }
                            //END SAA PS LOOP
                        }

                        /*if (_MyDbContext.SubAllotment.Where(x => x.AppropriationId == 1 && x.AllotmentClassId == 1 && x.BudgetAllotmentId == id).Any())
                        {
                            //START TOTAL PS SAA WITH GROUPINGS
                            ws.Cell(currentRow, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 2).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 3).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 4).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 5).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 6).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 7).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 8).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 9).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 10).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 11).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 12).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 13).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 14).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 15).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 16).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 17).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 18).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 19).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 22).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 23).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 11).Style.Font.SetBold();
                            ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 11).Value = "TOTAL PERSONNEL SERVICES SAA";


                            ws.Cell(currentRow, 14).Style.Font.SetBold();
                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 14).Value = PsTotalSaa;

                            //Sub Negative Total
                            ws.Cell(currentRow, 15).Style.Font.SetBold();
                            ws.Cell(currentRow, 15).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 15).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 15).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 15).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 15).Value = "(" + PsTotalSubNegative.Where(x => x.AppropriationId == 1 && x.AllotmentClassId == 1 && x.BudgetAllotmentId == id).Sum(x => x.Amount).ToString("N", new CultureInfo("en-US")) + ")";


                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_total;
                            }


                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = _MyDbContext.SubTransferedTo.Where(x => x.SubAllotment.AllotmentClassId == 1 && x.SubAllotment.AppropriationId == 1 && x.SubAllotment.BudgetAllotmentId == id).Sum(x => x.Amount);
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = PsTotalSaa - _MyDbContext.SubTransferedTo.Where(x => x.SubAllotment.AllotmentClassId == 1 && x.SubAllotment.AppropriationId == 1 && x.SubAllotment.BudgetAllotmentId == id).Sum(x => x.Amount); ;

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT

                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalPSSaa;

                            if (asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.sourceType == "sub_allotment").Sum(x => x.amount) == 0 && PsTotalSaa == 0)
                            {
                                ws.Cell(currentRow, 23).Style.Font.SetBold();
                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 23).Value = "";
                                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                            }
                            else
                            {
                                var totalPercentPSSaaTotal = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.sourceType == "sub_allotment").Sum(x => x.amount) / PsTotalSaa;
                                //PERCENT OF UTILIZATION
                                ws.Cell(currentRow, 23).Style.Font.SetBold();
                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 23).Value = totalPercentPSSaaTotal;
                                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                            }
                            //END SAA PS LOOP
                        }*/
                        //START MOOE LOOP | OPTION WITH BREAKDOWN
                        if (budget_allotment.FundSources.Where(x => x.AllotmentClassId == 2 && x.BudgetAllotmentId == id).Any())
                        {
                            ws.Cell(currentRow, 1).Style.Font.SetBold();
                            ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 1).Value = "Maintenance and Other Operating Expenses".ToUpper();
                            currentRow++;

                            foreach (FundSource fundSource in budget_allotment.FundSources.Where(x => x.AllotmentClassId == 2 && x.AppropriationId == 1).ToList())
                            {
                                ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 1).Value = fundSource.Prexc.pap_code1;
                                ws.Cell(currentRow, 1).Style.NumberFormat.Format = "00";
                                ws.Cell(currentRow, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                ws.Range(ws.Cell(currentRow, 1), ws.Cell(currentRow, 11)).Merge();
                                currentRow++;

                                ws.Cell(currentRow, 1).Style.Font.SetBold();
                                ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 1).Value = fundSource.FundSourceTitle.ToUpper().ToString(); ;
                                currentRow++;

                                foreach (FundSourceAmount fundsource_amount in fundSource.FundSourceAmounts.Where(x => x.status == "activated").ToList())
                                {
                                    var uacsID = from fa in _MyDbContext.FundSourceAmount
                                                 join u in _MyDbContext.Uacs
                                                 on fa.UacsId equals u.UacsId
                                                 select fa.UacsId;


                                    var fortheMonth = (from oa in _MyDbContext.ObligationAmount
                                                       join o in _MyDbContext.Obligation
                                                       on oa.ObligationId equals o.Id
                                                       where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                       select new
                                                       {
                                                           amount = oa.Amount,
                                                           uacsId = oa.UacsId,
                                                           date = o.Date,
                                                           sourceId = o.FundSourceId,
                                                           status = o.status,
                                                           breakdown = fundSource.Breakdown

                                                       });

                                    var fortheMonthWithBreakdown = (from oa in _MyDbContext.ObligationAmount
                                                                    join o in _MyDbContext.Obligation
                                                                    on oa.ObligationId equals o.Id
                                                                    join fa in _MyDbContext.FundSourceAmount
                                                                    on oa.UacsId equals fa.UacsId
                                                                    where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                                    select new
                                                                    {
                                                                        amount = oa.Amount,
                                                                        uacsId = fa.UacsId,
                                                                        date = o.Date,
                                                                        sourceId = fa.FundSourceId,
                                                                        status = o.status,
                                                                        breakdown = fundSource.Breakdown

                                                                    });

                                    var fundsourceID = (from f in _MyDbContext.FundSources
                                                        join fa in _MyDbContext.FundSourceAmount
                                                        on f.FundSourceId equals fa.FundSourceId
                                                        where f.FundSourceId == fa.FundSourceId
                                                        select new
                                                        {
                                                            faId = f.FundSourceId
                                                        });

                                    var fundsourceamountID = (from f in _MyDbContext.FundSources
                                                              join fa in _MyDbContext.FundSourceAmount
                                                              on f.FundSourceId equals fa.FundSourceId
                                                              where f.FundSourceId == fa.FundSourceId
                                                              select new
                                                              {
                                                                  faAmountId = fa.FundSourceId
                                                              });




                                    var asAt = (from oa in _MyDbContext.ObligationAmount
                                                join o in _MyDbContext.Obligation
                                                on oa.ObligationId equals o.Id
                                                where o.Date >= date1 && o.Date <= date2
                                                select new
                                                {
                                                    amount = oa.Amount,
                                                    uacsId = oa.UacsId,
                                                    sourceId = o.FundSourceId,
                                                    status = o.status
                                                });

                                    var asAtWithBreakdown = (from oa in _MyDbContext.ObligationAmount
                                                             join o in _MyDbContext.Obligation
                                                             on oa.ObligationId equals o.Id
                                                             join fa in _MyDbContext.FundSourceAmount
                                                             on oa.UacsId equals fa.UacsId
                                                             where o.Date >= date1 && o.Date <= date2
                                                             select new
                                                             {
                                                                 amount = oa.Amount,
                                                                 uacsId = fa.UacsId,
                                                                 sourceId = fa.FundSourceId,
                                                                 status = o.status
                                                             });

                                    var unobligated_amount = fundsource_amount.beginning_balance - asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);
                                    var unobligated_amountWithBreakdown = fundsource_amount.beginning_balance - asAtWithBreakdown.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);


                                    total = 0;
                                    var afterrealignment_amount = fundsource_amount.beginning_balance - fundsource_amount.realignment_amount;
                                    ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 4).Value = fundsource_amount.Uacs.Account_title.ToUpper().ToString();

                                    ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 12).Value = fundsource_amount.Uacs.Expense_code;
                                    ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);

                                    if (fundSource.Breakdown == true)
                                    {
                                        ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 13).Value = "-";
                                        ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        if (fundsource_amount.beginning_balance != 0)
                                        {
                                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 13).Value = fundsource_amount.beginning_balance;
                                            ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 13).Value = "-";
                                            ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                    }


                                    if (_MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId && x.status == "activated").Any())
                                    {
                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Value = "(" + _MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.status == "activated").FirstOrDefault()?.Realignment_amount + ")";
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else if (_MyDbContext.FundsRealignment.Where(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId && x.status == "activated").Any())
                                    {
                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Value = _MyDbContext.FundsRealignment.Where(x => x.Realignment_to == fundsource_amount.UacsId && x.status == "activated").FirstOrDefault().Realignment_amount;
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Value = "-";
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 18).Value = "-";
                                    ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    var MOOEafterrealignment_amount = fundsource_amount.beginning_balance - fundsource_amount.realignment_amount;
                                    var MOOEafterrealignment_amountadd = fundsource_amount.beginning_balance + _MyDbContext.FundsRealignment.FirstOrDefault(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId)?.Realignment_amount;
                                    //TOTAL ADJUSTED ALLOTMENT
                                    if (_MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId).Any() || MOOEafterrealignment_amount != 0)
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT
                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Value = MOOEafterrealignment_amount;
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (_MyDbContext.FundsRealignment.Where(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId).Any())
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT
                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Value = MOOEafterrealignment_amountadd;
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (MOOEafterrealignment_amount == 0 || MOOEafterrealignment_amountadd == 0)
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT
                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Value = fundsource_amount.beginning_balance;
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (fundsource_amount.beginning_balance == 0)
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT
                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Value = "-";
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    //OBLIGATED (FOR THE MONTH)
                                    if (fortheMonth.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount) != 0)
                                    {
                                        ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 20).Value = fortheMonth.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);
                                        ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        //OBLIGATED (FOR THE MONTH)
                                        ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 20).Value = "-";
                                        ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    if (fundSource.Original == true)
                                    {
                                        ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 20).Value = fortheMonthWithBreakdown.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);
                                    }
                                    //OBLIGATED (AS AT)
                                    if (asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount) != 0)
                                    {
                                        ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#F2DCDB");
                                        ws.Cell(currentRow, 21).Value = asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);
                                        ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        //OBLIGATED (AS AT)
                                        ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#F2DCDB");
                                        ws.Cell(currentRow, 21).Value = "-";
                                        ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    if (fundSource.Original == true)
                                    {
                                        ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#F2DCDB");
                                        ws.Cell(currentRow, 21).Value = asAtWithBreakdown.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);
                                        ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    //WITHOUT BREAKDOWN
                                    var MOOEaddunobligated = MOOEafterrealignment_amount - asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);
                                    var MOOEdeductunobligated = MOOEafterrealignment_amountadd - asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);

                                    //WITH BREAKDOWN
                                    var MOOEaddunobligatedWithBreakdown = MOOEafterrealignment_amount - asAtWithBreakdown.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);
                                    var MOOEdeductunobligatedWithBreakdown = MOOEafterrealignment_amountadd - asAtWithBreakdown.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);


                                    //WITH BREAKDOWN
                                    if (fundSource.Original == true)
                                    {
                                        ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 22).Value = MOOEaddunobligatedWithBreakdown;
                                        ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        //UNOBLIGATED BALANCE OF ALLOTMENT
                                        if (_MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId).Any() || MOOEaddunobligated != 0)
                                        {
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = MOOEaddunobligated;
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                    }
                                    //WITH BREAKDOWN
                                    if (fundSource.Original == true)
                                    {
                                        ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 22).Value = MOOEdeductunobligatedWithBreakdown;
                                        ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        if (_MyDbContext.FundsRealignment.Where(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId).Any())
                                        {
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = MOOEdeductunobligated;
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                    }
                                    //WITH BREAKDOWN
                                    if (fundSource.Original == true)
                                    {
                                        ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 22).Value = unobligated_amountWithBreakdown;
                                        ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        if (MOOEaddunobligated == 0 || MOOEdeductunobligated == 0)
                                        {
                                            //UNOBLIGATED BALANCE OF ALLOTMENT
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = unobligated_amount;
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                    }
                                    if (unobligated_amount == 0)
                                    {
                                        //UNOBLIGATED BALANCE OF ALLOTMENT
                                        ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 22).Value = "-";
                                        ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }


                                    //PERCENT OF UTILIZATION
                                    if (afterrealignment_amount == 0)
                                    {
                                        ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 23).Value = "-";
                                        ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                        ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 23).Value = asAt.Where(x => x.uacsId == fundsource_amount.UacsId).Sum(x => x.amount) / afterrealignment_amount;
                                        ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                        ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    //TRANSFERED TO DATA FOR MOOE CURRENT //START MOOE LOOP | OPTION WITH BREAKDOWN
                                    var transferTo = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundTransferedTo.Select(b => b.FundSourceAmountId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                    foreach (var transferedTo in _MyDbContext.FundTransferedTo.Where(x => x.FundSourceAmountId == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId/* && x.Id == transferTo*/).ToList())
                                    {
                                        currentRow++;
                                        ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                        ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Account_title.ToUpper().ToString();

                                        ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                        ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 13).Value = "-";

                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 19).Value = "(" + transferedTo.Amount.ToString("N", new CultureInfo("en-US")) + ")";

                                        currentRow++;
                                        ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        //ws.Cell(currentRow, 4).Style.Alignment.Indent = 3;
                                        ws.Cell(currentRow, 4).Style.Font.SetItalic();
                                        ws.Cell(currentRow, 4).Value = transferedTo.Particulars;

                                        ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                        ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 13).Value = "-";

                                        ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        ws.Cell(currentRow, 18).Value = "(" + transferedTo.Amount.ToString("N", new CultureInfo("en-US")) + ")";
                                    }

                                    //REALIGNMENT DATA FOR MOOE CURRENT  //START MOOE LOOP | OPTION WITH BREAKDOWN
                                    var data = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundSourceAmount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                    foreach (var realignment in _MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId && x.Realignment_to == data))
                                    {
                                        currentRow++;
                                        Debug.WriteLine($"fsaid: {fundsource_amount.FundSourceAmountId}\nfundsrc_id {fundsource_amount}");
                                        //ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundSourceAmount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().Account_title.ToUpper().ToString();
                                        ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Account_title.ToUpper().ToString();
                                        ws.Cell(currentRow, 1).Style.Alignment.Indent = 3;

                                        ws.Cell(currentRow, 2).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Expense_code;
                                        ws.Cell(currentRow, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        //ws.Cell(currentRow, 2).Style.Alignment.Indent = 3;

                                        ws.Cell(currentRow, 3).Value = "#,##0.00";
                                        ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 4).Value = realignment.Realignment_amount;
                                        ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 6).Value = "";
                                        ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    currentRow++;
                                    total = (double)fundsource_amount.beginning_balance;
                                }

                                var fortheMonthTotal = (from oa in _MyDbContext.ObligationAmount
                                                        join o in _MyDbContext.Obligation
                                                        on oa.ObligationId equals o.Id
                                                        where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                        select new
                                                        {
                                                            amount = oa.Amount,
                                                            uacsId = oa.UacsId,
                                                            sourceId = o.FundSourceId,
                                                            date = o.Date,
                                                            status = o.status,
                                                            breakdown = fundSource.Breakdown,
                                                            original = fundSource.Original

                                                        });

                                var fortheMonthTotalWithBreakdown = (from oa in _MyDbContext.ObligationAmount
                                                                     join o in _MyDbContext.Obligation
                                                                     on oa.ObligationId equals o.Id
                                                                     join fa in _MyDbContext.FundSourceAmount
                                                                     on oa.UacsId equals fa.UacsId
                                                                     where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                                     select new
                                                                     {
                                                                         amount = oa.Amount,
                                                                         uacsId = fa.UacsId,
                                                                         sourceId = fa.FundSourceId,
                                                                         date = o.Date,
                                                                         status = o.status,
                                                                         breakdown = fundSource.Breakdown,
                                                                         original = fundSource.Original

                                                                     });

                                var funds_filterTotal = (from f in _MyDbContext.FundSources
                                                         join fa in _MyDbContext.FundSourceAmount
                                                         on f.FundSourceId equals fa.FundSourceId
                                                         select new
                                                         {
                                                             Id = f.FundSourceId
                                                         });

                                var asAtTotal = (from oa in _MyDbContext.ObligationAmount
                                                 join o in _MyDbContext.Obligation
                                                 on oa.ObligationId equals o.Id
                                                 where o.Date >= date1 && o.Date <= date2
                                                 select new
                                                 {
                                                     amount = oa.Amount,
                                                     sourceId = o.FundSourceId,
                                                     uacsId = oa.UacsId,
                                                     status = o.status
                                                 });


                                var asAtTotalWithBreakdown = (from oa in _MyDbContext.ObligationAmount
                                                              join o in _MyDbContext.Obligation
                                                              on oa.ObligationId equals o.Id
                                                              join fa in _MyDbContext.FundSourceAmount
                                                              on oa.UacsId equals fa.UacsId
                                                              where o.Date >= date1 && o.Date <= date2
                                                              select new
                                                              {
                                                                  amount = oa.Amount,
                                                                  sourceId = fa.FundSourceId,
                                                                  uacsId = fa.UacsId,
                                                                  status = o.status
                                                              });

                                ws.Cell(currentRow, 4).Style.Font.SetBold();
                                ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 4).Value = "SUBTOTAL " + fundSource.FundSourceTitle.ToUpper();

                                if (fundSource.Breakdown == true)
                                {
                                    ws.Cell(currentRow, 13).Style.Font.SetBold();
                                    ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 13).Value = "-";
                                }
                                else
                                {
                                    ws.Cell(currentRow, 13).Style.Font.SetBold();
                                    ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 13).Value = fundSource.Beginning_balance;
                                }


                                //REALIGNMENT SUBTOTAL
                                var realignment_subtotal = budget_allotment.FundSources.FirstOrDefault().FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault().FundsRealignment?.Sum(x => x.Realignment_amount);
                                if (realignment_subtotal == null)
                                {
                                    ws.Cell(currentRow, 17).Style.Font.SetBold();
                                    ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 17).Value = "0.00";
                                    ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                }
                                else
                                {
                                    ws.Cell(currentRow, 17).Style.Font.SetBold();
                                    ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 17).Value = realignment_subtotal;
                                }

                                ws.Cell(currentRow, 18).Style.Font.SetBold();
                                ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 18).Value = fundSource.FundTransferedTo.Sum(x => x.Amount);
                                ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                ws.Cell(currentRow, 19).Style.Font.SetBold();
                                ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 19).Value = fundSource.Beginning_balance - fundSource.FundTransferedTo.Sum(x => x.Amount);

                                if (fundSource.Original == true)
                                {
                                    ws.Cell(currentRow, 20).Style.Font.SetBold();
                                    ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 20).Value = fortheMonthTotalWithBreakdown.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount);
                                }
                                else
                                {
                                    ws.Cell(currentRow, 20).Style.Font.SetBold();
                                    ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 20).Value = fortheMonthTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount);
                                }


                                if (fundSource.Original == true)
                                {
                                    ws.Cell(currentRow, 21).Style.Font.SetBold();
                                    ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 21).Value = asAtTotalWithBreakdown.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount);
                                }
                                else
                                {
                                    //AS AT TOTAL
                                    ws.Cell(currentRow, 21).Style.Font.SetBold();
                                    ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 21).Value = asAtTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount);
                                }



                                var unobligatedTotal = fundSource.Beginning_balance - asAtTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId).Sum(x => x.amount);
                                var unobligatedTotalWithBreakdown = fundSource.Beginning_balance - asAtTotalWithBreakdown.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId).Sum(x => x.amount);

                                if (fundSource.Original == true)
                                {
                                    ws.Cell(currentRow, 22).Style.Font.SetBold();
                                    ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 22).Value = unobligatedTotalWithBreakdown;
                                }
                                else
                                {
                                    //SUBTOTAL UNOBLIGATED BALANCE OF ALLOTMENT
                                    ws.Cell(currentRow, 22).Style.Font.SetBold();
                                    ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 22).Value = unobligatedTotal;
                                }


                                //PERCENT OF UTILIZATION
                                ws.Cell(currentRow, 23).Style.Font.SetBold();
                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 23).Value = asAtTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount) / fundSource.Beginning_balance;
                                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                allotment_total += (double)fundSource.Beginning_balance;

                                currentRow++;




                            }

                            if (_MyDbContext.FundSources.Where(x => x.AppropriationId == 1 && x.AllotmentClassId == 2 && x.BudgetAllotmentId == id).Any())
                            {
                                ws.Cell(currentRow, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 2).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 3).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 4).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 5).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 6).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 7).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 8).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 9).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 10).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 11).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 12).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 13).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 14).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 15).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 16).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 17).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 18).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 19).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 22).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 23).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 11).Style.Font.SetBold();
                                ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 11).Value = "TOTAL CURRENT MOOE";

                                /*var fortheMonthTotalinTotalMOOE = (from oa in _MyDbContext.ObligationAmount
                                                                   join o in _MyDbContext.Obligation
                                                                   on oa.ObligationId equals o.Id
                                                                   join f in _MyDbContext.FundSources
                                                                   on o.FundSourceId equals f.FundSourceId
                                                                   where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                                   select new
                                                                   {
                                                                       amount = oa.Amount,
                                                                       uacsId = oa.UacsId,
                                                                       sourceId = o.FundSourceId,
                                                                       date = o.Date,
                                                                       status = o.status,
                                                                       allotmentClassID = f.AllotmentClassId
                                                                   });

                                var asAtTotalinTotalMOOE = (from oa in _MyDbContext.ObligationAmount
                                                            join o in _MyDbContext.Obligation
                                                            on oa.ObligationId equals o.Id
                                                            join f in _MyDbContext.FundSources
                                                            on o.FundSourceId equals f.FundSourceId
                                                            where o.Date >= date1 && o.Date <= date2
                                                            select new
                                                            {
                                                                amount = oa.Amount,
                                                                sourceId = o.FundSourceId,
                                                                uacsId = oa.UacsId,
                                                                status = o.status,
                                                                allotmentClassID = f.AllotmentClassId
                                                            });*/

                                var MooeTotal = _MyDbContext.FundSources.Where(x => x.AllotmentClassId == 2 && x.AppropriationId == 1 && x.Breakdown == false).Sum(x => x.Beginning_balance);
                                var allotment_totalMOOE = +MooeTotal;

                                ws.Cell(currentRow, 13).Style.Font.SetBold();
                                ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 13).Value = MooeTotal;

                                //REALIGNMENT TOTAL
                                var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                                if (realignment_total == null)
                                {
                                    ws.Cell(currentRow, 17).Style.Font.SetBold();
                                    ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 17).Value = 0.00;
                                }
                                else
                                {
                                    ws.Cell(currentRow, 17).Style.Font.SetBold();
                                    ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 17).Value = realignment_total;
                                }

                                //TOTAL TRANSFER TO
                                ws.Cell(currentRow, 18).Style.Font.SetBold();
                                ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 18).Value = _MyDbContext.FundTransferedTo.Where(x => x.FundSource.AllotmentClassId == 2 && x.FundSource.AppropriationId == 1 && x.FundSource.BudgetAllotmentId == id).Sum(x => x.Amount);
                                ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                //TOTAL - TOTAL AFTER REALIGNMENT
                                ws.Cell(currentRow, 19).Style.Font.SetBold();
                                ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 19).Value = MooeTotal - _MyDbContext.FundTransferedTo.Where(x => x.FundSource.AllotmentClassId == 2 && x.FundSource.AppropriationId == 1 && x.FundSource.BudgetAllotmentId == id).Sum(x => x.Amount);

                                //TOTAL - FOR THE MONTH
                                ws.Cell(currentRow, 20).Style.Font.SetBold();
                                ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.status == "activated").Sum(x => x.amount);

                                //TOTAL - AS AT
                                ws.Cell(currentRow, 21).Style.Font.SetBold();
                                ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 21).Value = asAtTotalinTotalMOOE.Where(x => x.allotmentClassID == 2 && x.status == "activated").Sum(x => x.amount);

                                //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT
                                var unobligatedTotalinTotalMOOE = MooeTotal - asAtTotalinTotalMOOE.Where(x => x.allotmentClassID == 2).Sum(x => x.amount);
                                ws.Cell(currentRow, 22).Style.Font.SetBold();
                                ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalMOOE;


                                //PERCENT OF UTILIZATION
                                if (MooeTotal == 0 && asAtTotalinTotalMOOE.Where(x => x.allotmentClassID == 2).Sum(x => x.amount) == 0)
                                {
                                    ws.Cell(currentRow, 23).Style.Font.SetBold();
                                    ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 23).Value = "";
                                    ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                    ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    currentRow++;
                                }
                                else
                                {
                                    var totalPercentMOOE = asAtTotalinTotalMOOE.Where(x => x.allotmentClassID == 2).Sum(x => x.amount) / MooeTotal;
                                    ws.Cell(currentRow, 23).Style.Font.SetBold();
                                    ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 23).Value = totalPercentMOOE;
                                    ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                    ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    currentRow++;
                                }
                                //END MOOE LOOP
                            }

                        }

                        //START CURRENT MOOE SAA WITH GROUPINGS
                        if (budget_allotment.SubAllotment.Where(x => x.AppropriationId == 1 && x.AllotmentClassId == 2).Any())
                        {
                            ws.Cell(currentRow, 1).Style.Font.SetBold();
                            ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 1).Value = "CURRENT MOOE SUB-ALLOTMENT";
                            currentRow++;
                            //START CURRENT MOOE SAA WITH GROUPINGS
                            foreach (var groups in budget_allotment.SubAllotment.Where(x => x.AllotmentClassId == 2 && x.AppropriationId == 1 && x.BudgetAllotmentId == id && !x.Suballotment_title.Contains("SARO")).OrderBy(x => x.Suballotment_title).GroupBy(x => new { x.prexcId, x.AllotmentClassId }).ToList())
                            {
                                foreach (var subAllotment in groups)
                                {
                                    ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 1).Value = _MyDbContext.Prexc.FirstOrDefault(x => x.Id == subAllotment.prexcId)?.pap_code1;
                                    ws.Cell(currentRow, 1).Style.NumberFormat.Format = "00";
                                    ws.Cell(currentRow, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                    ws.Range(ws.Cell(currentRow, 1), ws.Cell(currentRow, 11)).Merge();
                                    currentRow++;

                                    ws.Cell(currentRow, 1).Style.Font.SetBold();
                                    ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 1).Value = subAllotment.FundId.ToString();
                                    ws.Cell(currentRow, 1).Value = subAllotment.Suballotment_title?.ToUpper().ToString();

                                    ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 11).Value = subAllotment.Date.ToShortDateString();
                                    ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                    currentRow++;

                                    ws.Cell(currentRow, 2).Style.Font.SetItalic();
                                    ws.Cell(currentRow, 2).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 2).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 2).Value = subAllotment.prexc.pap_initial?.ToUpper().ToString() + "-" + subAllotment.Description?.ToString();
                                    ws.Range(ws.Cell(currentRow, 2), ws.Cell(currentRow, 18)).Merge();
                                    currentRow++;

                                    foreach (var suballotment_amount in subAllotment.SubAllotmentAmounts.Where(x => x.status == "activated"))
                                    {
                                        var uacsID = from Suballotment in _MyDbContext.Suballotment_amount
                                                     join u in _MyDbContext.Uacs
                                                     on Suballotment.UacsId equals u.UacsId
                                                     select Suballotment.UacsId;


                                        var fortheMonth = (from oa in _MyDbContext.ObligationAmount
                                                           join o in _MyDbContext.Obligation
                                                           on oa.ObligationId equals o.Id
                                                           join f in _MyDbContext.FundSources
                                                           on o.FundSourceId equals f.FundSourceId
                                                           where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                           select new
                                                           {
                                                               amount = oa.Amount,
                                                               uacsId = oa.UacsId,
                                                               date = o.Date,
                                                               sourceId = o.FundSourceId,
                                                               sourceType = o.source_type,
                                                               status = o.status,
                                                               allotmentClassID = f.AllotmentClassId

                                                           });

                                        var fundsourceID = (from Suballotment in _MyDbContext.SubAllotment
                                                            join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                            on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                            where Suballotment.SubAllotmentId == Suballotment_amount.SubAllotmentId
                                                            select new
                                                            {
                                                                saId = Suballotment.SubAllotmentId
                                                            });

                                        var fundsourceamountID = (from Suballotment in _MyDbContext.SubAllotment
                                                                  join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                                  on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                                  where Suballotment.SubAllotmentId == Suballotment_amount.SubAllotmentId
                                                                  select new
                                                                  {
                                                                      saAmountId = Suballotment_amount.SubAllotmentId
                                                                  });

                                        var asAt = (from oa in _MyDbContext.ObligationAmount
                                                    join o in _MyDbContext.Obligation
                                                    on oa.ObligationId equals o.Id
                                                    where o.Date >= date1 && o.Date <= date2
                                                    select new
                                                    {
                                                        amount = oa.Amount,
                                                        uacsId = oa.UacsId,
                                                        sourceId = o.SubAllotmentId,
                                                        sourceType = o.source_type,
                                                        status = o.status
                                                    });

                                        var unobligated_amount = suballotment_amount.beginning_balance - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);

                                        total = 0;
                                        var afterrealignment_amount = suballotment_amount.beginning_balance - suballotment_amount.realignment_amount;

                                        ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == suballotment_amount.UacsId)?.Account_title.ToUpper().ToString();
                                        ws.Cell(currentRow, 4).Style.Alignment.Indent = 3;

                                        ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == suballotment_amount.UacsId)?.Expense_code;
                                        ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);

                                        if (suballotment_amount.beginning_balance != 0)
                                        {
                                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 14).Value = suballotment_amount.beginning_balance;
                                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 14).Value = "-";
                                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        //TRANSFERED TO DATA FOR SAA
                                        var transferTo = _MyDbContext.Uacs.Where(c => !_MyDbContext.SubTransferedTo.Select(b => b.SubAllotmentId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                        foreach (var transferedTo in _MyDbContext.SubTransferedTo.Where(x => x.SubAllotmentAmountId == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId/* && x.Id == transferTo*/).ToList())
                                        {
                                            currentRow++;
                                            ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                            ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Account_title.ToUpper().ToString();

                                            ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                            ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            ws.Cell(currentRow, 13).Value = "-";

                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            ws.Cell(currentRow, 19).Value = "(" + transferedTo.Amount.ToString("N", new CultureInfo("en-US")) + ")";

                                            currentRow++;
                                            ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            //ws.Cell(currentRow, 4).Style.Alignment.Indent = 3;
                                            ws.Cell(currentRow, 4).Style.Font.SetItalic();
                                            ws.Cell(currentRow, 4).Value = transferedTo.Particulars;

                                            ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                            ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            ws.Cell(currentRow, 13).Value = "-";

                                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                            ws.Cell(currentRow, 18).Value = "(" + transferedTo.Amount.ToString("N", new CultureInfo("en-US")) + ")";
                                        }
                                        //REALIGNMENT SAA
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                        {
                                            //REALIGNMENT SAA AMOUNT
                                            ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 17).Value = "(" + suballotment_amount.realignment_amount + ")";
                                            ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                        {
                                            //REALIGNMENT AMOUNT
                                            ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 17).Value = _MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId).FirstOrDefault().Realignment_amount;
                                            ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            //REALIGNMENT AMOUNT
                                            ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 17).Value = "-";
                                            ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }

                                        ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 18).Value = "-";
                                        ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                        var SAAMOOEafterrealignment_amount = suballotment_amount.beginning_balance - suballotment_amount.realignment_amount;
                                        var SAAMOOEafterrealignment_amountadd = suballotment_amount.beginning_balance + _MyDbContext.SubAllotment_Realignment.FirstOrDefault(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId)?.Realignment_amount;
                                        //TOTAL ADJUSTED ALLOTMENT
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any() || afterrealignment_amount != 0)
                                        {
                                            //TOTAL ADJUSTED ALLOTMENT SAA
                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Value = SAAMOOEafterrealignment_amount;
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                        {
                                            //TOTAL ADJUSTED ALLOTMENT SAA
                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Value = SAAMOOEafterrealignment_amountadd;
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (SAAMOOEafterrealignment_amount == 0 || SAAMOOEafterrealignment_amountadd == 0)
                                        {
                                            //TOTAL ADJUSTED ALLOTMENT
                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Value = suballotment_amount.beginning_balance;
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (suballotment_amount.beginning_balance == 0)
                                        {
                                            //TOTAL ADJUSTED ALLOTMENT
                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Value = "-";
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }


                                        if (fortheMonth.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount) != 0)
                                        {
                                            //OBLIGATED (FOR THE MONTH)
                                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 20).Value = fortheMonth.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            //OBLIGATED (FOR THE MONTH)
                                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 20).Value = "-";
                                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }

                                        if (asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount) != 0)
                                        {
                                            //OBLIGATED (AS AT)
                                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#F2DCDB");
                                            ws.Cell(currentRow, 21).Value = asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            //OBLIGATED (AS AT)
                                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#F2DCDB");
                                            ws.Cell(currentRow, 21).Value = "-";
                                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }

                                        var SAAMOOEaddunobligated = SAAMOOEafterrealignment_amount - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                        var SAAMOOEdeductunobligated = SAAMOOEafterrealignment_amountadd - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any() || SAAMOOEaddunobligated != 0)
                                        {
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = SAAMOOEaddunobligated;
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                        {
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = SAAMOOEdeductunobligated;
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (SAAMOOEaddunobligated == 0 || SAAMOOEdeductunobligated == 0)
                                        {
                                            //UNOBLIGATED BALANCE OF ALLOTMENT
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = unobligated_amount;
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (unobligated_amount == 0)
                                        {
                                            //UNOBLIGATED BALANCE OF ALLOTMENT
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = "-";
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }

                                        //PERCENT OF UTILIZATION
                                        if (asAt.Where(x => x.uacsId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().UacsId).Sum(x => x.amount) == 0 || afterrealignment_amount == 0)
                                        {
                                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 23).Value = "-";
                                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 23).Value = asAt.Where(x => x.uacsId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().UacsId).Sum(x => x.amount) / afterrealignment_amount;
                                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }


                                        //REALIGNMENT DATA SUB ALLOTMENT
                                        var data = _MyDbContext.Uacs.Where(c => !_MyDbContext.Suballotment_amount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                        foreach (var realignment in _MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId && x.Realignment_to == data))
                                        {
                                            currentRow++;
                                            Debug.WriteLine($"fsaid: {suballotment_amount.SubAllotmentAmountId}\nfundsrc_id {suballotment_amount}");
                                            //ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundSourceAmount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().Account_title.ToUpper().ToString();
                                            ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Account_title.ToUpper().ToString();
                                            ws.Cell(currentRow, 1).Style.Alignment.Indent = 3;

                                            ws.Cell(currentRow, 2).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Expense_code;
                                            ws.Cell(currentRow, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                            //ws.Cell(currentRow, 2).Style.Alignment.Indent = 3;

                                            ws.Cell(currentRow, 3).Value = "#,##0.00";
                                            ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                            //REALIGNMENT AMOUNT
                                            ws.Cell(currentRow, 4).Value = realignment.Realignment_amount;
                                            ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                            //REALIGNMENT AMOUNT
                                            ws.Cell(currentRow, 6).Value = "";
                                            ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        currentRow++;
                                        total = (double)suballotment_amount.beginning_balance;
                                    }

                                    //SUB TOTAL

                                    var fortheMonthTotal = (from oa in _MyDbContext.ObligationAmount
                                                            join o in _MyDbContext.Obligation
                                                            on oa.ObligationId equals o.Id
                                                            where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                            select new
                                                            {
                                                                amount = oa.Amount,
                                                                uacsId = oa.UacsId,
                                                                sourceId = o.SubAllotmentId,
                                                                sourceType = o.source_type,
                                                                date = o.Date,
                                                                status = o.status
                                                            });

                                    var funds_filterTotal = (from Suballotment in _MyDbContext.SubAllotment
                                                             join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                             on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                             select new
                                                             {
                                                                 Id = Suballotment.SubAllotmentId
                                                             });

                                    var asAtTotal = (from oa in _MyDbContext.ObligationAmount
                                                     join o in _MyDbContext.Obligation
                                                     on oa.ObligationId equals o.Id
                                                     where o.Date >= date1 && o.Date <= date2
                                                     select new
                                                     {
                                                         amount = oa.Amount,
                                                         sourceId = o.SubAllotmentId,
                                                         uacsId = oa.UacsId,
                                                         sourceType = o.source_type,
                                                         status = o.status
                                                     });


                                    ws.Cell(currentRow, 4).Style.Font.SetBold();
                                    ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 4).Value = "SUBTOTAL" + " " + subAllotment.Suballotment_title?.ToUpper();


                                    ws.Cell(currentRow, 14).Style.Font.SetBold();
                                    ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 14).Value = subAllotment.Beginning_balance;

                                    //REALIGNMENT SUBTOTAL
                                    var SAAMOOErealignment_subtotal = budget_allotment.SubAllotment.FirstOrDefault().SubAllotmentRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.SubAllotment.FirstOrDefault().SubAllotmentRealignment?.Sum(x => x.Realignment_amount);
                                    var SAAMOOEsub6 = subAllotment.Beginning_balance - subAllotment.SubAllotmentRealignment?.Sum(x => x.Realignment_amount) + subAllotment.SubAllotmentRealignment?.Sum(x => x.Realignment_amount);
                                    var SAAMOOEsub9 = SAAMOOEsub6 - asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                    if (SAAMOOErealignment_subtotal == null)
                                    {
                                        ws.Cell(currentRow, 17).Style.Font.SetBold();
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Value = "0.00";
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 17).Style.Font.SetBold();
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 17).Value = SAAMOOErealignment_subtotal;
                                    }

                                    ws.Cell(currentRow, 18).Style.Font.SetBold();
                                    ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 18).Value = subAllotment.SubTransferedTo.Sum(x => x.Amount);
                                    ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    ws.Cell(currentRow, 19).Style.Font.SetBold();
                                    ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 19).Value = subAllotment.Beginning_balance - subAllotment.SubTransferedTo.Sum(x => x.Amount);

                                    ws.Cell(currentRow, 20).Style.Font.SetBold();
                                    ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 20).Value = fortheMonthTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);

                                    //AS AT TOTAL
                                    ws.Cell(currentRow, 21).Style.Font.SetBold();
                                    ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 21).Value = asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);


                                    var unobligatedTotal = subAllotment.Beginning_balance - asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                    //SUBTOTAL UNOBLIGATED BALANCE OF ALLOTMENT
                                    ws.Cell(currentRow, 22).Style.Font.SetBold();
                                    ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 22).Value = unobligatedTotal;

                                    //PERCENT OF UTILIZATION
                                    ws.Cell(currentRow, 23).Style.Font.SetBold();
                                    ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 23).Value = asAtTotal.Where(x => x.sourceId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount) / budget_allotment.FundSources.FirstOrDefault().Beginning_balance;
                                    ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                    ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    allotment_totalSaa += (double)subAllotment.Beginning_balance;

                                    currentRow++;

                                }

                                //return Json(groups.FirstOrDefault().prexc.pap_initial.ToUpper());
                                //TOTAL PER GROUP
                                ws.Cell(currentRow, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 2).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 3).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 4).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 5).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 6).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 7).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 8).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 9).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 10).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 11).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 12).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 13).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 14).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 15).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 16).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 17).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 18).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 19).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 22).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 23).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 11).Style.Font.SetBold();
                                ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 11).Value = "SUB-TOTAL" + " " + groups.FirstOrDefault().prexc?.pap_initial?.ToUpper();

                                ws.Cell(currentRow, 14).Style.Font.SetBold();
                                ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 14).Value = groups.Sum(x => x.Beginning_balance);
                                currentRow++;
                            }

                            var MooeTotalSaa = _MyDbContext.SubAllotment.Where(x => x.AllotmentClassId == 2 && x.AppropriationId == 2 && x.BudgetAllotmentId == id).Sum(x => x.Beginning_balance);
                            var unobligatedTotalinTotalMOOESaa = MooeTotalSaa - asAtTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.sourceType == "sub_allotment" && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount);
                            var totalPercentMOOESaa = (double)asAtTotalinTotalPS.Where(x => x.allotmentClassID == 3 && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount) / allotment_total;

                            //TOTAL CURRENT MOOE SUB-ALLOTMENT
                            ws.Cell(currentRow, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 2).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 3).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 4).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 5).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 6).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 7).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 8).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 9).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 10).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 11).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 12).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 13).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 14).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 15).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 16).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 17).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 18).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 19).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 22).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 23).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                            ws.Cell(currentRow, 11).Style.Font.SetBold();
                            ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 11).Value = "TOTAL CURRENT MOOE SUB-ALLOTMENT";

                            ws.Cell(currentRow, 14).Style.Font.SetBold();
                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 14).Value = budget_allotment.SubAllotment.Where(x => x.AppropriationId == 1 && x.AllotmentClassId == 2 && x.BudgetAllotmentId == id && !x.Suballotment_title.Contains("SARO") && x.prexcId == x.prexcId).Sum(x => x.Beginning_balance);

                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_total;
                            }


                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = "0.00";
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = MooeTotalSaa;

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.sourceType == "sub_allotment" && x.status == "activated").Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.sourceType == "sub_allotment" && x.status == "activated").Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT

                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalMOOESaa;

                            //PERCENT OF UTILIZATION
                            ws.Cell(currentRow, 23).Style.Font.SetBold();
                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 23).Value = totalPercentMOOESaa;
                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            currentRow++;
                            currentRow++;
                            //END SAA MOOE LOOP
                        }

                        //START SAA MOOE LOOP
                        /*if (budget_allotment.SubAllotment.Where(x => x.AppropriationId == 1 && x.AllotmentClassId == 2).Any())
                        {
                            ws.Cell(currentRow, 1).Style.Font.SetBold();
                            ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 1).Value = "CURRENT MOOE SUB-ALLOTMENT";
                            currentRow++;

                            foreach (SubAllotment subAllotment in budget_allotment.SubAllotment.Where(x => x.AllotmentClassId == 2 && x.AppropriationId == 1).ToList())
                            {
                                ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 1).Value = _MyDbContext.Prexc.FirstOrDefault(x => x.Id == subAllotment.prexcId)?.pap_code1;
                                ws.Cell(currentRow, 1).Style.NumberFormat.Format = "00";
                                ws.Cell(currentRow, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                ws.Range(ws.Cell(currentRow, 1), ws.Cell(currentRow, 11)).Merge();
                                currentRow++;

                                ws.Cell(currentRow, 1).Style.Font.SetBold();
                                ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 1).Value = subAllotment.FundId.ToString();
                                ws.Cell(currentRow, 1).Value = subAllotment.Suballotment_title?.ToUpper().ToString();

                                ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 11).Value = subAllotment.Date.ToShortDateString();
                                ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);

                                currentRow++;

                                ws.Cell(currentRow, 2).Style.Font.SetItalic();
                                ws.Cell(currentRow, 2).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 2).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 2).Value = subAllotment.Description.ToString();
                                ws.Range(ws.Cell(currentRow, 2), ws.Cell(currentRow, 18)).Merge();
                                currentRow++;

                                foreach (Suballotment_amount suballotment_amount in subAllotment.SubAllotmentAmounts.Where(x => x.status == "activated"))
                                {
                                    var uacsID = from Suballotment in _MyDbContext.Suballotment_amount
                                                 join u in _MyDbContext.Uacs
                                                 on Suballotment.UacsId equals u.UacsId
                                                 select Suballotment.UacsId;


                                    var fortheMonth = (from oa in _MyDbContext.ObligationAmount
                                                       join o in _MyDbContext.Obligation
                                                       on oa.ObligationId equals o.Id
                                                       join f in _MyDbContext.FundSources
                                                       on o.FundSourceId equals f.FundSourceId
                                                       where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                       select new
                                                       {
                                                           amount = oa.Amount,
                                                           uacsId = oa.UacsId,
                                                           date = o.Date,
                                                           sourceId = o.FundSourceId,
                                                           sourceType = o.source_type,
                                                           status = o.status,
                                                           allotmentClassID = f.AllotmentClassId

                                                       });

                                    var fundsourceID = (from Suballotment in _MyDbContext.SubAllotment
                                                        join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                        on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                        where Suballotment.SubAllotmentId == Suballotment_amount.SubAllotmentId
                                                        select new
                                                        {
                                                            saId = Suballotment.SubAllotmentId
                                                        });

                                    var fundsourceamountID = (from Suballotment in _MyDbContext.SubAllotment
                                                              join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                              on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                              where Suballotment.SubAllotmentId == Suballotment_amount.SubAllotmentId
                                                              select new
                                                              {
                                                                  saAmountId = Suballotment_amount.SubAllotmentId
                                                              });

                                    var asAt = (from oa in _MyDbContext.ObligationAmount
                                                join o in _MyDbContext.Obligation
                                                on oa.ObligationId equals o.Id
                                                where o.Date >= date1 && o.Date <= date2
                                                select new
                                                {
                                                    amount = oa.Amount,
                                                    uacsId = oa.UacsId,
                                                    sourceId = o.SubAllotmentId,
                                                    sourceType = o.source_type,
                                                    status = o.status
                                                });

                                    var unobligated_amount = suballotment_amount.beginning_balance - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);

                                    total = 0;
                                    var afterrealignment_amount = suballotment_amount.beginning_balance - suballotment_amount.realignment_amount;

                                    ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == suballotment_amount.UacsId)?.Account_title.ToUpper().ToString();
                                    ws.Cell(currentRow, 4).Style.Alignment.Indent = 3;

                                    ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == suballotment_amount.UacsId)?.Expense_code;
                                    ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);

                                    if (suballotment_amount.beginning_balance != 0)
                                    {
                                        ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 14).Value = suballotment_amount.beginning_balance;
                                        ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 14).Value = "-";
                                        ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    //TRANSFERED TO DATA FOR SAA
                                    var transferTo = _MyDbContext.Uacs.Where(c => !_MyDbContext.SubTransferedTo.Select(b => b.SubAllotmentId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                    foreach (var transferedTo in _MyDbContext.SubTransferedTo.Where(x => x.SubAllotmentAmountId == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId*//* && x.Id == transferTo*//*).ToList())
                                    {
                                        currentRow++;
                                        ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                        ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Account_title.ToUpper().ToString();

                                        ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                        ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 13).Value = "-";

                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 19).Value = "(" + transferedTo.Amount.ToString("N", new CultureInfo("en-US")) + ")";

                                        currentRow++;
                                        ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        //ws.Cell(currentRow, 4).Style.Alignment.Indent = 3;
                                        ws.Cell(currentRow, 4).Style.Font.SetItalic();
                                        ws.Cell(currentRow, 4).Value = transferedTo.Particulars;

                                        ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                        ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 13).Value = "-";

                                        ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        ws.Cell(currentRow, 18).Value = "(" + transferedTo.Amount.ToString("N", new CultureInfo("en-US")) + ")";
                                    }
                                    //REALIGNMENT SAA
                                    if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                    {
                                        //REALIGNMENT SAA AMOUNT
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Value = "(" + suballotment_amount.realignment_amount + ")";
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                    {
                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Value = _MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId).FirstOrDefault().Realignment_amount;
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Value = "-";
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 18).Value = "-";
                                    ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    var SAAMOOEafterrealignment_amount = suballotment_amount.beginning_balance - suballotment_amount.realignment_amount;
                                    var SAAMOOEafterrealignment_amountadd = suballotment_amount.beginning_balance + _MyDbContext.SubAllotment_Realignment.FirstOrDefault(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId)?.Realignment_amount;
                                    //TOTAL ADJUSTED ALLOTMENT
                                    if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any() || afterrealignment_amount != 0)
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT SAA
                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Value = SAAMOOEafterrealignment_amount;
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT SAA
                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Value = SAAMOOEafterrealignment_amountadd;
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (SAAMOOEafterrealignment_amount == 0 || SAAMOOEafterrealignment_amountadd == 0)
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT
                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Value = suballotment_amount.beginning_balance;
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (suballotment_amount.beginning_balance == 0)
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT
                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Value = "-";
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }


                                    if (fortheMonth.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount) != 0)
                                    {
                                        //OBLIGATED (FOR THE MONTH)
                                        ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 20).Value = fortheMonth.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                        ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        //OBLIGATED (FOR THE MONTH)
                                        ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 20).Value = "-";
                                        ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    if (asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount) != 0)
                                    {
                                        //OBLIGATED (AS AT)
                                        ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#F2DCDB");
                                        ws.Cell(currentRow, 21).Value = asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                        ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        //OBLIGATED (AS AT)
                                        ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#F2DCDB");
                                        ws.Cell(currentRow, 21).Value = "-";
                                        ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    var SAAMOOEaddunobligated = SAAMOOEafterrealignment_amount - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                    var SAAMOOEdeductunobligated = SAAMOOEafterrealignment_amountadd - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                    if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any() || SAAMOOEaddunobligated != 0)
                                    {
                                        ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 22).Value = SAAMOOEaddunobligated;
                                        ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                    {
                                        ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 22).Value = SAAMOOEdeductunobligated;
                                        ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (SAAMOOEaddunobligated == 0 || SAAMOOEdeductunobligated == 0)
                                    {
                                        //UNOBLIGATED BALANCE OF ALLOTMENT
                                        ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 22).Value = unobligated_amount;
                                        ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (unobligated_amount == 0)
                                    {
                                        //UNOBLIGATED BALANCE OF ALLOTMENT
                                        ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 22).Value = "-";
                                        ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    //PERCENT OF UTILIZATION
                                    if (asAt.Where(x => x.uacsId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().UacsId).Sum(x => x.amount) == 0 || afterrealignment_amount == 0)
                                    {
                                        ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 23).Value = "-";
                                        ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                        ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 23).Value = asAt.Where(x => x.uacsId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().UacsId).Sum(x => x.amount) / afterrealignment_amount;
                                        ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                        ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }


                                    //REALIGNMENT DATA SUB ALLOTMENT
                                    var data = _MyDbContext.Uacs.Where(c => !_MyDbContext.Suballotment_amount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                    foreach (var realignment in _MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId && x.Realignment_to == data))
                                    {
                                        currentRow++;
                                        Debug.WriteLine($"fsaid: {suballotment_amount.SubAllotmentAmountId}\nfundsrc_id {suballotment_amount}");
                                        //ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundSourceAmount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().Account_title.ToUpper().ToString();
                                        ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Account_title.ToUpper().ToString();
                                        ws.Cell(currentRow, 1).Style.Alignment.Indent = 3;

                                        ws.Cell(currentRow, 2).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Expense_code;
                                        ws.Cell(currentRow, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        //ws.Cell(currentRow, 2).Style.Alignment.Indent = 3;

                                        ws.Cell(currentRow, 3).Value = "#,##0.00";
                                        ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 4).Value = realignment.Realignment_amount;
                                        ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 6).Value = "";
                                        ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    currentRow++;
                                    total = (double)suballotment_amount.beginning_balance;
                                }

                                var fortheMonthTotal = (from oa in _MyDbContext.ObligationAmount
                                                        join o in _MyDbContext.Obligation
                                                        on oa.ObligationId equals o.Id
                                                        where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                        select new
                                                        {
                                                            amount = oa.Amount,
                                                            uacsId = oa.UacsId,
                                                            sourceId = o.SubAllotmentId,
                                                            sourceType = o.source_type,
                                                            date = o.Date,
                                                            status = o.status
                                                        });

                                var funds_filterTotal = (from Suballotment in _MyDbContext.SubAllotment
                                                         join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                         on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                         select new
                                                         {
                                                             Id = Suballotment.SubAllotmentId
                                                         });

                                var asAtTotal = (from oa in _MyDbContext.ObligationAmount
                                                 join o in _MyDbContext.Obligation
                                                 on oa.ObligationId equals o.Id
                                                 where o.Date >= date1 && o.Date <= date2
                                                 select new
                                                 {
                                                     amount = oa.Amount,
                                                     sourceId = o.SubAllotmentId,
                                                     uacsId = oa.UacsId,
                                                     sourceType = o.source_type,
                                                     status = o.status
                                                 });


                                ws.Cell(currentRow, 4).Style.Font.SetBold();
                                ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 4).Value = "SUBTOTAL" + " " + subAllotment.Suballotment_title?.ToUpper();


                                ws.Cell(currentRow, 14).Style.Font.SetBold();
                                ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 14).Value = subAllotment.Beginning_balance;

                                //REALIGNMENT SUBTOTAL
                                var SAAMOOErealignment_subtotal = budget_allotment.SubAllotment.FirstOrDefault().SubAllotmentRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.SubAllotment.FirstOrDefault().SubAllotmentRealignment?.Sum(x => x.Realignment_amount);
                                var SAAMOOEsub6 = subAllotment.Beginning_balance - subAllotment.SubAllotmentRealignment?.Sum(x => x.Realignment_amount) + subAllotment.SubAllotmentRealignment?.Sum(x => x.Realignment_amount);
                                var SAAMOOEsub9 = SAAMOOEsub6 - asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                if (SAAMOOErealignment_subtotal == null)
                                {
                                    ws.Cell(currentRow, 17).Style.Font.SetBold();
                                    ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 17).Value = "0.00";
                                    ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                }
                                else
                                {
                                    ws.Cell(currentRow, 17).Style.Font.SetBold();
                                    ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 17).Value = SAAMOOErealignment_subtotal;
                                }

                                ws.Cell(currentRow, 18).Style.Font.SetBold();
                                ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 18).Value = subAllotment.SubTransferedTo.Sum(x => x.Amount);
                                ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                ws.Cell(currentRow, 19).Style.Font.SetBold();
                                ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 19).Value = subAllotment.Beginning_balance - subAllotment.SubTransferedTo.Sum(x => x.Amount);

                                ws.Cell(currentRow, 20).Style.Font.SetBold();
                                ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 20).Value = fortheMonthTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);

                                //AS AT TOTAL
                                ws.Cell(currentRow, 21).Style.Font.SetBold();
                                ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 21).Value = asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);


                                var unobligatedTotal = subAllotment.Beginning_balance - asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                //SUBTOTAL UNOBLIGATED BALANCE OF ALLOTMENT
                                ws.Cell(currentRow, 22).Style.Font.SetBold();
                                ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 22).Value = unobligatedTotal;

                                //PERCENT OF UTILIZATION
                                ws.Cell(currentRow, 23).Style.Font.SetBold();
                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 23).Value = asAtTotal.Where(x => x.sourceId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount) / budget_allotment.FundSources.FirstOrDefault().Beginning_balance;
                                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                allotment_totalSaa += (double)subAllotment.Beginning_balance;

                                currentRow++;

                            }

                            var MooeTotalSaa = _MyDbContext.SubAllotment.Where(x => x.AllotmentClassId == 2 && x.AppropriationId == 2 && x.BudgetAllotmentId == id).Sum(x => x.Beginning_balance);
                            var unobligatedTotalinTotalMOOESaa = MooeTotalSaa - asAtTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.sourceType == "sub_allotment" && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount);
                            var totalPercentMOOESaa = (double)asAtTotalinTotalPS.Where(x => x.allotmentClassID == 3 && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount) / allotment_total;


                            ws.Cell(currentRow, 11).Style.Font.SetBold();
                            ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 11).Value = "TOTAL MOOE SAA";

                            ws.Cell(currentRow, 14).Style.Font.SetBold();
                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 14).Value = MooeTotalSaa;

                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_total;
                            }


                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = "0.00";
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = MooeTotalSaa;

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.sourceType == "sub_allotment" && x.status == "activated").Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.sourceType == "sub_allotment" && x.status == "activated").Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT

                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalMOOESaa;

                            //PERCENT OF UTILIZATION
                            ws.Cell(currentRow, 23).Style.Font.SetBold();
                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 23).Value = totalPercentMOOESaa;
                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            currentRow++;
                            //END SAA MOOE LOOP
                        }*/
                        //
                        //START CO LOOP
                        if (_MyDbContext.FundSources.Where(x => x.AllotmentClassId == 3).Any())
                        {
                            ws.Cell(currentRow, 1).Style.Font.SetBold();
                            ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 1).Style.Font.FontName = "TAHOMA";
                            ws.Cell(currentRow, 1).Value = "Capital Outlay";
                            currentRow++;

                            foreach (FundSource fundSource in budget_allotment.FundSources.Where(x => x.AllotmentClassId == 3 && x.AppropriationId == 1))
                            {
                                ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 1).Value = fundSource.Prexc.pap_code1;
                                ws.Cell(currentRow, 1).Style.NumberFormat.Format = "00";
                                ws.Cell(currentRow, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                ws.Range(ws.Cell(currentRow, 1), ws.Cell(currentRow, 11)).Merge();
                                currentRow++;

                                ws.Cell(currentRow, 1).Style.Font.SetBold();
                                ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 1).Value = fundSource.FundSourceTitle.ToUpper().ToString();
                                currentRow++;

                                foreach (FundSourceAmount fundsource_amount in fundSource.FundSourceAmounts.Where(x => x.status == "activated"))
                                {
                                    var uacsID = from fa in _MyDbContext.FundSourceAmount
                                                 join u in _MyDbContext.Uacs
                                                 on fa.UacsId equals u.UacsId
                                                 select fa.UacsId;


                                    var fortheMonth = (from oa in _MyDbContext.ObligationAmount
                                                       join o in _MyDbContext.Obligation
                                                       on oa.ObligationId equals o.Id
                                                       where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                       select new
                                                       {
                                                           amount = oa.Amount,
                                                           uacsId = oa.UacsId,
                                                           date = o.Date,
                                                           sourceId = o.FundSourceId,
                                                           status = o.status

                                                       });

                                    var fundsourceID = (from f in _MyDbContext.FundSources
                                                        join fa in _MyDbContext.FundSourceAmount
                                                        on f.FundSourceId equals fa.FundSourceId
                                                        where f.FundSourceId == fa.FundSourceId
                                                        select new
                                                        {
                                                            faId = f.FundSourceId
                                                        });

                                    var fundsourceamountID = (from f in _MyDbContext.FundSources
                                                              join fa in _MyDbContext.FundSourceAmount
                                                              on f.FundSourceId equals fa.FundSourceId
                                                              where f.FundSourceId == fa.FundSourceId
                                                              select new
                                                              {
                                                                  faAmountId = fa.FundSourceId
                                                              });




                                    var asAt = (from oa in _MyDbContext.ObligationAmount
                                                join o in _MyDbContext.Obligation
                                                on oa.ObligationId equals o.Id
                                                where o.Date >= date1 && o.Date <= date2
                                                select new
                                                {
                                                    amount = oa.Amount,
                                                    uacsId = oa.UacsId,
                                                    sourceId = o.FundSourceId,
                                                    status = o.status
                                                });

                                    var unobligated_amount = fundsource_amount.beginning_balance - asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);


                                    total = 0;
                                    var afterrealignment_amount = fundsource_amount.beginning_balance - fundsource_amount.realignment_amount;

                                    ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 4).Value = fundsource_amount.Uacs.Account_title.ToUpper().ToString();
                                    ws.Cell(currentRow, 4).Style.Alignment.Indent = 3;

                                    ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 12).Value = fundsource_amount.Uacs.Expense_code;
                                    ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                    //ws.Cell(currentRow, 2).Style.Alignment.Indent = 3;

                                    if (fundsource_amount.beginning_balance != 0)
                                    {
                                        ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 13).Value = fundsource_amount.beginning_balance;
                                        ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 13).Value = "-";
                                        ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    if (_MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId).Any())
                                    {
                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Value = "(" + _MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId).FirstOrDefault()?.Realignment_amount + ")";
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else if (_MyDbContext.FundsRealignment.Where(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId).Any())
                                    {
                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Value = _MyDbContext.FundsRealignment.Where(x => x.Realignment_to == fundsource_amount.UacsId).FirstOrDefault().Realignment_amount;
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Value = "-";
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 18).Value = "-";
                                    ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    var COafterrealignment_amount = fundsource_amount.beginning_balance - fundsource_amount.realignment_amount;
                                    var COafterrealignment_amountadd = fundsource_amount.beginning_balance + _MyDbContext.FundsRealignment.FirstOrDefault(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId)?.Realignment_amount;
                                    //TOTAL ADJUSTED ALLOTMENT
                                    if (_MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId).Any() || COafterrealignment_amount != 0)
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT
                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Value = COafterrealignment_amount;
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (_MyDbContext.FundsRealignment.Where(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId).Any())
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT
                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Value = COafterrealignment_amountadd;
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (COafterrealignment_amount == 0 || COafterrealignment_amountadd == 0)
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT
                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Value = fundsource_amount.beginning_balance;
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (fundsource_amount.beginning_balance == 0)
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT
                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Value = "-";
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    //OBLIGATED (FOR THE MONTH)
                                    if (fortheMonth.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount) != 0)
                                    {
                                        ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 20).Value = fortheMonth.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);
                                        ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 20).Value = "-";
                                        ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }


                                    //OBLIGATED (AS AT)
                                    if (asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount) != 0)
                                    {
                                        ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 21).Value = asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);
                                        ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 21).Value = "-";
                                        ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    var COaddunobligated = COafterrealignment_amount - asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);
                                    var COdeductunobligated = COafterrealignment_amountadd - asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);
                                    //UNOBLIGATED BALANCE OF ALLOTMENT
                                    if (_MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId).Any() || COaddunobligated != 0)
                                    {
                                        ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 22).Value = COaddunobligated;
                                        ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (_MyDbContext.FundsRealignment.Where(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId).Any())
                                    {
                                        ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 22).Value = COdeductunobligated;
                                        ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (COaddunobligated == 0 || COdeductunobligated == 0)
                                    {
                                        //UNOBLIGATED BALANCE OF ALLOTMENT
                                        ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 22).Value = unobligated_amount;
                                        ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (unobligated_amount == 0)
                                    {
                                        //UNOBLIGATED BALANCE OF ALLOTMENT
                                        ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 22).Value = "-";
                                        ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    //PERCENT OF UTILIZATION
                                    if (asAt.Where(x => x.uacsId == fundsource_amount.UacsId).Sum(x => x.amount) != 0 || afterrealignment_amount != 0)
                                    {
                                        ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 23).Value = asAt.Where(x => x.uacsId == fundsource_amount.UacsId).Sum(x => x.amount) / afterrealignment_amount;
                                        ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                        ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 23).Value = "-";
                                        ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                        ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    //TRANSFERED TO DATA FOR CO CURRENT
                                    var transferTo = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundTransferedTo.Select(b => b.FundSourceAmountId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                    foreach (var transferedTo in _MyDbContext.FundTransferedTo.Where(x => x.FundSourceAmountId == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId && x.status == "activated"/* && x.Id == transferTo*/).ToList())
                                    {
                                        currentRow++;
                                        ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                        ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Account_title.ToUpper().ToString();

                                        ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                        ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 13).Value = "-";

                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 19).Value = "(" + transferedTo.Amount.ToString("N", new CultureInfo("en-US")) + ")";

                                        currentRow++;
                                        ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        //ws.Cell(currentRow, 4).Style.Alignment.Indent = 3;
                                        ws.Cell(currentRow, 4).Style.Font.SetItalic();
                                        ws.Cell(currentRow, 4).Value = transferedTo.Particulars;

                                        ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                        ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 13).Value = "-";

                                        ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        ws.Cell(currentRow, 18).Value = "(" + transferedTo.Amount.ToString("N", new CultureInfo("en-US")) + ")";
                                    }
                                    //REALIGNMENT DATA FOR CO CURRENT
                                    var data = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundSourceAmount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                    foreach (var realignment in _MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId && x.Realignment_to == data))
                                    {
                                        currentRow++;
                                        Debug.WriteLine($"fsaid: {fundsource_amount.FundSourceAmountId}\nfundsrc_id {fundsource_amount}");
                                        //ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundSourceAmount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().Account_title.ToUpper().ToString();
                                        ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Account_title.ToUpper().ToString();
                                        ws.Cell(currentRow, 1).Style.Alignment.Indent = 3;

                                        ws.Cell(currentRow, 2).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Expense_code;
                                        ws.Cell(currentRow, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        //ws.Cell(currentRow, 2).Style.Alignment.Indent = 3;

                                        ws.Cell(currentRow, 3).Value = "#,##0.00";
                                        ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 4).Value = realignment.Realignment_amount;
                                        ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 6).Value = "";
                                        ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    currentRow++;
                                    total = (double)fundsource_amount.beginning_balance;
                                }

                                var fortheMonthTotal = (from oa in _MyDbContext.ObligationAmount
                                                        join o in _MyDbContext.Obligation
                                                        on oa.ObligationId equals o.Id
                                                        where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                        select new
                                                        {
                                                            amount = oa.Amount,
                                                            uacsId = oa.UacsId,
                                                            sourceId = o.FundSourceId,
                                                            date = o.Date,
                                                            status = o.status

                                                        });

                                var funds_filterTotal = (from f in _MyDbContext.FundSources
                                                         join fa in _MyDbContext.FundSourceAmount
                                                         on f.FundSourceId equals fa.FundSourceId
                                                         select new
                                                         {
                                                             Id = f.FundSourceId
                                                         });

                                var asAtTotal = (from oa in _MyDbContext.ObligationAmount
                                                 join o in _MyDbContext.Obligation
                                                 on oa.ObligationId equals o.Id
                                                 where o.Date >= date1 && o.Date <= date2
                                                 select new
                                                 {
                                                     amount = oa.Amount,
                                                     sourceId = o.FundSourceId,
                                                     uacsId = oa.UacsId,
                                                     status = o.status
                                                 });

                                ws.Cell(currentRow, 1).Style.Font.SetBold();
                                ws.Cell(currentRow, 1).Value = "SUBTOTAL " + fundSource.FundSourceTitle.ToUpper();
                                ws.Cell(currentRow, 3).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 3).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 3).Style.Font.SetBold();
                                ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 3).Value = fundSource.Beginning_balance;

                                //REALIGNMENT SUBTOTAL
                                var realignment_subtotal = budget_allotment.FundSources.FirstOrDefault().FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault().FundsRealignment?.Sum(x => x.Realignment_amount);
                                if (realignment_subtotal == null)
                                {
                                    ws.Cell(currentRow, 4).Style.Font.SetBold();
                                    ws.Cell(currentRow, 4).Value = "0.00";
                                    ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                else
                                {
                                    ws.Cell(currentRow, 4).Style.Font.SetBold();
                                    ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 4).Value = realignment_subtotal;
                                }
                                ws.Cell(currentRow, 5).Style.Font.SetBold();
                                ws.Cell(currentRow, 5).Value = "0.00";
                                ws.Cell(currentRow, 5).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                ws.Cell(currentRow, 6).Style.Font.SetBold();
                                ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 6).Value = fundSource.Beginning_balance;

                                ws.Cell(currentRow, 7).Style.Font.SetBold();
                                ws.Cell(currentRow, 7).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 7).Value = fortheMonthTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount);

                                //AS AT TOTAL
                                ws.Cell(currentRow, 8).Style.Font.SetBold();
                                ws.Cell(currentRow, 8).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 8).Value = asAtTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount);


                                var unobligatedTotal = fundSource.Beginning_balance - asAtTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId).Sum(x => x.amount);
                                //SUBTOTAL UNOBLIGATED BALANCE OF ALLOTMENT
                                ws.Cell(currentRow, 9).Style.Font.SetBold();
                                ws.Cell(currentRow, 9).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 9).Value = unobligatedTotal;

                                //PERCENT OF UTILIZATION
                                ws.Cell(currentRow, 10).Value = asAtTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount) / fundSource.Beginning_balance;
                                ws.Cell(currentRow, 10).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                allotment_total += (double)fundSource.Beginning_balance;

                                currentRow++;


                            }

                            ws.Cell(currentRow, 1).Style.Alignment.Indent = 4;
                            ws.Cell(currentRow, 1).Style.Font.SetBold();
                            ws.Cell(currentRow, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 1).Value = "TOTAL CO";


                            /*var fortheMonthTotalinTotalCO = (from oa in _MyDbContext.ObligationAmount
                                                             join o in _MyDbContext.Obligation
                                                             on oa.ObligationId equals o.Id
                                                             join f in _MyDbContext.FundSources
                                                             on o.FundSourceId equals f.FundSourceId
                                                             where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                             select new
                                                             {
                                                                 amount = oa.Amount,
                                                                 uacsId = oa.UacsId,
                                                                 sourceId = o.FundSourceId,
                                                                 date = o.Date,
                                                                 status = o.status,
                                                                 allotmentClassID = f.AllotmentClassId
                                                             });

                            var asAtTotalinTotalCO = (from oa in _MyDbContext.ObligationAmount
                                                      join o in _MyDbContext.Obligation
                                                      on oa.ObligationId equals o.Id
                                                      join f in _MyDbContext.FundSources
                                                      on o.FundSourceId equals f.FundSourceId
                                                      where o.Date >= date1 && o.Date <= date2
                                                      select new
                                                      {
                                                          amount = oa.Amount,
                                                          sourceId = o.FundSourceId,
                                                          uacsId = oa.UacsId,
                                                          status = o.status,
                                                          allotmentClassID = f.AllotmentClassId
                                                      });*/

                            var CoTotal = _MyDbContext.FundSources.Where(x => x.AllotmentClassId == 3 && x.AppropriationId == 1).Sum(x => x.Beginning_balance);
                            var allotment_totalCO = +CoTotal;

                            ws.Cell(currentRow, 3).Style.Font.SetBold();
                            ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 3).Value = CoTotal;

                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 4).Style.Font.SetBold();
                                ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 4).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 4).Style.Font.SetBold();
                                ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 4).Value = realignment_total;
                            }


                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 5).Style.Font.SetBold();
                            ws.Cell(currentRow, 5).Value = "0.00";
                            ws.Cell(currentRow, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 6).Style.Font.SetBold();
                            ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 6).Value = CoTotal;

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 7).Style.Font.SetBold();
                            ws.Cell(currentRow, 7).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 7).Value = fortheMonthTotalinTotalCO.Where(x => x.allotmentClassID == 3).Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 8).Style.Font.SetBold();
                            ws.Cell(currentRow, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 8).Value = asAtTotalinTotalCO.Where(x => x.allotmentClassID == 3).Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT
                            var unobligatedTotalinTotalCO = CoTotal - asAtTotalinTotalCO.Where(x => x.allotmentClassID == 3).Sum(x => x.amount);
                            ws.Cell(currentRow, 9).Style.Font.SetBold();
                            ws.Cell(currentRow, 9).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 9).Value = unobligatedTotalinTotalCO;

                            //PERCENT OF UTILIZATION
                            if (asAtTotalinTotalCO.Where(x => x.allotmentClassID == 3).Sum(x => x.amount) == 0 && CoTotal == 0)
                            {
                                ws.Cell(currentRow, 10).Value = "";
                                ws.Cell(currentRow, 10).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }
                            else
                            {
                                var totalPercentCO = asAtTotalinTotalCO.Where(x => x.allotmentClassID == 3).Sum(x => x.amount) / CoTotal;
                                ws.Cell(currentRow, 10).Value = totalPercentCO;
                                ws.Cell(currentRow, 10).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                                currentRow++;
                            }

                            //END CO LOOP
                        }
                        //
                        //START SAA CO LOOP
                        //CURRENT CO SUB-ALLOTMENT
                        if (_MyDbContext.SubAllotment.Where(x => x.AppropriationId == 1 && x.AllotmentClassId == 3 && x.BudgetAllotmentId == id).Any())
                        {
                            //START SAA CO LOOP
                            ws.Cell(currentRow, 1).Style.Font.SetBold();
                            ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 1).Value = "CURRENT CO SUB-ALLOTMENT";
                            currentRow++;
                            foreach (var groups in budget_allotment.SubAllotment.Where(x => x.AllotmentClassId == 3 && x.AppropriationId == 1 && x.BudgetAllotmentId == id && !x.Suballotment_title.Contains("SARO")).OrderBy(x => x.Suballotment_title).GroupBy(x => new { x.prexcId, x.AllotmentClassId }).ToList())
                            {
                                foreach (var subAllotment in groups)
                                {
                                    ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 1).Value = _MyDbContext.Prexc.FirstOrDefault(x => x.Id == subAllotment.prexcId)?.pap_code1;
                                    ws.Cell(currentRow, 1).Style.NumberFormat.Format = "00";
                                    ws.Cell(currentRow, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                    ws.Range(ws.Cell(currentRow, 1), ws.Cell(currentRow, 11)).Merge();
                                    currentRow++;

                                    ws.Cell(currentRow, 1).Style.Font.SetBold();
                                    ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 1).Value = subAllotment.FundId.ToString();
                                    ws.Cell(currentRow, 1).Value = subAllotment.Suballotment_title.ToUpper().ToString();

                                    ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 11).Value = subAllotment.Date.ToShortDateString();
                                    ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                    currentRow++;

                                    ws.Cell(currentRow, 2).Style.Font.SetItalic();
                                    ws.Cell(currentRow, 2).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 2).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 2).Value = subAllotment.Description.ToString();
                                    ws.Range(ws.Cell(currentRow, 2), ws.Cell(currentRow, 18)).Merge();
                                    currentRow++;

                                    foreach (Suballotment_amount suballotment_amount in subAllotment.SubAllotmentAmounts.Where(x => x.status == "activated"))
                                    {
                                        var uacsID = from Suballotment in _MyDbContext.Suballotment_amount
                                                     join u in _MyDbContext.Uacs
                                                     on Suballotment.UacsId equals u.UacsId
                                                     select Suballotment.UacsId;


                                        var fortheMonth = (from oa in _MyDbContext.ObligationAmount
                                                           join o in _MyDbContext.Obligation
                                                           on oa.ObligationId equals o.Id
                                                           join f in _MyDbContext.FundSources
                                                           on o.FundSourceId equals f.FundSourceId
                                                           where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                           select new
                                                           {
                                                               amount = oa.Amount,
                                                               uacsId = oa.UacsId,
                                                               date = o.Date,
                                                               sourceId = o.FundSourceId,
                                                               sourceType = o.source_type,
                                                               status = o.status,
                                                               allotmentClassID = f.AllotmentClassId

                                                           });

                                        var fundsourceID = (from Suballotment in _MyDbContext.SubAllotment
                                                            join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                            on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                            where Suballotment.SubAllotmentId == Suballotment_amount.SubAllotmentId
                                                            select new
                                                            {
                                                                saId = Suballotment.SubAllotmentId
                                                            });

                                        var fundsourceamountID = (from Suballotment in _MyDbContext.SubAllotment
                                                                  join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                                  on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                                  where Suballotment.SubAllotmentId == Suballotment_amount.SubAllotmentId
                                                                  select new
                                                                  {
                                                                      saAmountId = Suballotment_amount.SubAllotmentId
                                                                  });

                                        var asAt = (from oa in _MyDbContext.ObligationAmount
                                                    join o in _MyDbContext.Obligation
                                                    on oa.ObligationId equals o.Id
                                                    where o.Date >= date1 && o.Date <= date2
                                                    select new
                                                    {
                                                        amount = oa.Amount,
                                                        uacsId = oa.UacsId,
                                                        sourceId = o.SubAllotmentId,
                                                        sourceType = o.source_type,
                                                        status = o.status
                                                    });

                                        var unobligated_amount = suballotment_amount.beginning_balance - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);

                                        total = 0;
                                        var afterrealignment_amount = suballotment_amount.beginning_balance - suballotment_amount.realignment_amount;

                                        ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == suballotment_amount.UacsId)?.Account_title.ToUpper().ToString();

                                        ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == suballotment_amount.UacsId)?.Expense_code;
                                        ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);


                                        if (suballotment_amount.beginning_balance != 0)
                                        {
                                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 14).Value = suballotment_amount.beginning_balance;
                                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 14).Value = "-";
                                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }

                                        //REALIGNMENT SAA
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                        {
                                            //REALIGNMENT SAA AMOUNT
                                            ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 17).Value = "(" + suballotment_amount.realignment_amount + ")";
                                            ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                        {
                                            //REALIGNMENT AMOUNT
                                            ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 17).Value = _MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId).FirstOrDefault().Realignment_amount;
                                            ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            //REALIGNMENT AMOUNT
                                            ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 17).Value = "-";
                                            ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }

                                        //TRANSFERED TO DATA FOR SAA
                                        var transferTo = _MyDbContext.Uacs.Where(c => !_MyDbContext.SubTransferedTo.Select(b => b.SubAllotmentId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                        foreach (var transferedToSaa in _MyDbContext.SubTransferedTo.Where(x => x.SubAllotmentAmountId == subAllotment.SubAllotmentAmounts.FirstOrDefault().UacsId && x.SubAllotmentId == subAllotment.SubAllotmentAmounts.FirstOrDefault().SubAllotmentId).ToList())
                                        {
                                            currentRow++;
                                            ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                            ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Account_title.ToUpper().ToString();

                                            ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                            ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            ws.Cell(currentRow, 13).Value = "-";

                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            ws.Cell(currentRow, 19).Value = "(" + transferedToSaa.Amount.ToString("N", new CultureInfo("en-US")) + ")";

                                            currentRow++;
                                            ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            //ws.Cell(currentRow, 4).Style.Alignment.Indent = 3;
                                            ws.Cell(currentRow, 4).Style.Font.SetItalic();
                                            ws.Cell(currentRow, 4).Value = transferedToSaa.Particulars;

                                            ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                            ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            ws.Cell(currentRow, 13).Value = "-";

                                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            ws.Cell(currentRow, 18).Value = "(" + transferedToSaa.Amount.ToString("N", new CultureInfo("en-US")) + ")";
                                        }

                                        /*//TRANSFER TO CO SAA CURRENT
                                        var transfertoCoSaaCurrent = _MyDbContext.SubTransferedTo.Where(x => x.SubAllotmentAmountId == subAllotment.SubAllotmentAmounts.FirstOrDefault().UacsId && x.SubAllotmentId == subAllotment.SubAllotmentAmounts.FirstOrDefault().SubAllotmentId).Sum(x => x.Amount);

                                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 18).Value = "(" + transfertoCoSaaCurrent + ")";
                                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);*/


                                        var SAACOafterrealignment_amount = suballotment_amount.beginning_balance - suballotment_amount.realignment_amount;
                                        var SAACOafterrealignment_amountadd = suballotment_amount.beginning_balance + _MyDbContext.SubAllotment_Realignment.FirstOrDefault(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId)?.Realignment_amount;
                                        //TOTAL ADJUSTED ALLOTMENT
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any() || afterrealignment_amount != 0)
                                        {
                                            //TOTAL ADJUSTED ALLOTMENT SAA
                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Value = SAACOafterrealignment_amount;
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                        {
                                            //TOTAL ADJUSTED ALLOTMENT SAA
                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Value = SAACOafterrealignment_amountadd;
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (SAACOafterrealignment_amount == 0 || SAACOafterrealignment_amountadd == 0)
                                        {
                                            //TOTAL ADJUSTED ALLOTMENT
                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Value = suballotment_amount.beginning_balance;
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (suballotment_amount.beginning_balance == 0)
                                        {
                                            //TOTAL ADJUSTED ALLOTMENT
                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Value = "-";
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }

                                        //OBLIGATED (FOR THE MONTH)
                                        if (fortheMonth.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount) != 0)
                                        {
                                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 20).Value = fortheMonth.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 20).Value = "-";
                                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        //OBLIGATED (AS AT)
                                        if (asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount) != 0)
                                        {
                                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 21).Value = asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 21).Value = "-";
                                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }


                                        //UNOBLIGATED BALANCE OF ALLOTMENT
                                        var SAACOaddunobligated = SAACOafterrealignment_amount - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                        var SAACOdeductunobligated = SAACOafterrealignment_amountadd - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any() || SAACOaddunobligated != 0)
                                        {
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = SAACOaddunobligated;
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                        {
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = SAACOdeductunobligated;
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (SAACOaddunobligated == 0 || SAACOdeductunobligated == 0)
                                        {
                                            //UNOBLIGATED BALANCE OF ALLOTMENT
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = unobligated_amount;
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (unobligated_amount == 0)
                                        {
                                            //UNOBLIGATED BALANCE OF ALLOTMENT
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = "-";
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }

                                        //PERCENT OF UTILIZATION
                                        if (asAt.Where(x => x.uacsId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().UacsId).Sum(x => x.amount) != 0 || afterrealignment_amount != 0)
                                        {
                                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 23).Value = asAt.Where(x => x.uacsId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().UacsId).Sum(x => x.amount) / afterrealignment_amount;
                                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 23).Value = "-";
                                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }


                                        //REALIGNMENT DATA SUB ALLOTMENT
                                        var data = _MyDbContext.Uacs.Where(c => !_MyDbContext.Suballotment_amount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                        foreach (var realignment in _MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId && x.Realignment_to == data))
                                        {
                                            currentRow++;
                                            Debug.WriteLine($"fsaid: {suballotment_amount.SubAllotmentAmountId}\nfundsrc_id {suballotment_amount}");
                                            //ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundSourceAmount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().Account_title.ToUpper().ToString();
                                            ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Account_title.ToUpper().ToString();
                                            ws.Cell(currentRow, 1).Style.Alignment.Indent = 3;

                                            ws.Cell(currentRow, 2).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Expense_code;
                                            ws.Cell(currentRow, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                            //ws.Cell(currentRow, 2).Style.Alignment.Indent = 3;

                                            ws.Cell(currentRow, 3).Value = "#,##0.00";
                                            ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                            //REALIGNMENT AMOUNT
                                            ws.Cell(currentRow, 4).Value = realignment.Realignment_amount;
                                            ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                            //REALIGNMENT AMOUNT
                                            ws.Cell(currentRow, 6).Value = "";
                                            ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        currentRow++;
                                        total = (double)suballotment_amount.beginning_balance;
                                    }

                                    var fortheMonthTotal = (from oa in _MyDbContext.ObligationAmount
                                                            join o in _MyDbContext.Obligation
                                                            on oa.ObligationId equals o.Id
                                                            where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                            select new
                                                            {
                                                                amount = oa.Amount,
                                                                uacsId = oa.UacsId,
                                                                sourceId = o.SubAllotmentId,
                                                                sourceType = o.source_type,
                                                                date = o.Date,
                                                                status = o.status
                                                            });

                                    var funds_filterTotal = (from Suballotment in _MyDbContext.SubAllotment
                                                             join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                             on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                             select new
                                                             {
                                                                 Id = Suballotment.SubAllotmentId
                                                             });

                                    var asAtTotal = (from oa in _MyDbContext.ObligationAmount
                                                     join o in _MyDbContext.Obligation
                                                     on oa.ObligationId equals o.Id
                                                     where o.Date >= date1 && o.Date <= date2
                                                     select new
                                                     {
                                                         amount = oa.Amount,
                                                         sourceId = o.SubAllotmentId,
                                                         uacsId = oa.UacsId,
                                                         sourceType = o.source_type,
                                                         status = o.status
                                                     });


                                    ws.Cell(currentRow, 4).Style.Font.SetBold();
                                    ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 4).Value = "SUBTOTAL " + subAllotment.Suballotment_title.ToUpper()/* + " - " + budget_allotment.FundSources.FirstOrDefault().AllotmentClass.Account_Code*/;

                                    ws.Cell(currentRow, 14).Style.Font.SetBold();
                                    ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 14).Value = subAllotment.Beginning_balance;

                                    //REALIGNMENT SUBTOTAL
                                    var SAACOrealignment_subtotal = budget_allotment.SubAllotment.FirstOrDefault().SubAllotmentRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.SubAllotment.FirstOrDefault().SubAllotmentRealignment?.Sum(x => x.Realignment_amount);
                                    var SAACOsub6 = subAllotment.Beginning_balance - subAllotment.SubAllotmentRealignment?.Sum(x => x.Realignment_amount) + subAllotment.SubAllotmentRealignment?.Sum(x => x.Realignment_amount);
                                    var SAACOsub9 = SAACOsub6 - asAtTotal.Where(x => x.sourceId == subAllotment.SubAllotmentAmounts.FirstOrDefault().SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                    var SAACOtransferedto = budget_allotment.SubAllotment.FirstOrDefault().SubTransferedTo?.Sum(x => x.Amount);
                                    if (SAACOrealignment_subtotal == null)
                                    {
                                        ws.Cell(currentRow, 17).Style.Font.SetBold();
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Value = "0.00";
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 17).Style.Font.SetBold();
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 17).Value = SAACOrealignment_subtotal;
                                    }

                                    ws.Cell(currentRow, 18).Style.Font.SetBold();
                                    ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 18).Value = subAllotment.SubTransferedTo.Sum(x => x.Amount);
                                    ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    ws.Cell(currentRow, 19).Style.Font.SetBold();
                                    ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 19).Value = subAllotment.Beginning_balance - subAllotment.SubTransferedTo.Sum(x => x.Amount);

                                    ws.Cell(currentRow, 20).Style.Font.SetBold();
                                    ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 20).Value = fortheMonthTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);

                                    //AS AT TOTAL
                                    ws.Cell(currentRow, 21).Style.Font.SetBold();
                                    ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 21).Value = asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);


                                    var unobligatedTotal = subAllotment.Beginning_balance - asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                    //SUBTOTAL UNOBLIGATED BALANCE OF ALLOTMENT
                                    ws.Cell(currentRow, 22).Style.Font.SetBold();
                                    ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 22).Value = unobligatedTotal;

                                    //PERCENT OF UTILIZATION
                                    ws.Cell(currentRow, 23).Style.Font.SetBold();
                                    ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 23).Value = asAtTotal.Where(x => x.sourceId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount) / budget_allotment.FundSources.FirstOrDefault().Beginning_balance;
                                    ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                    ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    allotment_totalSaa += (double)subAllotment.Beginning_balance;

                                    currentRow++;

                                }
                                //TOTAL PER GROUP
                                ws.Cell(currentRow, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 2).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 3).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 4).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 5).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 6).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 7).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 8).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 9).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 10).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 11).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 12).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 13).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 14).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 15).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 16).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 17).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 18).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 19).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 22).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 23).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 11).Style.Font.SetBold();
                                ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 11).Value = "SUB-TOTAL" + " " + groups.FirstOrDefault().prexc.pap_initial.ToUpper().ToString();

                                ws.Cell(currentRow, 14).Style.Font.SetBold();
                                ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 14).Value = groups.Sum(x => x.Beginning_balance);
                                currentRow++;
                            }

                            if (budget_allotment.SubAllotment.Where(x => x.AllotmentClassId == 3 && x.BudgetAllotmentId == id).Any())
                            {

                                var CoTotalSaa = _MyDbContext.SubAllotment.Where(x => x.AllotmentClassId == 3 && x.BudgetAllotmentId == id).Sum(x => x.Beginning_balance);

                                var unobligatedTotalinTotalCOSaa = CoTotalSaa - asAtTotalinTotalPS.Where(x => x.allotmentClassID == 3 && x.sourceType == "sub_allotment" && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount);
                                var totalPercentCOSaa = (double)asAtTotalinTotalPS.Where(x => x.allotmentClassID == 3 && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount) / allotment_total;

                                ws.Cell(currentRow, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 2).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 3).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 4).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 5).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 6).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 7).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 8).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 9).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 10).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 11).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 12).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 13).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 14).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 15).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 16).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 17).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 18).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 19).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 22).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 23).Style.Fill.BackgroundColor = XLColor.FromHtml("#C4D79B");
                                ws.Cell(currentRow, 11).Style.Font.SetBold();
                                ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 11).Value = "TOTAL CURRENT CO SUB-ALLOTMENT";

                                ws.Cell(currentRow, 14).Style.Font.SetBold();
                                ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 14).Value = budget_allotment.SubAllotment.Where(x => x.AppropriationId == 1 && x.AllotmentClassId == 3 && x.BudgetAllotmentId == id && !x.Suballotment_title.Contains("SARO") && x.prexcId == x.prexcId).Sum(x => x.Beginning_balance);

                                //REALIGNMENT TOTAL
                                var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                                var TotalCoCurrentTransferedTo = _MyDbContext.SubTransferedTo.Where(x => x.SubAllotment.AllotmentClassId == 3 && x.SubAllotment.AppropriationId == 1 && x.SubAllotment.BudgetAllotmentId == id).Sum(x => x.Amount);
                                if (realignment_total == null)
                                {
                                    ws.Cell(currentRow, 17).Style.Font.SetBold();
                                    ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 17).Value = 0.00;
                                }
                                else
                                {
                                    ws.Cell(currentRow, 17).Style.Font.SetBold();
                                    ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 17).Value = realignment_total;
                                }
                                //TOTAL TRANSFER TO
                                ws.Cell(currentRow, 18).Style.Font.SetBold();
                                ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 18).Value = TotalCoCurrentTransferedTo;
                                ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                //TOTAL - TOTAL AFTER REALIGNMENT
                                ws.Cell(currentRow, 19).Style.Font.SetBold();
                                ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 19).Value = CoTotalSaa - TotalCoCurrentTransferedTo;

                                //TOTAL - FOR THE MONTH
                                ws.Cell(currentRow, 20).Style.Font.SetBold();
                                ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 3 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                                //TOTAL - AS AT
                                ws.Cell(currentRow, 21).Style.Font.SetBold();
                                ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 21).Value = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 3 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                                //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT
                                ws.Cell(currentRow, 22).Style.Font.SetBold();
                                ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalCOSaa;

                                //PERCENT OF UTILIZATION
                                ws.Cell(currentRow, 23).Style.Font.SetBold();
                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 23).Value = totalPercentCOSaa;
                                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                currentRow++;
                                //END SAA CO LOOP
                            }
                        }

                        //CONAP HEADER
                        if (_MyDbContext.FundSources.Where(x => x.AppropriationId == 2).Any() || _MyDbContext.SubAllotment.Where(x => x.AppropriationId == 2 && x.BudgetAllotmentId == id).Any())
                        {
                            ws.Cell(currentRow, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 2).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 3).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 4).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 5).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 6).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 7).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 8).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 9).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 10).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 11).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 12).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 13).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 14).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 15).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 16).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 17).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 18).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 19).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 22).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 23).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 1).Style.Font.SetBold();
                            ws.Cell(currentRow, 1).Style.Font.FontSize = 16;
                            ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 1).Value = "CONTINUING APPROPRIATION";
                            currentRow++;
                        }

                        if (_MyDbContext.FundSources.Where(x => x.AppropriationId == 2 && x.AllotmentClassId == 1).Any())
                        {
                            ws.Cell(currentRow, 1).Style.Font.SetBold();
                            ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 1).Style.Font.FontName = "TAHOMA";
                            ws.Cell(currentRow, 1).Value = "Personnel Services";
                            currentRow++;

                            //START CONAP PS LOOP
                            foreach (FundSource fundSource in budget_allotment.FundSources.Where(x => x.AllotmentClassId == 1 && x.AppropriationId == 2))
                            {

                                ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 1).Value = fundSource.Prexc.pap_code1;
                                ws.Cell(currentRow, 1).Style.NumberFormat.Format = "00";
                                ws.Cell(currentRow, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                ws.Range(ws.Cell(currentRow, 1), ws.Cell(currentRow, 11)).Merge();
                                currentRow++;

                                ws.Cell(currentRow, 1).Style.Font.SetBold();
                                ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 1).Value = fundSource.FundSourceTitle.ToUpper().ToString();
                                currentRow++;

                                foreach (FundSourceAmount fundsource_amount in fundSource.FundSourceAmounts.Where(x => x.status == "activated"))
                                {
                                    var uacsID = from fa in _MyDbContext.FundSourceAmount
                                                 join u in _MyDbContext.Uacs
                                                 on fa.UacsId equals u.UacsId
                                                 select fa.UacsId;


                                    var fortheMonth = (from oa in _MyDbContext.ObligationAmount
                                                       join o in _MyDbContext.Obligation
                                                       on oa.ObligationId equals o.Id
                                                       where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                       select new
                                                       {
                                                           amount = oa.Amount,
                                                           uacsId = oa.UacsId,
                                                           date = o.Date,
                                                           sourceId = o.FundSourceId,
                                                           status = o.status

                                                       });

                                    var fundsourceID = (from f in _MyDbContext.FundSources
                                                        join fa in _MyDbContext.FundSourceAmount
                                                        on f.FundSourceId equals fa.FundSourceId
                                                        where f.FundSourceId == fa.FundSourceId
                                                        select new
                                                        {
                                                            faId = f.FundSourceId
                                                        });

                                    var fundsourceamountID = (from f in _MyDbContext.FundSources
                                                              join fa in _MyDbContext.FundSourceAmount
                                                              on f.FundSourceId equals fa.FundSourceId
                                                              where f.FundSourceId == fa.FundSourceId
                                                              select new
                                                              {
                                                                  faAmountId = fa.FundSourceId
                                                              });




                                    var asAt = (from oa in _MyDbContext.ObligationAmount
                                                join o in _MyDbContext.Obligation
                                                on oa.ObligationId equals o.Id
                                                where o.Date >= date1 && o.Date <= date2
                                                select new
                                                {
                                                    amount = oa.Amount,
                                                    uacsId = oa.UacsId,
                                                    sourceId = o.FundSourceId,
                                                    status = o.status
                                                });

                                    var unobligated_amount = fundsource_amount.beginning_balance - asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);


                                    total = 0;
                                    var afterrealignment_amount = fundsource_amount.beginning_balance - fundsource_amount.realignment_amount;

                                    ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 4).Value = fundsource_amount.Uacs.Account_title.ToUpper().ToString();
                                    ws.Cell(currentRow, 4).Style.Alignment.Indent = 3;

                                    ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 12).Value = fundsource_amount.Uacs.Expense_code;
                                    ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);

                                    if (fundsource_amount.beginning_balance != 0)
                                    {
                                        ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 13).Value = fundsource_amount.beginning_balance;
                                        ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 13).Value = "-";
                                        ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (_MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId).Any())
                                    {
                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Value = "(" + _MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId).FirstOrDefault()?.Realignment_amount + ")";
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else if (_MyDbContext.FundsRealignment.Where(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId).Any())
                                    {
                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Value = _MyDbContext.FundsRealignment.Where(x => x.Realignment_to == fundsource_amount.UacsId).FirstOrDefault().Realignment_amount;
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Value = "-";
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 18).Value = "-";
                                    ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    var CONAPafterrealignment_amount = fundsource_amount.beginning_balance - fundsource_amount.realignment_amount;
                                    var CONAPafterrealignment_amountadd = fundsource_amount.beginning_balance + _MyDbContext.FundsRealignment.FirstOrDefault(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId)?.Realignment_amount;
                                    if (_MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId).Any() || CONAPafterrealignment_amount != 0)
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT
                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Value = CONAPafterrealignment_amount;
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (_MyDbContext.FundsRealignment.Where(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId).Any())
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT
                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Value = CONAPafterrealignment_amountadd;
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (CONAPafterrealignment_amount == 0 || CONAPafterrealignment_amountadd == 0)
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT
                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Value = fundsource_amount.beginning_balance;
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (fundsource_amount.beginning_balance == 0)
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT
                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Value = "-";
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    //OBLIGATED (FOR THE MONTH)
                                    if (fortheMonth.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount) != 0)
                                    {
                                        ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 20).Value = fortheMonth.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);
                                        ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 20).Value = "-";
                                        ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    //OBLIGATED (AS AT)
                                    if (asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount) != 0)
                                    {
                                        ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 21).Value = asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);
                                        ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 21).Value = "-";
                                        ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }


                                    //UNOBLIGATED BALANCE OF ALLOTMENT
                                    var CONAPaddunobligated = CONAPafterrealignment_amount - asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);
                                    var CONAPdeductunobligated = CONAPafterrealignment_amountadd - asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);
                                    if (_MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId).Any() || CONAPaddunobligated != 0)
                                    {
                                        ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 22).Value = CONAPaddunobligated;
                                        ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (_MyDbContext.FundsRealignment.Where(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId).Any())
                                    {
                                        ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 22).Value = CONAPdeductunobligated;
                                        ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (CONAPaddunobligated == 0 || CONAPdeductunobligated == 0)
                                    {
                                        //UNOBLIGATED BALANCE OF ALLOTMENT
                                        ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 22).Value = unobligated_amount;
                                        ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (unobligated_amount == 0)
                                    {
                                        //UNOBLIGATED BALANCE OF ALLOTMENT
                                        ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 22).Value = "-";
                                        ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    //PERCENT OF UTILIZATION
                                    if (asAt.Where(x => x.uacsId == fundsource_amount.UacsId).Sum(x => x.amount) != 0 || afterrealignment_amount != 0)
                                    {
                                        ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 23).Value = asAt.Where(x => x.uacsId == fundsource_amount.UacsId).Sum(x => x.amount) / afterrealignment_amount;
                                        ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                        ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 23).Value = "-";
                                        ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                        ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    //TRANSFERED TO DATA FOR PS SAA
                                    var transferTo = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundTransferedTo.Select(b => b.FundSourceAmountId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                    foreach (var transferedTo in _MyDbContext.FundTransferedTo.Where(x => x.FundSourceAmountId == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId/* && x.Id == transferTo*/).ToList())
                                    {
                                        currentRow++;
                                        ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                        ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Account_title.ToUpper().ToString();

                                        ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                        ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 13).Value = "-";

                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 19).Value = "(" + transferedTo.Amount.ToString("N", new CultureInfo("en-US")) + ")";

                                        currentRow++;
                                        ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        //ws.Cell(currentRow, 4).Style.Alignment.Indent = 3;
                                        ws.Cell(currentRow, 4).Style.Font.SetItalic();
                                        ws.Cell(currentRow, 4).Value = transferedTo.Particulars;

                                        ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                        ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 13).Value = "-";

                                        ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        ws.Cell(currentRow, 18).Value = "(" + transferedTo.Amount.ToString("N", new CultureInfo("en-US")) + ")";
                                    }
                                    //REALIGNMENT DATA FOR PS SAA
                                    var data = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundSourceAmount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                    foreach (var realignment in _MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId && x.Realignment_to == data))
                                    {
                                        currentRow++;
                                        Debug.WriteLine($"fsaid: {fundsource_amount.FundSourceAmountId}\nfundsrc_id {fundsource_amount}");
                                        //ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundSourceAmount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().Account_title.ToUpper().ToString();
                                        ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Account_title.ToUpper().ToString();
                                        ws.Cell(currentRow, 1).Style.Alignment.Indent = 3;

                                        ws.Cell(currentRow, 2).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Expense_code;
                                        ws.Cell(currentRow, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        //ws.Cell(currentRow, 2).Style.Alignment.Indent = 3;

                                        ws.Cell(currentRow, 3).Value = "#,##0.00";
                                        ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 4).Value = realignment.Realignment_amount;
                                        ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 6).Value = "";
                                        ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    currentRow++;
                                    total = (double)fundsource_amount.beginning_balance;
                                }

                                var fortheMonthTotal = (from oa in _MyDbContext.ObligationAmount
                                                        join o in _MyDbContext.Obligation
                                                        on oa.ObligationId equals o.Id
                                                        where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                        select new
                                                        {
                                                            amount = oa.Amount,
                                                            uacsId = oa.UacsId,
                                                            sourceId = o.FundSourceId,
                                                            date = o.Date,
                                                            status = o.status
                                                        });

                                var funds_filterTotal = (from f in _MyDbContext.FundSources
                                                         join fa in _MyDbContext.FundSourceAmount
                                                         on f.FundSourceId equals fa.FundSourceId
                                                         select new
                                                         {
                                                             Id = f.FundSourceId
                                                         });

                                var asAtTotal = (from oa in _MyDbContext.ObligationAmount
                                                 join o in _MyDbContext.Obligation
                                                 on oa.ObligationId equals o.Id
                                                 where o.Date >= date1 && o.Date <= date2
                                                 select new
                                                 {
                                                     amount = oa.Amount,
                                                     sourceId = o.FundSourceId,
                                                     uacsId = oa.UacsId,
                                                     status = o.status
                                                 });


                                ws.Cell(currentRow, 4).Style.Font.SetBold();
                                ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 4).Value = "SUBTOTAL " + fundSource.FundSourceTitle.ToUpper();


                                ws.Cell(currentRow, 13).Style.Font.SetBold();
                                ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 13).Value = fundSource.Beginning_balance;

                                //REALIGNMENT SUBTOTAL
                                var realignment_subtotal = budget_allotment.FundSources.FirstOrDefault().FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault().FundsRealignment?.Sum(x => x.Realignment_amount);
                                if (realignment_subtotal == null)
                                {
                                    ws.Cell(currentRow, 17).Style.Font.SetBold();
                                    ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 17).Value = "0.00";
                                    ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                }
                                else
                                {
                                    ws.Cell(currentRow, 17).Style.Font.SetBold();
                                    ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 17).Value = realignment_subtotal;
                                }


                                ws.Cell(currentRow, 18).Style.Font.SetBold();
                                ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 18).Value = fundSource.FundTransferedTo.Sum(x => x.Amount);
                                ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                ws.Cell(currentRow, 19).Style.Font.SetBold();
                                ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 19).Value = fundSource.Beginning_balance - fundSource.FundTransferedTo.Sum(x => x.Amount);

                                ws.Cell(currentRow, 20).Style.Font.SetBold();
                                ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 20).Value = fortheMonthTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount);

                                //AS AT TOTAL
                                ws.Cell(currentRow, 21).Style.Font.SetBold();
                                ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 21).Value = asAtTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount);


                                var unobligatedTotal = fundSource.Beginning_balance - asAtTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId).Sum(x => x.amount);
                                //SUBTOTAL UNOBLIGATED BALANCE OF ALLOTMENT
                                ws.Cell(currentRow, 22).Style.Font.SetBold();
                                ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 22).Value = unobligatedTotal;

                                //PERCENT OF UTILIZATION
                                ws.Cell(currentRow, 23).Style.Font.SetBold();
                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 23).Value = asAtTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount) / fundSource.Beginning_balance;
                                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                allotment_total += (double)fundSource.Beginning_balance;

                                currentRow++;
                            }

                            ws.Cell(currentRow, 11).Style.Font.SetBold();
                            ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 11).Value = "TOTAL CONAP PERSONNEL SERVICES";


                            ws.Cell(currentRow, 13).Style.Font.SetBold();
                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 13).Value = PsConapTotal;

                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_total;
                            }
                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = "0.00";
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = PsConapTotal;

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalPSConap.Where(x => x.allotmentClassID == 1 && x.appropriationID == 2).Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotalinTotalPSConap.Where(x => x.allotmentClassID == 1 && x.appropriationID == 2).Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT
                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalPSConap;

                            //PERCENT OF UTILIZATION
                            if (asAtTotalinTotalPSConap.Where(x => x.allotmentClassID == 1 && x.appropriationID == 2).Sum(x => x.amount) == 0 && PsConapTotal == 0)
                            {
                                ws.Cell(currentRow, 23).Style.Font.SetBold();
                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 23).Value = "";
                                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                            }
                            else
                            {
                                ws.Cell(currentRow, 23).Style.Font.SetBold();
                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                var totalPercentPSConaps = asAtTotalinTotalPSConap.Where(x => x.allotmentClassID == 1 && x.appropriationID == 2).Sum(x => x.amount) / PsConapTotal;
                                ws.Cell(currentRow, 23).Value = totalPercentPSConaps;
                                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                            }
                        }
                        //END CONAP PS LOOP

                        //START CONAP SAA PS LOOP
                        if (_MyDbContext.SubAllotment.Where(x => x.AppropriationId == 2 && x.AllotmentClassId == 1).Any())
                        {//START CONAP SAA PS LOOP
                            ws.Cell(currentRow, 1).Style.Font.SetBold();
                            ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 1).Style.Font.FontName = "TAHOMA";
                            ws.Cell(currentRow, 1).Value = "CONAP PS SUB-ALLOTMENT";
                            currentRow++;

                            foreach (SubAllotment subAllotment in budget_allotment.SubAllotment.Where(x => x.AllotmentClassId == 1 && x.AppropriationId == 2).ToList())
                            {

                                ws.Cell(currentRow, 1).Value = _MyDbContext.Prexc.FirstOrDefault(x => x.Id == subAllotment.prexcId)?.pap_code1;
                                ws.Cell(currentRow, 1).Style.NumberFormat.Format = "00";
                                ws.Cell(currentRow, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                ws.Range(ws.Cell(currentRow, 1), ws.Cell(currentRow, 11)).Merge();
                                currentRow++;

                                ws.Cell(currentRow, 1).Style.Font.SetBold();
                                ws.Cell(currentRow, 1).Value = subAllotment.FundId.ToString();
                                ws.Cell(currentRow, 1).Value = subAllotment.Suballotment_title.ToUpper().ToString();

                                ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 11).Value = subAllotment.Date.ToShortDateString();
                                ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                currentRow++;

                                ws.Cell(currentRow, 1).Style.Font.SetItalic();
                                ws.Cell(currentRow, 2).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 2).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 1).Value = subAllotment.Description?.ToString();
                                ws.Range(ws.Cell(currentRow, 2), ws.Cell(currentRow, 18)).Merge();
                                currentRow++;

                                foreach (Suballotment_amount suballotment_amount in subAllotment.SubAllotmentAmounts.Where(x => x.status == "activated"))
                                {
                                    var uacsID = from Suballotment in _MyDbContext.Suballotment_amount
                                                 join u in _MyDbContext.Uacs
                                                 on Suballotment.UacsId equals u.UacsId
                                                 select Suballotment.UacsId;


                                    var fortheMonth = (from oa in _MyDbContext.ObligationAmount
                                                       join o in _MyDbContext.Obligation
                                                       on oa.ObligationId equals o.Id
                                                       join f in _MyDbContext.FundSources
                                                       on o.FundSourceId equals f.FundSourceId
                                                       where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                       select new
                                                       {
                                                           amount = oa.Amount,
                                                           uacsId = oa.UacsId,
                                                           date = o.Date,
                                                           sourceId = o.FundSourceId,
                                                           sourceType = o.source_type,
                                                           status = o.status,
                                                           allotmentClassID = f.AllotmentClassId

                                                       });

                                    var fundsourceID = (from Suballotment in _MyDbContext.SubAllotment
                                                        join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                        on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                        where Suballotment.SubAllotmentId == Suballotment_amount.SubAllotmentId
                                                        select new
                                                        {
                                                            saId = Suballotment.SubAllotmentId
                                                        });

                                    var fundsourceamountID = (from Suballotment in _MyDbContext.SubAllotment
                                                              join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                              on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                              where Suballotment.SubAllotmentId == Suballotment_amount.SubAllotmentId
                                                              select new
                                                              {
                                                                  saAmountId = Suballotment_amount.SubAllotmentId
                                                              });

                                    var asAt = (from oa in _MyDbContext.ObligationAmount
                                                join o in _MyDbContext.Obligation
                                                on oa.ObligationId equals o.Id
                                                where o.Date >= date1 && o.Date <= date2
                                                select new
                                                {
                                                    amount = oa.Amount,
                                                    uacsId = oa.UacsId,
                                                    sourceId = o.SubAllotmentId,
                                                    sourceType = o.source_type,
                                                    status = o.status
                                                });

                                    var unobligated_amount = suballotment_amount.beginning_balance - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);

                                    total = 0;
                                    var afterrealignment_amount = suballotment_amount.beginning_balance - suballotment_amount.realignment_amount;
                                    ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == suballotment_amount.UacsId)?.Account_title.ToUpper().ToString();
                                    ws.Cell(currentRow, 1).Style.Alignment.Indent = 3;
                                    ws.Cell(currentRow, 2).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == suballotment_amount.UacsId)?.Expense_code;
                                    ws.Cell(currentRow, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                    //ws.Cell(currentRow, 2).Style.Alignment.Indent = 3;

                                    if (suballotment_amount.beginning_balance != 0)
                                    {
                                        ws.Cell(currentRow, 3).Value = suballotment_amount.beginning_balance;
                                        ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 3).Value = "-";
                                        ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    //TRANSFERED TO DATA FOR SAA
                                    var transferTo = _MyDbContext.Uacs.Where(c => !_MyDbContext.SubTransferedTo.Select(b => b.SubAllotmentId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                    foreach (var transferedTo in _MyDbContext.SubTransferedTo.Where(x => x.SubAllotmentAmountId == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId/* && x.Id == transferTo*/).ToList())
                                    {
                                        currentRow++;
                                        ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                        ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Account_title.ToUpper().ToString();

                                        ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                        ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 13).Value = "-";

                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 19).Value = "(" + transferedTo.Amount.ToString("N", new CultureInfo("en-US")) + ")";

                                        currentRow++;
                                        ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        //ws.Cell(currentRow, 4).Style.Alignment.Indent = 3;
                                        ws.Cell(currentRow, 4).Style.Font.SetItalic();
                                        ws.Cell(currentRow, 4).Value = transferedTo.Particulars;

                                        ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                        ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 13).Value = "-";

                                        ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        ws.Cell(currentRow, 18).Value = "(" + transferedTo.Amount.ToString("N", new CultureInfo("en-US")) + ")";
                                    }
                                    //REALIGNMENT SAA
                                    if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                    {
                                        //REALIGNMENT SAA AMOUNT
                                        ws.Cell(currentRow, 4).Value = "(" + suballotment_amount.realignment_amount + ")";
                                        ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                    {
                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 4).Value = _MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId).FirstOrDefault().Realignment_amount;
                                        ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 4).Value = "-";
                                        ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    ws.Cell(currentRow, 5).Value = "-";
                                    ws.Cell(currentRow, 5).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    var CONAPSAAafterrealignment_amount = suballotment_amount.beginning_balance - suballotment_amount.realignment_amount;
                                    var CONAPSAAafterrealignment_amountadd = suballotment_amount.beginning_balance + _MyDbContext.SubAllotment_Realignment.FirstOrDefault(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId)?.Realignment_amount;
                                    if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any() || CONAPSAAafterrealignment_amount != 0)
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT SAA
                                        ws.Cell(currentRow, 6).Value = CONAPSAAafterrealignment_amount;
                                        ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT SAA
                                        ws.Cell(currentRow, 6).Value = CONAPSAAafterrealignment_amountadd;
                                        ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (CONAPSAAafterrealignment_amount == 0 || CONAPSAAafterrealignment_amountadd == 0)
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT
                                        ws.Cell(currentRow, 6).Value = suballotment_amount.beginning_balance;
                                        ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (suballotment_amount.beginning_balance == 0)
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT
                                        ws.Cell(currentRow, 6).Value = "-";
                                        ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    //OBLIGATED (FOR THE MONTH)
                                    if (fortheMonth.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount) != 0)
                                    {
                                        ws.Cell(currentRow, 7).Value = fortheMonth.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                        ws.Cell(currentRow, 7).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 7).Value = "-";
                                        ws.Cell(currentRow, 7).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    //OBLIGATED (AS AT)
                                    if (asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount) != 0)
                                    {
                                        ws.Cell(currentRow, 8).Value = asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                        ws.Cell(currentRow, 8).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 8).Value = "-";
                                        ws.Cell(currentRow, 8).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }


                                    //UNOBLIGATED BALANCE OF ALLOTMENT
                                    var CONAPSAAaddunobligated = CONAPSAAafterrealignment_amount - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                    var CONAPSAAdeductunobligated = CONAPSAAafterrealignment_amountadd - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                    if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any() || CONAPSAAaddunobligated != 0)
                                    {
                                        ws.Cell(currentRow, 9).Value = CONAPSAAaddunobligated;
                                        ws.Cell(currentRow, 9).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                    {
                                        ws.Cell(currentRow, 9).Value = CONAPSAAdeductunobligated;
                                        ws.Cell(currentRow, 9).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (CONAPSAAaddunobligated == 0 || CONAPSAAdeductunobligated == 0)
                                    {
                                        //UNOBLIGATED BALANCE OF ALLOTMENT
                                        ws.Cell(currentRow, 9).Value = unobligated_amount;
                                        ws.Cell(currentRow, 9).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (unobligated_amount == 0)
                                    {
                                        //UNOBLIGATED BALANCE OF ALLOTMENT
                                        ws.Cell(currentRow, 9).Value = "-";
                                        ws.Cell(currentRow, 9).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    //PERCENT OF UTILIZATION
                                    if (asAt.Where(x => x.uacsId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().UacsId).Sum(x => x.amount) != 0 || afterrealignment_amount != 0)
                                    {
                                        ws.Cell(currentRow, 10).Value = asAt.Where(x => x.uacsId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().UacsId).Sum(x => x.amount) / afterrealignment_amount;
                                        ws.Cell(currentRow, 10).Style.NumberFormat.Format = "0.00%";
                                        ws.Cell(currentRow, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 10).Value = "-";
                                        ws.Cell(currentRow, 10).Style.NumberFormat.Format = "0.00%";
                                        ws.Cell(currentRow, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }


                                    //REALIGNMENT DATA SUB ALLOTMENT
                                    var data = _MyDbContext.Uacs.Where(c => !_MyDbContext.Suballotment_amount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                    foreach (var realignment in _MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId && x.Realignment_to == data))
                                    {
                                        currentRow++;
                                        Debug.WriteLine($"fsaid: {suballotment_amount.SubAllotmentAmountId}\nfundsrc_id {suballotment_amount}");
                                        //ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundSourceAmount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().Account_title.ToUpper().ToString();
                                        ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Account_title.ToUpper().ToString();
                                        ws.Cell(currentRow, 1).Style.Alignment.Indent = 3;

                                        ws.Cell(currentRow, 2).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Expense_code;
                                        ws.Cell(currentRow, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        //ws.Cell(currentRow, 2).Style.Alignment.Indent = 3;

                                        ws.Cell(currentRow, 3).Value = "#,##0.00";
                                        ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 4).Value = realignment.Realignment_amount;
                                        ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 6).Value = "";
                                        ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    currentRow++;
                                    total = (double)suballotment_amount.beginning_balance;
                                }

                                var fortheMonthTotal = (from oa in _MyDbContext.ObligationAmount
                                                        join o in _MyDbContext.Obligation
                                                        on oa.ObligationId equals o.Id
                                                        where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                        select new
                                                        {
                                                            amount = oa.Amount,
                                                            uacsId = oa.UacsId,
                                                            sourceId = o.SubAllotmentId,
                                                            sourceType = o.source_type,
                                                            date = o.Date,
                                                            status = o.status
                                                        });

                                var funds_filterTotal = (from Suballotment in _MyDbContext.SubAllotment
                                                         join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                         on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                         select new
                                                         {
                                                             Id = Suballotment.SubAllotmentId
                                                         });

                                var asAtTotal = (from oa in _MyDbContext.ObligationAmount
                                                 join o in _MyDbContext.Obligation
                                                 on oa.ObligationId equals o.Id
                                                 where o.Date >= date1 && o.Date <= date2
                                                 select new
                                                 {
                                                     amount = oa.Amount,
                                                     sourceId = o.SubAllotmentId,
                                                     uacsId = oa.UacsId,
                                                     sourceType = o.source_type,
                                                     status = o.status
                                                 });


                                ws.Cell(currentRow, 1).Style.Alignment.Indent = 3;
                                ws.Cell(currentRow, 1).Style.Font.SetBold();
                                ws.Cell(currentRow, 1).Value = "SUBTOTAL " + subAllotment.Suballotment_title.ToUpper()/* + " - " + budget_allotment.FundSources.FirstOrDefault().AllotmentClass.Account_Code*/;

                                //ws.Cell(currentRow, 3).Style.Font.FontName = "TAHOMA";
                                //ws.Cell(currentRow, 3).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 3).Style.Font.SetBold();
                                ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 3).Value = subAllotment.Beginning_balance;

                                //REALIGNMENT SUBTOTAL
                                var CONAPSAAMOOErealignment_subtotal = budget_allotment.SubAllotment.FirstOrDefault().SubAllotmentRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.SubAllotment.FirstOrDefault().SubAllotmentRealignment?.Sum(x => x.Realignment_amount);
                                var CONAPSAAMOOEsub6 = subAllotment.Beginning_balance - subAllotment.SubAllotmentRealignment?.Sum(x => x.Realignment_amount) + subAllotment.SubAllotmentRealignment?.Sum(x => x.Realignment_amount);
                                var CONAPSAAMOOEsub9 = CONAPSAAMOOEsub6 - asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                if (CONAPSAAMOOErealignment_subtotal == null)
                                {
                                    ws.Cell(currentRow, 4).Style.Font.SetBold();
                                    ws.Cell(currentRow, 4).Value = "0.00";
                                    ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                }
                                else
                                {
                                    ws.Cell(currentRow, 4).Style.Font.SetBold();
                                    ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 4).Value = CONAPSAAMOOErealignment_subtotal;
                                }

                                ws.Cell(currentRow, 5).Style.Font.SetBold();
                                ws.Cell(currentRow, 5).Value = "0.00";
                                ws.Cell(currentRow, 5).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                ws.Cell(currentRow, 6).Style.Font.SetBold();
                                ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 6).Value = subAllotment.Beginning_balance;

                                ws.Cell(currentRow, 7).Style.Font.SetBold();
                                ws.Cell(currentRow, 7).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 7).Value = fortheMonthTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);

                                //AS AT TOTAL
                                ws.Cell(currentRow, 8).Style.Font.SetBold();
                                ws.Cell(currentRow, 8).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 8).Value = asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);


                                var unobligatedTotal = subAllotment.Beginning_balance - asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                //SUBTOTAL UNOBLIGATED BALANCE OF ALLOTMENT
                                ws.Cell(currentRow, 9).Style.Font.SetBold();
                                ws.Cell(currentRow, 9).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 9).Value = unobligatedTotal;

                                //PERCENT OF UTILIZATION
                                ws.Cell(currentRow, 10).Value = asAtTotal.Where(x => x.sourceId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount) / budget_allotment.FundSources.FirstOrDefault().Beginning_balance;
                                ws.Cell(currentRow, 10).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                allotment_totalSaa += (double)subAllotment.Beginning_balance;

                                currentRow++;

                            }

                            ws.Cell(currentRow, 1).Style.Alignment.Indent = 4;
                            ws.Cell(currentRow, 1).Style.Font.SetBold();
                            ws.Cell(currentRow, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 1).Value = "TOTAL CONAP SAA PERSONNEL SERVICES";


                            var PsTotalSaaConapPS = _MyDbContext.SubAllotment.Where(x => x.AllotmentClassId == 1 && x.AppropriationId == 2 && x.BudgetAllotmentId == id).Sum(x => x.Beginning_balance);
                            var unobligatedTotalinTotalPSSaaConap = PsTotalSaaConapPS - asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 2 && x.sourceType == "sub_allotment" && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount);
                            var totalPercentPSSaaConap = (double)asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount) / allotment_total;

                            ws.Cell(currentRow, 3).Style.Font.SetBold();
                            ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 3).Value = PsTotalSaaConapPS;

                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 4).Style.Font.SetBold();
                                ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 4).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 4).Style.Font.SetBold();
                                ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 4).Value = realignment_total;
                            }
                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 5).Style.Font.SetBold();
                            ws.Cell(currentRow, 5).Value = "0.00";
                            ws.Cell(currentRow, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 6).Style.Font.SetBold();
                            ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 6).Value = PsTotalSaaConapPS;

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 7).Style.Font.SetBold();
                            ws.Cell(currentRow, 7).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 7).Value = fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 2 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 8).Style.Font.SetBold();
                            ws.Cell(currentRow, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 8).Value = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 2 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT

                            ws.Cell(currentRow, 9).Style.Font.SetBold();
                            ws.Cell(currentRow, 9).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 9).Value = unobligatedTotalinTotalPSSaaConap;

                            if (asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.sourceType == "sub_allotment").Sum(x => x.amount) == 0 && PsTotalSaa == 0)
                            {
                                ws.Cell(currentRow, 10).Value = "";
                                ws.Cell(currentRow, 10).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                            }
                            else
                            {
                                var totalPercentPSSaaTotals = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.sourceType == "sub_allotment").Sum(x => x.amount) / PsTotalSaa;
                                //PERCENT OF UTILIZATION
                                ws.Cell(currentRow, 10).Value = totalPercentPSSaaTotals;
                                ws.Cell(currentRow, 10).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                                //END CONAP SAA PS LOOP
                            }
                        }


                        if (_MyDbContext.FundSources.Where(x => x.AppropriationId == 2 && x.AllotmentClassId == 2 && x.BudgetAllotment.Yearly_reference.YearlyReference == result && x.IsAddToNextAllotment == true).Any())
                        {
                            ws.Cell(currentRow, 1).Style.Font.SetBold();
                            ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 1).Value = "Conap Maintenance and Other Operating Services".ToUpper();
                            currentRow++;
                        }
                        //START CONAP MOOE LOOP WITH IsAddedToNextAllotment == true
                        foreach (var fundSource in _MyDbContext.FundSources.Include(x => x.FundSourceAmounts).Include(x => x.FundTransferedTo).Where(x => x.IsAddToNextAllotment == true && x.BudgetAllotment.Yearly_reference.YearlyReference == result && x.AppropriationId == 2 && x.AllotmentClassId == 2).OrderBy(x => x.FundSourceTitle))
                        {
                            ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 1).Value = _MyDbContext.Prexc.FirstOrDefault(x => x.Id == fundSource.PrexcId)?.pap_code1;
                            ws.Cell(currentRow, 1).Style.NumberFormat.Format = "00";
                            ws.Cell(currentRow, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                            ws.Range(ws.Cell(currentRow, 1), ws.Cell(currentRow, 11)).Merge();
                            currentRow++;

                            ws.Cell(currentRow, 1).Style.Font.SetBold();
                            ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 1).Value = fundSource.FundId.ToString();
                            ws.Cell(currentRow, 1).Value = "CONAP" + " " + fundSource.FundSourceTitle?.ToUpper().ToString();
                            currentRow++;

                            foreach (var fundsource_amount in fundSource.FundSourceAmounts.OrderBy(x => x.UacsId).Where(x => x.status == "activated").ToList())
                            {
                                var uacsID = from fa in _MyDbContext.FundSourceAmount
                                             join u in _MyDbContext.Uacs
                                             on fa.UacsId equals u.UacsId
                                             select fa.UacsId;


                                var fortheMonth = (from oa in _MyDbContext.ObligationAmount
                                                   join o in _MyDbContext.Obligation
                                                   on oa.ObligationId equals o.Id
                                                   join f in _MyDbContext.FundSources
                                                   on o.FundSourceId equals f.FundSourceId
                                                   where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                   select new
                                                   {
                                                       amount = oa.Amount,
                                                       uacsId = oa.UacsId,
                                                       date = o.Date,
                                                       sourceId = o.FundSourceId,
                                                       status = o.status,
                                                       fundsourceTitle = f.FundSourceTitle
                                                   });

                                var fundsourceID = (from f in _MyDbContext.FundSources
                                                    join fa in _MyDbContext.FundSourceAmount
                                                    on f.FundSourceId equals fa.FundSourceId
                                                    where f.FundSourceId == fa.FundSourceId
                                                    select new
                                                    {
                                                        faId = f.FundSourceId,
                                                        faBeginningBalance = fa.beginning_balance,
                                                        uacsID = fa.UacsId
                                                    });

                                var fundsourceamountID = (from f in _MyDbContext.FundSources
                                                          join fa in _MyDbContext.FundSourceAmount
                                                          on f.FundSourceId equals fa.FundSourceId
                                                          where f.FundSourceId == fa.FundSourceId
                                                          select new
                                                          {
                                                              faAmountId = fa.FundSourceId
                                                          });

                                var asAt = (from oa in _MyDbContext.ObligationAmount
                                            join o in _MyDbContext.Obligation
                                            on oa.ObligationId equals o.Id
                                            where o.Date >= date1 && o.Date <= date2
                                            select new
                                            {
                                                amount = oa.Amount,
                                                uacsId = oa.UacsId,
                                                sourceId = o.FundSourceId,
                                                status = o.status
                                            });
                                var unobligated_amount = fundsource_amount.beginning_balance - asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);


                                total = 0;


                                ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 4).Value = fundsource_amount.Uacs.Account_title.ToUpper().ToString();

                                ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 12).Value = fundsource_amount.Uacs.Expense_code;
                                ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);

                                if (fundsource_amount.beginning_balance != 0)
                                {
                                    ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 13).Value = fundsource_amount.beginning_balance;
                                    ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                else
                                {
                                    ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 13).Value = "-";
                                    ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }

                                if (_MyDbContext.FundsRealignment.Any(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId && x.status == "activated"))
                                {
                                    //REALIGNMENT AMOUNT
                                    ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 17).Value = "(" + _MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.status == "activated").FirstOrDefault()?.Realignment_amount + ")";
                                    ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                else if (_MyDbContext.FundsRealignment.Any(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId && x.status == "activated"))
                                {
                                    //REALIGNMENT AMOUNT
                                    ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 17).Value = _MyDbContext.FundsRealignment.Where(x => x.Realignment_to == fundsource_amount.UacsId && x.status == "activated").FirstOrDefault().Realignment_amount;
                                    ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                else
                                {
                                    //REALIGNMENT AMOUNT
                                    ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 17).Value = "-";
                                    ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }

                                ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 18).Value = "-";
                                ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                var afterrealignment_amount = fundsource_amount.beginning_balance - fundsource_amount.realignment_amount;
                                var afterrealignment_amountadd = fundsource_amount.beginning_balance + _MyDbContext.FundsRealignment.FirstOrDefault(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId)?.Realignment_amount;
                                if (_MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId).Any() || afterrealignment_amount != 0)
                                {
                                    //TOTAL ADJUSTED ALLOTMENT
                                    ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 19).Value = afterrealignment_amount;
                                    ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                if (_MyDbContext.FundsRealignment.Where(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId).Any())
                                {
                                    //TOTAL ADJUSTED ALLOTMENT
                                    ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 19).Value = afterrealignment_amountadd;
                                    ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                if (afterrealignment_amount == 0 || afterrealignment_amountadd == 0)
                                {
                                    //TOTAL ADJUSTED ALLOTMENT
                                    ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 19).Value = fundsource_amount.beginning_balance;
                                    ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                if (fundsource_amount.beginning_balance == 0)
                                {
                                    //TOTAL ADJUSTED ALLOTMENT
                                    ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 19).Value = "-";
                                    ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }

                                if (fortheMonth.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated" && !x.fundsourceTitle.Contains("RLIP")).Sum(x => x.amount) != 0)
                                {
                                    //OBLIGATED (FOR THE MONTH)
                                    ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 20).Value = fortheMonth.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated" && !x.fundsourceTitle.Contains("RLIP")).Sum(x => x.amount);
                                    ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                else
                                {
                                    //OBLIGATED (FOR THE MONTH)
                                    ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 20).Value = "-";
                                    ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                if (asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount) != 0)
                                {
                                    //OBLIGATED (AS AT)
                                    ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 21).Value = asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);
                                    ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#F2DCDB");
                                    ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                else
                                {
                                    //OBLIGATED (AS AT)
                                    ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 21).Value = "-";
                                    ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#F2DCDB");
                                    ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }


                                var addunobligated = afterrealignment_amount - asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);
                                var deductunobligated = afterrealignment_amountadd - asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);

                                if (_MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId).Any() || addunobligated != 0)
                                {
                                    ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 22).Value = addunobligated;
                                    ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                if (_MyDbContext.FundsRealignment.Where(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId).Any())
                                {
                                    ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 22).Value = deductunobligated;
                                    ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                if (addunobligated == 0 || deductunobligated == 0)
                                {
                                    //UNOBLIGATED BALANCE OF ALLOTMENT
                                    ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 22).Value = unobligated_amount;
                                    ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                if (unobligated_amount == 0)
                                {
                                    //UNOBLIGATED BALANCE OF ALLOTMENT
                                    ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 22).Value = "-";
                                    ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }

                                //PERCENT OF UTILIZATION
                                if (/*asAt.Where(x => x.uacsId == fundsource_amount.UacsId).Sum(x => x.amount) == 0 || */afterrealignment_amount == 0)
                                {
                                    ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 23).Value = "-";
                                    ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                    ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                else
                                {

                                    ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                    var percentTotal = asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount) / afterrealignment_amount;
                                    ws.Cell(currentRow, 23).Value = percentTotal;
                                    ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                    ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }

                                //TRANSFERED TO DATA FOR PS CURRENT
                                var transferTo = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundTransferedTo.Select(b => b.FundSourceAmountId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                foreach (var transferedTo in _MyDbContext.FundTransferedTo.Where(x => x.FundSourceAmountId == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId/* && x.Id == transferTo*/).ToList())
                                {
                                    currentRow++;
                                    ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                    ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Account_title.ToUpper().ToString();

                                    ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                    ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 13).Value = "-";

                                    ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 19).Value = "(" + transferedTo.Amount.ToString("N", new CultureInfo("en-US")) + ")";

                                    currentRow++;
                                    ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    //ws.Cell(currentRow, 4).Style.Alignment.Indent = 3;
                                    ws.Cell(currentRow, 4).Style.Font.SetItalic();
                                    ws.Cell(currentRow, 4).Value = transferedTo.Particulars;

                                    ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                    ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 13).Value = "-";

                                    ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                    ws.Cell(currentRow, 18).Value = "(" + transferedTo.Amount.ToString("N", new CultureInfo("en-US")) + ")";
                                }

                                //REALIGNMENT DATA FOR PS CURRENT
                                var data = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundSourceAmount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                foreach (var realignment in _MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId && x.Realignment_to == data && x.status == "activated").ToList())
                                {
                                    currentRow++;
                                    Debug.WriteLine($"fsaid: {fundsource_amount.FundSourceAmountId}\nfundsrc_id {fundsource_amount}");
                                    //ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundSourceAmount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().Account_title.ToUpper().ToString();
                                    ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Account_title.ToUpper().ToString();
                                    ws.Cell(currentRow, 1).Style.Alignment.Indent = 3;

                                    ws.Cell(currentRow, 2).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Expense_code;
                                    ws.Cell(currentRow, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                    //ws.Cell(currentRow, 2).Style.Alignment.Indent = 3;

                                    if (_MyDbContext.FundSourceAmount.Where(x => x.UacsId == realignment.Realignment_to).FirstOrDefault()?.beginning_balance == null)
                                    {
                                        ws.Cell(currentRow, 3).Value = "-";
                                        ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 3).Value = _MyDbContext.FundSourceAmount.FirstOrDefault(x => x.UacsId == realignment.Realignment_to)?.beginning_balance;
                                        ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    //REALIGNMENT AMOUNT
                                    ws.Cell(currentRow, 4).Value = realignment.Realignment_amount;
                                    ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    //TRANSFER TO AMOUNT
                                    ws.Cell(currentRow, 5).Value = "-";
                                    ws.Cell(currentRow, 5).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    //ADJUSTED ALLOTMENT
                                    if (_MyDbContext.FundSourceAmount.Where(x => x.UacsId == realignment.Realignment_to).FirstOrDefault()?.beginning_balance == null)
                                    {
                                        ws.Cell(currentRow, 6).Value = "-";
                                        ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 6).Value = _MyDbContext.FundSourceAmount.FirstOrDefault(x => x.UacsId == realignment.Realignment_to)?.beginning_balance;
                                        ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    //REALIGNMENT - FOR THE MONTH
                                    ws.Cell(currentRow, 7).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 7).Value = /*fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1 && x.fundSourceTitle != "AUTOMATIC APPROPRIATION").Sum(x => x.amount);*/"-";

                                    //REALIGNMENT - AS AT
                                    ws.Cell(currentRow, 8).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 8).Value = /*fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1 && x.fundSourceTitle != "AUTOMATIC APPROPRIATION").Sum(x => x.amount);*/"-";

                                    ws.Cell(currentRow, 9).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 9).Value = /*fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1 && x.fundSourceTitle != "AUTOMATIC APPROPRIATION").Sum(x => x.amount);*/"-";

                                    ws.Cell(currentRow, 10).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 10).Value = /*fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1 && x.fundSourceTitle != "AUTOMATIC APPROPRIATION").Sum(x => x.amount);*/"-";
                                }



                                currentRow++;
                                total = (double)fundsource_amount.beginning_balance;
                            }

                            var fortheMonthTotal = (from oa in _MyDbContext.ObligationAmount
                                                    join o in _MyDbContext.Obligation
                                                    on oa.ObligationId equals o.Id
                                                    where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                    select new
                                                    {
                                                        amount = oa.Amount,
                                                        uacsId = oa.UacsId,
                                                        sourceId = o.FundSourceId,
                                                        date = o.Date,
                                                        status = o.status
                                                    });

                            var subtotalTransferedTo = (from ft in _MyDbContext.FundTransferedTo
                                                        join fa in _MyDbContext.FundSourceAmount
                                                        on ft.FundSourceId equals fa.FundSourceId
                                                        where ft.FundSourceAmountId == fa.UacsId
                                                        select new
                                                        {
                                                            UacsId = fa.UacsId,
                                                            FundSourceId = fa.FundSourceId,
                                                        });

                            var asAtTotal = (from oa in _MyDbContext.ObligationAmount
                                             join o in _MyDbContext.Obligation
                                             on oa.ObligationId equals o.Id
                                             where o.Date >= date1 && o.Date <= date2
                                             select new
                                             {
                                                 amount = oa.Amount,
                                                 sourceId = o.FundSourceId,
                                                 uacsId = oa.UacsId,
                                                 status = o.status
                                             });

                            var asAtTotalSaro = (from oa in _MyDbContext.ObligationAmount
                                                 join o in _MyDbContext.Obligation
                                                 on oa.ObligationId equals o.Id
                                                 join s in _MyDbContext.SubAllotment
                                                 on o.SubAllotmentId equals s.SubAllotmentId
                                                 where o.Date >= date1 && o.Date <= date2
                                                 select new
                                                 {
                                                     amount = oa.Amount,
                                                     sourceId = o.SubAllotmentId,
                                                     uacsId = oa.UacsId,
                                                     status = o.status,
                                                     appropriationId = s.AppropriationId,
                                                     suballotmentTitle = s.Suballotment_title
                                                 });

                            var sub6 = fundSource.Beginning_balance - fundSource.FundsRealignment?.Sum(x => x.Realignment_amount) + fundSource.FundsRealignment?.Sum(x => x.Realignment_amount);
                            var sub9 = sub6 - asAtTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount);

                            ws.Cell(currentRow, 4).Style.Font.SetBold();
                            ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 4).Value = "SUBTOTAL " + fundSource.FundSourceTitle.ToUpper();

                            ws.Cell(currentRow, 13).Style.Font.SetBold();
                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 13).Value = fundSource.Beginning_balance;

                            //REALIGNMENT SUBTOTAL
                            var realignment_subtotal = budget_allotment.FundSources.FirstOrDefault().FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault().FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_subtotal == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Value = "0.00";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_subtotal;
                            }



                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = fundSource.FundTransferedTo.Sum(x => x.Amount);
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            if (string.IsNullOrEmpty(fundSource.FundsRealignment?.Sum(x => x.Realignment_amount).ToString()))
                            {
                                ws.Cell(currentRow, 19).Style.Font.SetBold();
                                ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 19).Value = fundSource.Beginning_balance - fundSource.FundTransferedTo.Sum(x => x.Amount);
                            }
                            else
                            {
                                ws.Cell(currentRow, 19).Style.Font.SetBold();
                                ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 19).Value = sub6 - fundSource.FundTransferedTo.Sum(x => x.Amount);
                            }




                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = fortheMonthTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount);

                            //AS AT TOTAL
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount);

                            if (string.IsNullOrEmpty(fundSource.FundsRealignment?.Sum(x => x.Realignment_amount).ToString()))
                            {
                                var unobligatedTotal = fundSource.Beginning_balance - asAtTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId).Sum(x => x.amount);
                                //SUBTOTAL UNOBLIGATED BALANCE OF ALLOTMENT
                                ws.Cell(currentRow, 22).Style.Font.SetBold();
                                ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 22).Value = unobligatedTotal;
                            }
                            else
                            {
                                var unobligatedTotal = fundSource.Beginning_balance - asAtTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId).Sum(x => x.amount);
                                ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 22).Style.Font.SetBold();
                                ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 22).Value = sub9;
                            }

                            if (string.IsNullOrEmpty(fundSource.FundsRealignment?.Sum(x => x.Realignment_amount).ToString()))
                            {
                                if (asAtTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount) == 0)
                                {
                                    //PERCENT OF UTILIZATION
                                    ws.Cell(currentRow, 23).Value = "-";
                                    ws.Cell(currentRow, 23).Style.Font.SetBold();
                                    ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                else
                                {
                                    //PERCENT OF UTILIZATION
                                    ws.Cell(currentRow, 23).Value = asAtTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount) / fundSource.Beginning_balance;
                                    ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                    ws.Cell(currentRow, 23).Style.Font.SetBold();
                                    ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }

                            }
                            else
                            {
                                //PERCENT OF UTILIZATION
                                ws.Cell(currentRow, 23).Value = asAtTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount) / sub9;
                                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 23).Style.Font.SetBold();
                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            }
                            currentRow++;
                        }
                        //TOTAL FOR THE MONTH CONAP MOOE
                        var fortheMonthTotalinConap = (from oa in _MyDbContext.ObligationAmount
                                                       join o in _MyDbContext.Obligation
                                                       on oa.ObligationId equals o.Id
                                                       join f in _MyDbContext.FundSources
                                                           .Include(x => x.BudgetAllotment)
                                                               .ThenInclude(x => x.Yearly_reference)
                                                       on o.FundSourceId equals f.FundSourceId
                                                       where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                       select new
                                                       {
                                                           amount = oa.Amount,
                                                           allotmentClassID = f.AllotmentClassId,
                                                           appropriationID = f.AppropriationId,
                                                           IsAdded = f.IsAddToNextAllotment,
                                                           Yearly = f.BudgetAllotment.Yearly_reference.YearlyReference
                                                       });
                        //TOTAL AS AT CONAP MOOE
                        var asAtTotalinTotalinConap = (from oa in _MyDbContext.ObligationAmount
                                                       join o in _MyDbContext.Obligation
                                                       on oa.ObligationId equals o.Id
                                                       join f in _MyDbContext.FundSources
                                                       on o.FundSourceId equals f.FundSourceId
                                                       where o.Date >= date1 && o.Date <= date2
                                                       select new
                                                       {
                                                           amount = oa.Amount,
                                                           allotmentClassID = f.AllotmentClassId,
                                                           appropriationID = f.AppropriationId,
                                                           IsAdded = f.IsAddToNextAllotment,
                                                           Yearly = f.BudgetAllotment.Yearly_reference.YearlyReference
                                                       });

                        var MooeConapTotal = _MyDbContext.FundSources.Where(x => x.AppropriationId == 2 && x.AllotmentClassId == 2 && x.AppropriationId == 2 && x.IsAddToNextAllotment == true && x.BudgetAllotment.Yearly_reference.YearlyReference == result).Sum(x => x.Beginning_balance);
                        var unobligatedTotalinTotalMooeConap = MooeConapTotal - asAtTotalinTotalinConap.Where(x => x.appropriationID == 2 && x.allotmentClassID == 2 && x.IsAdded == true && x.Yearly == result).Sum(x => x.amount);

                        //TOTAL
                        if (_MyDbContext.FundSources.Where(x => x.AppropriationId == 2 && x.AllotmentClassId == 2 && x.BudgetAllotment.Yearly_reference.YearlyReference == result && x.IsAddToNextAllotment == true).Any())
                        {
                            ws.Cell(currentRow, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 2).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 3).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 4).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 5).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 6).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 7).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 8).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 9).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 10).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 11).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 12).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 13).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 14).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 15).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 16).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 17).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 18).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 19).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 22).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 23).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 11).Style.Font.SetBold();
                            ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 11).Value = "TOTAL CONAP MOOE";

                            ws.Cell(currentRow, 13).Style.Font.SetBold();
                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 13).Value = _MyDbContext.FundSources.Where(x => x.AppropriationId == 2 && x.AllotmentClassId == 2 && x.BudgetAllotment.Yearly_reference.YearlyReference == result && x.IsAddToNextAllotment == true).Sum(x => x.Beginning_balance);

                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_total;
                            }
                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = "0.00";
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = _MyDbContext.FundSources.Where(x => x.AppropriationId == 2 && x.AllotmentClassId == 2 && x.BudgetAllotment.Yearly_reference.YearlyReference == result && x.IsAddToNextAllotment == true).Sum(x => x.Beginning_balance);

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = fortheMonthTotalinConap.Where(x => x.appropriationID == 2 && x.allotmentClassID == 2 && x.IsAdded == true && x.Yearly == result).Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotalinTotalinConap.Where(x => x.allotmentClassID == 2 && x.appropriationID == 2 && x.IsAdded == true && x.Yearly == result).Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT
                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalMooeConap;

                            //PERCENT OF UTILIZATION
                            if (asAtTotalinTotalPSConap.Where(x => x.allotmentClassID == 2 && x.appropriationID == 2 && x.IsAdded == true && x.Year == result).Sum(x => x.amount) == 0 && PsConapTotal == 0)
                            {
                                ws.Cell(currentRow, 23).Style.Font.SetBold();
                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 23).Value = "";
                                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                            }
                            else
                            {
                                var totalPercentPSConap = asAtTotalinTotalPSConap.Where(x => x.allotmentClassID == 2 && x.appropriationID == 2 && x.IsAdded == true && x.Year == result).Sum(x => x.amount) / PsConapTotal;
                                ws.Cell(currentRow, 23).Style.Font.SetBold();
                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 23).Value = totalPercentPSConap;
                                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                            }
                            //END CONAP MOOE LOOP
                        }

                        var fortheMonthTotalinTotalMooeConap = (from oa in _MyDbContext.ObligationAmount
                                                                join o in _MyDbContext.Obligation
                                                                on oa.ObligationId equals o.Id
                                                                join f in _MyDbContext.FundSources
                                                                on o.FundSourceId equals f.FundSourceId
                                                                where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                                select new
                                                                {
                                                                    amount = oa.Amount,
                                                                    uacsId = oa.UacsId,
                                                                    sourceId = o.FundSourceId,
                                                                    sourceType = o.source_type,
                                                                    date = o.Date,
                                                                    status = o.status,
                                                                    allotmentClassID = f.AllotmentClassId,
                                                                    appropriationID = f.AppropriationId
                                                                });

                        var asAtTotalinTotalMooeConap = (from oa in _MyDbContext.ObligationAmount
                                                         join o in _MyDbContext.Obligation
                                                         on oa.ObligationId equals o.Id
                                                         join f in _MyDbContext.FundSources
                                                         on o.FundSourceId equals f.FundSourceId
                                                         where o.Date >= date1 && o.Date <= date2
                                                         select new
                                                         {
                                                             amount = oa.Amount,
                                                             sourceId = o.FundSourceId,
                                                             sourceType = o.source_type,
                                                             uacsId = oa.UacsId,
                                                             status = o.status,
                                                             allotmentClassID = f.AllotmentClassId,
                                                             appropriationID = f.AppropriationId,
                                                             fundSourceBudgetAllotmentId = f.BudgetAllotmentId
                                                         });





                        //IsAddToNextAllotment == false
                        /*if (_MyDbContext.SubAllotment.Where(x => x.AppropriationId == 2 && x.AllotmentClassId == 2).Any())
                        {
                            //START CONAP MOOE SUB-ALLOTMENT
                            ws.Cell(currentRow, 1).Style.Font.SetBold();
                            ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 1).Value = "CONAP MOOE SUB-ALLOTMENT";
                            currentRow++;

                            foreach (var groups in budget_allotment.SubAllotment.Where(x => x.AllotmentClassId == 2 && x.AppropriationId == 2 && x.BudgetAllotmentId == id && !x.Suballotment_title.Contains("SARO")).OrderBy(x => x.Suballotment_title).GroupBy(x => new { x.prexcId, x.AllotmentClassId }).ToList())
                            {
                                foreach (var subAllotment in groups)
                                {
                                    ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 1).Value = _MyDbContext.Prexc.FirstOrDefault(x => x.Id == subAllotment.prexcId)?.pap_code1;
                                    ws.Cell(currentRow, 1).Style.NumberFormat.Format = "00";
                                    ws.Cell(currentRow, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                    ws.Range(ws.Cell(currentRow, 1), ws.Cell(currentRow, 11)).Merge();
                                    currentRow++;

                                    ws.Cell(currentRow, 1).Style.Font.SetBold();
                                    ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 1).Value = subAllotment.FundId.ToString();
                                    ws.Cell(currentRow, 1).Value = "CONAP" + subAllotment.Suballotment_title?.ToUpper().ToString();



                                    ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 11).Value = subAllotment.Date.ToShortDateString();
                                    ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);

                                    currentRow++;

                                    ws.Cell(currentRow, 2).Style.Font.SetItalic();
                                    ws.Cell(currentRow, 2).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 2).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 2).Value = subAllotment.prexc.pap_initial?.ToUpper().ToString() + "-" + subAllotment.Description?.ToString();
                                    ws.Range(ws.Cell(currentRow, 2), ws.Cell(currentRow, 18)).Merge();
                                    currentRow++;

                                    foreach (Suballotment_amount suballotment_amount in subAllotment.SubAllotmentAmounts.Where(x => x.status == "activated"))
                                    {
                                        var uacsID = from Suballotment in _MyDbContext.Suballotment_amount
                                                     join u in _MyDbContext.Uacs
                                                     on Suballotment.UacsId equals u.UacsId
                                                     select Suballotment.UacsId;


                                        var fortheMonth = (from oa in _MyDbContext.ObligationAmount
                                                           join o in _MyDbContext.Obligation
                                                           on oa.ObligationId equals o.Id
                                                           join f in _MyDbContext.FundSources
                                                           on o.FundSourceId equals f.FundSourceId
                                                           where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                           select new
                                                           {
                                                               amount = oa.Amount,
                                                               uacsId = oa.UacsId,
                                                               date = o.Date,
                                                               sourceId = o.FundSourceId,
                                                               sourceType = o.source_type,
                                                               status = o.status,
                                                               allotmentClassID = f.AllotmentClassId

                                                           });

                                        var fundsourceID = (from Suballotment in _MyDbContext.SubAllotment
                                                            join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                            on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                            where Suballotment.SubAllotmentId == Suballotment_amount.SubAllotmentId
                                                            select new
                                                            {
                                                                saId = Suballotment.SubAllotmentId
                                                            });

                                        var fundsourceamountID = (from Suballotment in _MyDbContext.SubAllotment
                                                                  join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                                  on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                                  where Suballotment.SubAllotmentId == Suballotment_amount.SubAllotmentId
                                                                  select new
                                                                  {
                                                                      saAmountId = Suballotment_amount.SubAllotmentId
                                                                  });

                                        var asAt = (from oa in _MyDbContext.ObligationAmount
                                                    join o in _MyDbContext.Obligation
                                                    on oa.ObligationId equals o.Id
                                                    where o.Date >= date1 && o.Date <= date2
                                                    select new
                                                    {
                                                        amount = oa.Amount,
                                                        uacsId = oa.UacsId,
                                                        sourceId = o.SubAllotmentId,
                                                        sourceType = o.source_type,
                                                        status = o.status
                                                    });

                                        var unobligated_amount = suballotment_amount.beginning_balance - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);

                                        total = 0;
                                        var afterrealignment_amount = suballotment_amount.beginning_balance - suballotment_amount.realignment_amount;

                                        ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == suballotment_amount.UacsId)?.Account_title.ToUpper().ToString();

                                        ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == suballotment_amount.UacsId)?.Expense_code;
                                        ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);

                                        if (suballotment_amount.beginning_balance != 0)
                                        {
                                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 14).Value = suballotment_amount.beginning_balance;
                                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                        }
                                        else
                                        {
                                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 14).Value = "-";
                                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        //REALIGNMENT SAA
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                        {
                                            //REALIGNMENT SAA AMOUNT
                                            ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 17).Value = "(" + suballotment_amount.realignment_amount + ")";
                                            ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                        {
                                            //REALIGNMENT AMOUNT
                                            ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 17).Value = _MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId).FirstOrDefault().Realignment_amount;
                                            ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            //REALIGNMENT AMOUNT
                                            ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 17).Value = "-";
                                            ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        //TRANSFERED TO DATA FOR SAA
                                        var transferTo = _MyDbContext.Uacs.Where(c => !_MyDbContext.SubTransferedTo.Select(b => b.SubAllotmentId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                        foreach (var transferedToSaa in _MyDbContext.SubTransferedTo.Where(x => x.SubAllotmentAmountId == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId*//* && x.Id == transferTo*//*).ToList())
                                        {
                                            currentRow++;
                                            ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                            ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Account_title.ToUpper().ToString();

                                            ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                            ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            ws.Cell(currentRow, 13).Value = "-";

                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            ws.Cell(currentRow, 19).Value = "(" + transferedToSaa.Amount.ToString("N", new CultureInfo("en-US")) + ")";

                                            currentRow++;
                                            ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            //ws.Cell(currentRow, 4).Style.Alignment.Indent = 3;
                                            ws.Cell(currentRow, 4).Style.Font.SetItalic();
                                            ws.Cell(currentRow, 4).Value = transferedToSaa.Particulars;

                                            ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                            ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            ws.Cell(currentRow, 13).Value = "-";

                                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            ws.Cell(currentRow, 18).Value = "(" + transferedToSaa.Amount.ToString("N", new CultureInfo("en-US")) + ")";
                                        }
                                        *//*ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 18).Value = "-";
                                        ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);*//*

                                        var CONAPSAAMOOEafterrealignment_amount = suballotment_amount.beginning_balance - suballotment_amount.realignment_amount;
                                        var CONAPSAAMOOEafterrealignment_amountadd = suballotment_amount.beginning_balance + _MyDbContext.SubAllotment_Realignment.FirstOrDefault(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId)?.Realignment_amount;
                                        //TOTAL ADJUSTED ALLOTMENT
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any() || CONAPSAAMOOEafterrealignment_amount != 0)
                                        {
                                            //TOTAL ADJUSTED ALLOTMENT SAA
                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Value = CONAPSAAMOOEafterrealignment_amount;
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                        {
                                            //TOTAL ADJUSTED ALLOTMENT SAA
                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Value = CONAPSAAMOOEafterrealignment_amountadd;
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (CONAPSAAMOOEafterrealignment_amount == 0 || CONAPSAAMOOEafterrealignment_amountadd == 0)
                                        {
                                            //TOTAL ADJUSTED ALLOTMENT
                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Value = suballotment_amount.beginning_balance;
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (suballotment_amount.beginning_balance == 0)
                                        {
                                            //TOTAL ADJUSTED ALLOTMENT
                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Value = "-";
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }

                                        //OBLIGATED (FOR THE MONTH)
                                        if (fortheMonth.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount) != 0)
                                        {
                                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 20).Value = fortheMonth.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 20).Value = "-";
                                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        //OBLIGATED (AS AT)
                                        if (asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount) != 0)
                                        {
                                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 21).Value = asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 21).Value = "-";
                                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        //UNOBLIGATED BALANCE OF ALLOTMENT
                                        var CONAPSAAMOOEaddunobligated = CONAPSAAMOOEafterrealignment_amount - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                        var CONAPSAAMOOEdeductunobligated = CONAPSAAMOOEafterrealignment_amountadd - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any() || CONAPSAAMOOEaddunobligated != 0)
                                        {
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = CONAPSAAMOOEaddunobligated;
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                        {
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = CONAPSAAMOOEdeductunobligated;
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (CONAPSAAMOOEaddunobligated == 0 || CONAPSAAMOOEdeductunobligated == 0)
                                        {
                                            //UNOBLIGATED BALANCE OF ALLOTMENT
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = unobligated_amount;
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (unobligated_amount == 0)
                                        {
                                            //UNOBLIGATED BALANCE OF ALLOTMENT
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = "-";
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }

                                        if (asAt.Where(x => x.uacsId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().UacsId).Sum(x => x.amount) == 0 || afterrealignment_amount == 0)
                                        {
                                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 23).Value = "-";
                                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            //PERCENT OF UTILIZATION
                                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 23).Value = asAt.Where(x => x.uacsId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().UacsId).Sum(x => x.amount) / afterrealignment_amount;
                                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        //REALIGNMENT DATA SUB ALLOTMENT
                                        var data = _MyDbContext.Uacs.Where(c => !_MyDbContext.Suballotment_amount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                        foreach (var realignment in _MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId && x.Realignment_to == data))
                                        {
                                            currentRow++;
                                            Debug.WriteLine($"fsaid: {suballotment_amount.SubAllotmentAmountId}\nfundsrc_id {suballotment_amount}");
                                            //ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundSourceAmount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().Account_title.ToUpper().ToString();
                                            ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Account_title.ToUpper().ToString();
                                            ws.Cell(currentRow, 1).Style.Alignment.Indent = 3;

                                            ws.Cell(currentRow, 2).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Expense_code;
                                            ws.Cell(currentRow, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                            //ws.Cell(currentRow, 2).Style.Alignment.Indent = 3;

                                            ws.Cell(currentRow, 3).Value = "#,##0.00";
                                            ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                            //REALIGNMENT AMOUNT
                                            ws.Cell(currentRow, 4).Value = realignment.Realignment_amount;
                                            ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                            //REALIGNMENT AMOUNT
                                            ws.Cell(currentRow, 6).Value = "";
                                            ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        currentRow++;
                                        total = (double)suballotment_amount.beginning_balance;
                                    }

                                    var fortheMonthTotal = (from oa in _MyDbContext.ObligationAmount
                                                            join o in _MyDbContext.Obligation
                                                            on oa.ObligationId equals o.Id
                                                            where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                            select new
                                                            {
                                                                amount = oa.Amount,
                                                                uacsId = oa.UacsId,
                                                                sourceId = o.SubAllotmentId,
                                                                sourceType = o.source_type,
                                                                date = o.Date,
                                                                status = o.status
                                                            });

                                    var funds_filterTotal = (from Suballotment in _MyDbContext.SubAllotment
                                                             join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                             on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                             select new
                                                             {
                                                                 Id = Suballotment.SubAllotmentId
                                                             });

                                    var asAtTotal = (from oa in _MyDbContext.ObligationAmount
                                                     join o in _MyDbContext.Obligation
                                                     on oa.ObligationId equals o.Id
                                                     where o.Date >= date1 && o.Date <= date2
                                                     select new
                                                     {
                                                         amount = oa.Amount,
                                                         sourceId = o.SubAllotmentId,
                                                         uacsId = oa.UacsId,
                                                         sourceType = o.source_type,
                                                         status = o.status
                                                     });


                                    ws.Cell(currentRow, 4).Style.Font.SetBold();
                                    ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 4).Value = "SUBTOTAL " + subAllotment.Suballotment_title?.ToUpper();

                                    ws.Cell(currentRow, 14).Style.Font.SetBold();
                                    ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 14).Value = subAllotment.Beginning_balance;

                                    //REALIGNMENT SUBTOTAL
                                    var CONAPSAAMOOErealignment_subtotal = budget_allotment.SubAllotment.FirstOrDefault().SubAllotmentRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.SubAllotment.FirstOrDefault().SubAllotmentRealignment?.Sum(x => x.Realignment_amount);
                                    var CONAPSAAMOOEsub6 = subAllotment.Beginning_balance - subAllotment.SubAllotmentRealignment?.Sum(x => x.Realignment_amount) + subAllotment.SubAllotmentRealignment?.Sum(x => x.Realignment_amount);
                                    var CONAPSAAMOOEsub9 = CONAPSAAMOOEsub6 - asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                    if (CONAPSAAMOOErealignment_subtotal == null)
                                    {
                                        ws.Cell(currentRow, 17).Style.Font.SetBold();
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Value = "0.00";
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 17).Style.Font.SetBold();
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 17).Value = CONAPSAAMOOErealignment_subtotal;
                                    }

                                    ws.Cell(currentRow, 18).Style.Font.SetBold();
                                    ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 18).Value = subAllotment.SubTransferedTo.Sum(x => x.Amount);
                                    ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    ws.Cell(currentRow, 19).Style.Font.SetBold();
                                    ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 19).Value = subAllotment.Beginning_balance - subAllotment.SubTransferedTo.Sum(x => x.Amount);

                                    ws.Cell(currentRow, 20).Style.Font.SetBold();
                                    ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 20).Value = fortheMonthTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);

                                    //AS AT TOTAL
                                    ws.Cell(currentRow, 21).Style.Font.SetBold();
                                    ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 21).Value = asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);


                                    var unobligatedTotal = subAllotment.Beginning_balance - asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                    //SUBTOTAL UNOBLIGATED BALANCE OF ALLOTMENT
                                    ws.Cell(currentRow, 22).Style.Font.SetBold();
                                    ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 22).Value = unobligatedTotal;

                                    //PERCENT OF UTILIZATION
                                    ws.Cell(currentRow, 23).Style.Font.SetBold();
                                    ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 23).Value = asAtTotal.Where(x => x.sourceId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount) / budget_allotment.FundSources.FirstOrDefault()?.Beginning_balance;
                                    ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                    ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    allotment_totalSaa += (double)subAllotment.Beginning_balance;

                                    currentRow++;

                                }

                                //SUB-TOTAL PER GROUP
                                ws.Cell(currentRow, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 2).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 3).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 4).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 5).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 6).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 7).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 8).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 9).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 10).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 11).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 12).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 13).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 14).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 15).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 16).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 17).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 18).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 19).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 22).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 23).Style.Fill.BackgroundColor = XLColor.FromHtml("#EBF1DE");
                                ws.Cell(currentRow, 11).Style.Font.SetBold();
                                ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 11).Value = "SUB-TOTAL" + " " + groups.FirstOrDefault().prexc.pap_initial.ToUpper().ToString();

                                ws.Cell(currentRow, 14).Style.Font.SetBold();
                                ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 14).Value = groups.Sum(x => x.Beginning_balance);
                                currentRow++;
                            }

                            var MooeTotalSaaConap = _MyDbContext.SubAllotment.Where(x => x.AllotmentClassId == 2 && x.AppropriationId == 2 && x.BudgetAllotmentId == id).Sum(x => x.Beginning_balance);
                            var unobligatedTotalinTotalMOOESaaConap = MooeTotalSaaConap - asAtTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.appropriationID == 2 && x.sourceType == "sub_allotment" && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount);
                            var totalPercentMOOESaaConap = (double)asAtTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.appropriationID == 2).Sum(x => x.amount) / allotment_total;


                            ws.Cell(currentRow, 11).Style.Font.SetBold();
                            ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 11).Value = "TOTAL CONAP SAA MOOE";

                            ws.Cell(currentRow, 14).Style.Font.SetBold();
                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 14).Value = MooeTotalSaaConap;

                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_total;
                            }
                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = _MyDbContext.SubTransferedTo.Where(x => x.SubAllotment.AllotmentClassId == 2 && x.SubAllotment.AppropriationId == 2 && x.SubAllotment.BudgetAllotmentId == id).Sum(x => x.Amount);
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = MooeTotalSaaConap - _MyDbContext.SubTransferedTo.Where(x => x.SubAllotment.AllotmentClassId == 2 && x.SubAllotment.AppropriationId == 2 && x.SubAllotment.BudgetAllotmentId == id).Sum(x => x.Amount);

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.appropriationID == 2 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.appropriationID == 2 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT

                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalMOOESaaConap;

                            //PERCENT OF UTILIZATION
                            ws.Cell(currentRow, 23).Style.Font.SetBold();
                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 23).Value = totalPercentMOOESaaConap;
                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            currentRow++;
                            //END CONAP SAA MOOE LOOP
                        }*/

                        //START IF CONAP MOOE PREVIOUS YEAR WAS CHECKED
                        //START CONAP MOOE SUB-ALLOTMENT
                        if (_MyDbContext.SubAllotment.Where(x => x.AppropriationId == 2 && x.AllotmentClassId == 2 && x.Budget_allotment.Yearly_reference.YearlyReference == result && x.IsAddToNextAllotment == true).Any())
                        {
                            //START CONAP SAA MOOE LOOP
                            ws.Cell(currentRow, 1).Style.Font.SetBold();
                            ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 1).Value = "CONAP MOOE SUB-ALLOTMENT";
                            currentRow++;
                            foreach (var groups in _MyDbContext.SubAllotment.Where(x => x.AllotmentClassId == 2 && x.AppropriationId == 2 && x.IsAddToNextAllotment == true && x.Budget_allotment.Yearly_reference.YearlyReference == result)
                                .ToList()
                                .OrderBy(x => x.Suballotment_title)
                                .GroupBy(x => new { x.prexcId, x.AllotmentClassId }).ToList())
                            {
                                foreach (var prexcCode in groups.GroupBy(x => x.prexc.pap_code1))
                                {
                                    ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 1).Value = prexcCode.FirstOrDefault().prexc.pap_code1;
                                    ws.Cell(currentRow, 1).Style.NumberFormat.Format = "00";
                                    ws.Cell(currentRow, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                    ws.Range(ws.Cell(currentRow, 1), ws.Cell(currentRow, 11)).Merge();
                                    currentRow++;
                                }
                                foreach (var subAllotment in groups)
                                {
                                    /*ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 1).Value = _MyDbContext.Prexc.FirstOrDefault(x => x.Id == subAllotment.prexcId)?.pap_code1;
                                    ws.Cell(currentRow, 1).Style.NumberFormat.Format = "00";
                                    ws.Cell(currentRow, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                    ws.Range(ws.Cell(currentRow, 1), ws.Cell(currentRow, 11)).Merge();
                                    currentRow++;*/

                                    ws.Cell(currentRow, 1).Style.Font.SetBold();
                                    ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 1).Value = subAllotment.FundId.ToString();
                                    ws.Cell(currentRow, 1).Value = "CONAP" + " " + subAllotment.Suballotment_title?.ToUpper().ToString();
                                    ws.Range(ws.Cell(currentRow, 1), ws.Cell(currentRow, 10)).Merge();



                                    ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 11).Value = subAllotment.Date.ToShortDateString();
                                    ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);

                                    currentRow++;

                                    ws.Cell(currentRow, 2).Style.Font.SetItalic();
                                    ws.Cell(currentRow, 2).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 2).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 2).Value = subAllotment.prexc.pap_initial.ToUpper() + "-" + subAllotment.Description?.ToString();
                                    ws.Range(ws.Cell(currentRow, 2), ws.Cell(currentRow, 18)).Merge();
                                    currentRow++;

                                    foreach (var suballotment_amount in _MyDbContext.Suballotment_amount.Where(x => x.status == "activated" && x.SubAllotment.AppropriationId == 2 && x.SubAllotment.AllotmentClassId == 2 && x.SubAllotment.IsAddToNextAllotment == true && x.SubAllotmentId == subAllotment.SubAllotmentId))
                                    {
                                        var uacsID = from Suballotment in _MyDbContext.Suballotment_amount
                                                     join u in _MyDbContext.Uacs
                                                     on Suballotment.UacsId equals u.UacsId
                                                     select Suballotment.UacsId;


                                        var fortheMonth = (from oa in _MyDbContext.ObligationAmount
                                                           join o in _MyDbContext.Obligation
                                                           on oa.ObligationId equals o.Id
                                                           join f in _MyDbContext.FundSources
                                                           on o.FundSourceId equals f.FundSourceId
                                                           where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                           select new
                                                           {
                                                               amount = oa.Amount,
                                                               uacsId = oa.UacsId,
                                                               date = o.Date,
                                                               sourceId = o.FundSourceId,
                                                               sourceType = o.source_type,
                                                               status = o.status,
                                                               allotmentClassID = f.AllotmentClassId

                                                           });

                                        var fundsourceID = (from Suballotment in _MyDbContext.SubAllotment
                                                            join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                            on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                            where Suballotment.SubAllotmentId == Suballotment_amount.SubAllotmentId
                                                            select new
                                                            {
                                                                saId = Suballotment.SubAllotmentId
                                                            });

                                        var fundsourceamountID = (from Suballotment in _MyDbContext.SubAllotment
                                                                  join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                                  on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                                  where Suballotment.SubAllotmentId == Suballotment_amount.SubAllotmentId
                                                                  select new
                                                                  {
                                                                      saAmountId = Suballotment_amount.SubAllotmentId
                                                                  });

                                        var asAt = (from oa in _MyDbContext.ObligationAmount
                                                    join o in _MyDbContext.Obligation
                                                    on oa.ObligationId equals o.Id
                                                    where o.Date >= date1 && o.Date <= date2
                                                    select new
                                                    {
                                                        amount = oa.Amount,
                                                        uacsId = oa.UacsId,
                                                        sourceId = o.SubAllotmentId,
                                                        sourceType = o.source_type,
                                                        status = o.status
                                                    });

                                        var unobligated_amount = suballotment_amount.beginning_balance - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);

                                        total = 0;
                                        var afterrealignment_amount = suballotment_amount.beginning_balance - suballotment_amount.realignment_amount;

                                        ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == suballotment_amount.UacsId)?.Account_title.ToUpper().ToString();

                                        ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == suballotment_amount.UacsId)?.Expense_code;
                                        ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);

                                        if (suballotment_amount.beginning_balance != 0)
                                        {
                                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 14).Value = suballotment_amount.beginning_balance;
                                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                        }
                                        else
                                        {
                                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 14).Value = "-";
                                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        //TRANSFERED TO DATA FOR PS CURRENT SAA
                                        var transferTo = _MyDbContext.Uacs.Where(c => !_MyDbContext.SubTransferedTo.Select(b => b.SubAllotmentId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                        foreach (var transferedTo in _MyDbContext.SubTransferedTo.Where(x => x.SubAllotmentAmountId == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId/* && x.Id == transferTo*/).ToList())
                                        {
                                            currentRow++;
                                            ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                            ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Account_title.ToUpper().ToString();

                                            ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                            ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            ws.Cell(currentRow, 13).Value = "-";

                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            ws.Cell(currentRow, 19).Value = "(" + transferedTo.Amount.ToString("N", new CultureInfo("en-US")) + ")";

                                            currentRow++;
                                            ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            //ws.Cell(currentRow, 4).Style.Alignment.Indent = 3;
                                            ws.Cell(currentRow, 4).Style.Font.SetItalic();
                                            ws.Cell(currentRow, 4).Value = transferedTo.Particulars;

                                            ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                            ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            ws.Cell(currentRow, 13).Value = "-";

                                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                            ws.Cell(currentRow, 18).Value = "(" + transferedTo.Amount.ToString("N", new CultureInfo("en-US")) + ")";
                                        }
                                        //REALIGNMENT SAA
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                        {
                                            //REALIGNMENT SAA AMOUNT
                                            ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 17).Value = "(" + suballotment_amount.realignment_amount + ")";
                                            ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                        {
                                            //REALIGNMENT AMOUNT
                                            ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 17).Value = _MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId).FirstOrDefault().Realignment_amount;
                                            ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            //REALIGNMENT AMOUNT
                                            ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 17).Value = "-";
                                            ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }

                                        ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 18).Value = "-";
                                        ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                        var CONAPSAAMOOEafterrealignment_amount = suballotment_amount.beginning_balance - suballotment_amount.realignment_amount;
                                        var CONAPSAAMOOEafterrealignment_amountadd = suballotment_amount.beginning_balance + _MyDbContext.SubAllotment_Realignment.FirstOrDefault(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId)?.Realignment_amount;
                                        //TOTAL ADJUSTED ALLOTMENT
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any() || CONAPSAAMOOEafterrealignment_amount != 0)
                                        {
                                            //TOTAL ADJUSTED ALLOTMENT SAA
                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Value = CONAPSAAMOOEafterrealignment_amount;
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                        {
                                            //TOTAL ADJUSTED ALLOTMENT SAA
                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Value = CONAPSAAMOOEafterrealignment_amountadd;
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (CONAPSAAMOOEafterrealignment_amount == 0 || CONAPSAAMOOEafterrealignment_amountadd == 0)
                                        {
                                            //TOTAL ADJUSTED ALLOTMENT
                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Value = suballotment_amount.beginning_balance;
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (suballotment_amount.beginning_balance == 0)
                                        {
                                            //TOTAL ADJUSTED ALLOTMENT
                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Value = "-";
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }

                                        //OBLIGATED (FOR THE MONTH)
                                        if (fortheMonth.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount) != 0)
                                        {
                                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 20).Value = fortheMonth.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 20).Value = "-";
                                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        //OBLIGATED (AS AT)
                                        if (asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount) != 0)
                                        {
                                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 21).Value = asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 21).Value = "-";
                                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        //UNOBLIGATED BALANCE OF ALLOTMENT
                                        var CONAPSAAMOOEaddunobligated = CONAPSAAMOOEafterrealignment_amount - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                        var CONAPSAAMOOEdeductunobligated = CONAPSAAMOOEafterrealignment_amountadd - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any() || CONAPSAAMOOEaddunobligated != 0)
                                        {
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = CONAPSAAMOOEaddunobligated;
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                        {
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = CONAPSAAMOOEdeductunobligated;
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (CONAPSAAMOOEaddunobligated == 0 || CONAPSAAMOOEdeductunobligated == 0)
                                        {
                                            //UNOBLIGATED BALANCE OF ALLOTMENT
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = unobligated_amount;
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (unobligated_amount == 0)
                                        {
                                            //UNOBLIGATED BALANCE OF ALLOTMENT
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = "-";
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }

                                        if (asAt.Where(x => x.uacsId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().UacsId).Sum(x => x.amount) == 0 || afterrealignment_amount == 0)
                                        {
                                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 23).Value = "-";
                                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            //PERCENT OF UTILIZATION
                                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 23).Value = asAt.Where(x => x.uacsId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().UacsId).Sum(x => x.amount) / afterrealignment_amount;
                                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        //REALIGNMENT DATA SUB ALLOTMENT
                                        var data = _MyDbContext.Uacs.Where(c => !_MyDbContext.Suballotment_amount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                        foreach (var realignment in _MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId && x.Realignment_to == data))
                                        {
                                            currentRow++;
                                            Debug.WriteLine($"fsaid: {suballotment_amount.SubAllotmentAmountId}\nfundsrc_id {suballotment_amount}");
                                            //ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundSourceAmount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().Account_title.ToUpper().ToString();
                                            ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Account_title.ToUpper().ToString();
                                            ws.Cell(currentRow, 1).Style.Alignment.Indent = 3;

                                            ws.Cell(currentRow, 2).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Expense_code;
                                            ws.Cell(currentRow, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                            //ws.Cell(currentRow, 2).Style.Alignment.Indent = 3;

                                            ws.Cell(currentRow, 3).Value = "#,##0.00";
                                            ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                            //REALIGNMENT AMOUNT
                                            ws.Cell(currentRow, 4).Value = realignment.Realignment_amount;
                                            ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                            //REALIGNMENT AMOUNT
                                            ws.Cell(currentRow, 6).Value = "";
                                            ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        currentRow++;
                                        total = (double)suballotment_amount.beginning_balance;
                                    }

                                    var fortheMonthTotal = (from oa in _MyDbContext.ObligationAmount
                                                            join o in _MyDbContext.Obligation
                                                            on oa.ObligationId equals o.Id
                                                            where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                            select new
                                                            {
                                                                amount = oa.Amount,
                                                                uacsId = oa.UacsId,
                                                                sourceId = o.SubAllotmentId,
                                                                sourceType = o.source_type,
                                                                date = o.Date,
                                                                status = o.status
                                                            });

                                    var funds_filterTotal = (from Suballotment in _MyDbContext.SubAllotment
                                                             join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                             on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                             select new
                                                             {
                                                                 Id = Suballotment.SubAllotmentId
                                                             });

                                    var asAtTotal = (from oa in _MyDbContext.ObligationAmount
                                                     join o in _MyDbContext.Obligation
                                                     on oa.ObligationId equals o.Id
                                                     where o.Date >= date1 && o.Date <= date2
                                                     select new
                                                     {
                                                         amount = oa.Amount,
                                                         sourceId = o.SubAllotmentId,
                                                         uacsId = oa.UacsId,
                                                         sourceType = o.source_type,
                                                         status = o.status
                                                     });


                                    ws.Cell(currentRow, 4).Style.Font.SetBold();
                                    ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 4).Value = "SUBTOTAL " + "CONAP" + " " + subAllotment.Suballotment_title?.ToUpper();

                                    ws.Cell(currentRow, 14).Style.Font.SetBold();
                                    ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 14).Value = subAllotment.Beginning_balance;

                                    //REALIGNMENT SUBTOTAL
                                    var CONAPSAAMOOErealignment_subtotal = budget_allotment.SubAllotment.FirstOrDefault().SubAllotmentRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.SubAllotment.FirstOrDefault().SubAllotmentRealignment?.Sum(x => x.Realignment_amount);
                                    var CONAPSAAMOOEsub6 = subAllotment.Beginning_balance - subAllotment.SubAllotmentRealignment?.Sum(x => x.Realignment_amount) + subAllotment.SubAllotmentRealignment?.Sum(x => x.Realignment_amount);
                                    var CONAPSAAMOOEsub9 = CONAPSAAMOOEsub6 - asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                    if (CONAPSAAMOOErealignment_subtotal == null)
                                    {
                                        ws.Cell(currentRow, 17).Style.Font.SetBold();
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Value = "0.00";
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 17).Style.Font.SetBold();
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 17).Value = CONAPSAAMOOErealignment_subtotal;
                                    }

                                    ws.Cell(currentRow, 18).Style.Font.SetBold();
                                    ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 18).Value = budget_allotment.SubAllotment.FirstOrDefault().SubTransferedTo?.Sum(x => x.Amount);
                                    ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    ws.Cell(currentRow, 19).Style.Font.SetBold();
                                    ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 19).Value = subAllotment.Beginning_balance - budget_allotment.SubAllotment.FirstOrDefault().SubTransferedTo?.Sum(x => x.Amount);

                                    ws.Cell(currentRow, 20).Style.Font.SetBold();
                                    ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 20).Value = fortheMonthTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);

                                    //AS AT TOTAL
                                    ws.Cell(currentRow, 21).Style.Font.SetBold();
                                    ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 21).Value = asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);


                                    var unobligatedTotal = subAllotment.Beginning_balance - asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                    //SUBTOTAL UNOBLIGATED BALANCE OF ALLOTMENT
                                    ws.Cell(currentRow, 22).Style.Font.SetBold();
                                    ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 22).Value = unobligatedTotal;

                                    //PERCENT OF UTILIZATION
                                    ws.Cell(currentRow, 23).Style.Font.SetBold();
                                    ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 23).Value = asAtTotal.Where(x => x.sourceId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount) / budget_allotment.FundSources.FirstOrDefault()?.Beginning_balance;
                                    ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                    ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    allotment_totalSaa += (double)subAllotment.Beginning_balance;

                                    currentRow++;

                                }
                                //TOTAL PER GROUP
                                ws.Cell(currentRow, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 2).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 3).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 4).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 5).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 6).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 7).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 8).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 9).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 10).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 11).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 12).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 13).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 14).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 15).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 16).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 17).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 18).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 19).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 22).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 23).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 11).Style.Font.SetBold();
                                ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 11).Value = "SUB-TOTAL" + " " + "CONAP" + " " + groups.FirstOrDefault().prexc.pap_initial.ToUpper().ToString();

                                ws.Cell(currentRow, 14).Style.Font.SetBold();
                                ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 14).Value = groups.Sum(x => x.Beginning_balance);
                                currentRow++;
                            }


                            var MooeTotalSaaConap = _MyDbContext.SubAllotment.Where(x => x.IsAddToNextAllotment == true && x.AppropriationId == 2 && x.AllotmentClassId == 2).Sum(x => x.Beginning_balance);
                            var unobligatedTotalinTotalMOOESaaConap = MooeTotalSaaConap - asAtTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.appropriationID == 2 && x.sourceType == "sub_allotment" && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount);
                            var totalPercentMOOESaaConap = (double)asAtTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.appropriationID == 2).Sum(x => x.amount) / allotment_total;

                            ws.Cell(currentRow, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 2).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 3).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 4).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 5).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 6).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 7).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 8).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 9).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 10).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 11).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 12).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 13).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 14).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 15).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 16).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 17).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 18).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 19).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 22).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 23).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 11).Style.Font.SetBold();
                            ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 11).Value = "TOTAL CONAP MOOE SUB-ALLOTMENT";

                            ws.Cell(currentRow, 14).Style.Font.SetBold();
                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 14).Value = MooeTotalSaaConap;

                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_total;
                            }
                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = "0.00";
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = MooeTotalSaaConap;

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.appropriationID == 2 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.appropriationID == 2 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT

                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalMOOESaaConap;

                            //PERCENT OF UTILIZATION
                            ws.Cell(currentRow, 23).Style.Font.SetBold();
                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 23).Value = totalPercentMOOESaaConap;
                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            currentRow++;
                            //END CONAP SAA MOOE LOOP FOR CY RESULT
                        }
                        //END IF CONAP MOOE PREVIOUS YEAR WAS CHECKED

                        //IsAddToNextAllotment == true
                        //SAA MOOE RELEASED IN CY CURRENT YEAR
                        //START SAA MOOE RELEASED IN CY
                        if (_MyDbContext.SubAllotment.Where(x => x.AppropriationId == 2 && x.AllotmentClassId == 2 && x.IsAddToNextAllotment == true).Any())
                        {
                            //SAA MOOE RELEASED IN CY CURRENT YEAR
                            ws.Cell(currentRow, 1).Style.Font.SetBold();
                            ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 1).Value = "SAA MOOE RELEASED IN CY" + " " + year;
                            currentRow++;


                            foreach (var groups in budget_allotment.SubAllotment.Where(x => x.AllotmentClassId == 2 && x.AppropriationId == 2 && x.BudgetAllotmentId == id && !x.Suballotment_title.Contains("SARO")).OrderBy(x => x.Suballotment_title).GroupBy(x => new { x.prexcId, x.AllotmentClassId }).ToList())
                            {
                                foreach (var prexcCode in groups.GroupBy(x => x.prexc.pap_code1))
                                {
                                    ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 1).Value = prexcCode.FirstOrDefault().prexc.pap_code1;
                                    ws.Cell(currentRow, 1).Style.NumberFormat.Format = "00";
                                    ws.Cell(currentRow, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                    ws.Range(ws.Cell(currentRow, 1), ws.Cell(currentRow, 11)).Merge();
                                    currentRow++;
                                }
                                foreach (var subAllotment in groups)
                                {
                                    ws.Cell(currentRow, 1).Style.Font.SetBold();
                                    ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 1).Value = subAllotment.FundId.ToString();
                                    ws.Cell(currentRow, 1).Value = "CONAP" + " " + subAllotment.Suballotment_title?.ToUpper().ToString();
                                    ws.Range(ws.Cell(currentRow, 1), ws.Cell(currentRow, 9)).Merge();



                                    ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 11).Value = subAllotment.Date.ToShortDateString();
                                    ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);

                                    currentRow++;

                                    ws.Cell(currentRow, 2).Style.Font.SetItalic();
                                    ws.Cell(currentRow, 2).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 2).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 2).Value = subAllotment.prexc.pap_initial?.ToUpper().ToString() + "-" + subAllotment.Description?.ToString();
                                    ws.Range(ws.Cell(currentRow, 2), ws.Cell(currentRow, 18)).Merge();
                                    currentRow++;

                                    foreach (Suballotment_amount suballotment_amount in subAllotment.SubAllotmentAmounts.Where(x => x.status == "activated"))
                                    {
                                        var uacsID = from Suballotment in _MyDbContext.Suballotment_amount
                                                     join u in _MyDbContext.Uacs
                                                     on Suballotment.UacsId equals u.UacsId
                                                     select Suballotment.UacsId;


                                        var fortheMonth = (from oa in _MyDbContext.ObligationAmount
                                                           join o in _MyDbContext.Obligation
                                                           on oa.ObligationId equals o.Id
                                                           join f in _MyDbContext.FundSources
                                                           on o.FundSourceId equals f.FundSourceId
                                                           where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                           select new
                                                           {
                                                               amount = oa.Amount,
                                                               uacsId = oa.UacsId,
                                                               date = o.Date,
                                                               sourceId = o.FundSourceId,
                                                               sourceType = o.source_type,
                                                               status = o.status,
                                                               allotmentClassID = f.AllotmentClassId

                                                           });

                                        var fundsourceID = (from Suballotment in _MyDbContext.SubAllotment
                                                            join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                            on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                            where Suballotment.SubAllotmentId == Suballotment_amount.SubAllotmentId
                                                            select new
                                                            {
                                                                saId = Suballotment.SubAllotmentId
                                                            });

                                        var fundsourceamountID = (from Suballotment in _MyDbContext.SubAllotment
                                                                  join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                                  on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                                  where Suballotment.SubAllotmentId == Suballotment_amount.SubAllotmentId
                                                                  select new
                                                                  {
                                                                      saAmountId = Suballotment_amount.SubAllotmentId
                                                                  });

                                        var asAt = (from oa in _MyDbContext.ObligationAmount
                                                    join o in _MyDbContext.Obligation
                                                    on oa.ObligationId equals o.Id
                                                    where o.Date >= date1 && o.Date <= date2
                                                    select new
                                                    {
                                                        amount = oa.Amount,
                                                        uacsId = oa.UacsId,
                                                        sourceId = o.SubAllotmentId,
                                                        sourceType = o.source_type,
                                                        status = o.status
                                                    });

                                        var unobligated_amount = suballotment_amount.beginning_balance - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);

                                        total = 0;
                                        var afterrealignment_amount = suballotment_amount.beginning_balance - suballotment_amount.realignment_amount;

                                        ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == suballotment_amount.UacsId)?.Account_title.ToUpper().ToString();

                                        ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == suballotment_amount.UacsId)?.Expense_code;
                                        ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);

                                        if (suballotment_amount.beginning_balance != 0)
                                        {
                                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 14).Value = suballotment_amount.beginning_balance;
                                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                        }
                                        else
                                        {
                                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 14).Value = "-";
                                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        //REALIGNMENT SAA
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                        {
                                            //REALIGNMENT SAA AMOUNT
                                            ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 17).Value = "(" + suballotment_amount.realignment_amount + ")";
                                            ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                        {
                                            //REALIGNMENT AMOUNT
                                            ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 17).Value = _MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId).FirstOrDefault().Realignment_amount;
                                            ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            //REALIGNMENT AMOUNT
                                            ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 17).Value = "-";
                                            ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        //TRANSFERED TO DATA FOR SAA
                                        var transferTo = _MyDbContext.Uacs.Where(c => !_MyDbContext.SubTransferedTo.Select(b => b.SubAllotmentId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                        foreach (var transferedToSaa in _MyDbContext.SubTransferedTo.Where(x => x.SubAllotmentAmountId == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId /*&& x.Id == transferTo*/).ToList())
                                        {
                                            currentRow++;
                                            ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                            ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Account_title.ToUpper().ToString();

                                            ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                            ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            ws.Cell(currentRow, 13).Value = "-";

                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            ws.Cell(currentRow, 19).Value = "(" + transferedToSaa.Amount.ToString("N", new CultureInfo("en-US")) + ")";

                                            currentRow++;
                                            ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            //ws.Cell(currentRow, 4).Style.Alignment.Indent = 3;
                                            ws.Cell(currentRow, 4).Style.Font.SetItalic();
                                            ws.Cell(currentRow, 4).Value = transferedToSaa.Particulars;

                                            ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                            ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            ws.Cell(currentRow, 13).Value = "-";

                                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            ws.Cell(currentRow, 18).Value = "(" + transferedToSaa.Amount.ToString("N", new CultureInfo("en-US")) + ")";
                                        }
                                        var CONAPSAAMOOEafterrealignment_amount = suballotment_amount.beginning_balance - suballotment_amount.realignment_amount;
                                        var CONAPSAAMOOEafterrealignment_amountadd = suballotment_amount.beginning_balance + _MyDbContext.SubAllotment_Realignment.FirstOrDefault(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId)?.Realignment_amount;
                                        //TOTAL ADJUSTED ALLOTMENT
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any() || CONAPSAAMOOEafterrealignment_amount != 0)
                                        {
                                            //TOTAL ADJUSTED ALLOTMENT SAA
                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Value = CONAPSAAMOOEafterrealignment_amount;
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                        {
                                            //TOTAL ADJUSTED ALLOTMENT SAA
                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Value = CONAPSAAMOOEafterrealignment_amountadd;
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (CONAPSAAMOOEafterrealignment_amount == 0 || CONAPSAAMOOEafterrealignment_amountadd == 0)
                                        {
                                            //TOTAL ADJUSTED ALLOTMENT
                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Value = suballotment_amount.beginning_balance;
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (suballotment_amount.beginning_balance == 0)
                                        {
                                            //TOTAL ADJUSTED ALLOTMENT
                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Value = "-";
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }

                                        //OBLIGATED (FOR THE MONTH)
                                        if (fortheMonth.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount) != 0)
                                        {
                                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 20).Value = fortheMonth.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 20).Value = "-";
                                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        //OBLIGATED (AS AT)
                                        if (asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount) != 0)
                                        {
                                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 21).Value = asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 21).Value = "-";
                                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        //UNOBLIGATED BALANCE OF ALLOTMENT
                                        var CONAPSAAMOOEaddunobligated = CONAPSAAMOOEafterrealignment_amount - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                        var CONAPSAAMOOEdeductunobligated = CONAPSAAMOOEafterrealignment_amountadd - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any() || CONAPSAAMOOEaddunobligated != 0)
                                        {
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = CONAPSAAMOOEaddunobligated;
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                        {
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = CONAPSAAMOOEdeductunobligated;
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (CONAPSAAMOOEaddunobligated == 0 || CONAPSAAMOOEdeductunobligated == 0)
                                        {
                                            //UNOBLIGATED BALANCE OF ALLOTMENT
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = unobligated_amount;
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (unobligated_amount == 0)
                                        {
                                            //UNOBLIGATED BALANCE OF ALLOTMENT
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = "-";
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }

                                        if (asAt.Where(x => x.uacsId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().UacsId).Sum(x => x.amount) == 0 || afterrealignment_amount == 0)
                                        {
                                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 23).Value = "-";
                                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            //PERCENT OF UTILIZATION
                                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 23).Value = asAt.Where(x => x.uacsId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().UacsId).Sum(x => x.amount) / afterrealignment_amount;
                                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        //REALIGNMENT DATA SUB ALLOTMENT
                                        var data = _MyDbContext.Uacs.Where(c => !_MyDbContext.Suballotment_amount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                        foreach (var realignment in _MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId && x.Realignment_to == data))
                                        {
                                            currentRow++;
                                            Debug.WriteLine($"fsaid: {suballotment_amount.SubAllotmentAmountId}\nfundsrc_id {suballotment_amount}");
                                            //ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundSourceAmount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().Account_title.ToUpper().ToString();
                                            ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Account_title.ToUpper().ToString();
                                            ws.Cell(currentRow, 1).Style.Alignment.Indent = 3;

                                            ws.Cell(currentRow, 2).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Expense_code;
                                            ws.Cell(currentRow, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                            //ws.Cell(currentRow, 2).Style.Alignment.Indent = 3;

                                            ws.Cell(currentRow, 3).Value = "#,##0.00";
                                            ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                            //REALIGNMENT AMOUNT
                                            ws.Cell(currentRow, 4).Value = realignment.Realignment_amount;
                                            ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                            //REALIGNMENT AMOUNT
                                            ws.Cell(currentRow, 6).Value = "";
                                            ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        currentRow++;
                                        total = (double)suballotment_amount.beginning_balance;
                                    }

                                    var fortheMonthTotal = (from oa in _MyDbContext.ObligationAmount
                                                            join o in _MyDbContext.Obligation
                                                            on oa.ObligationId equals o.Id
                                                            where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                            select new
                                                            {
                                                                amount = oa.Amount,
                                                                uacsId = oa.UacsId,
                                                                sourceId = o.SubAllotmentId,
                                                                sourceType = o.source_type,
                                                                date = o.Date,
                                                                status = o.status
                                                            });

                                    var funds_filterTotal = (from Suballotment in _MyDbContext.SubAllotment
                                                             join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                             on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                             select new
                                                             {
                                                                 Id = Suballotment.SubAllotmentId
                                                             });

                                    var asAtTotal = (from oa in _MyDbContext.ObligationAmount
                                                     join o in _MyDbContext.Obligation
                                                     on oa.ObligationId equals o.Id
                                                     where o.Date >= date1 && o.Date <= date2
                                                     select new
                                                     {
                                                         amount = oa.Amount,
                                                         sourceId = o.SubAllotmentId,
                                                         uacsId = oa.UacsId,
                                                         sourceType = o.source_type,
                                                         status = o.status
                                                     });


                                    ws.Cell(currentRow, 4).Style.Font.SetBold();
                                    ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 4).Value = "SUBTOTAL " + subAllotment.Suballotment_title?.ToUpper();

                                    ws.Cell(currentRow, 14).Style.Font.SetBold();
                                    ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 14).Value = subAllotment.Beginning_balance;

                                    //REALIGNMENT SUBTOTAL
                                    var CONAPSAAMOOErealignment_subtotal = budget_allotment.SubAllotment.FirstOrDefault().SubAllotmentRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.SubAllotment.FirstOrDefault().SubAllotmentRealignment?.Sum(x => x.Realignment_amount);
                                    var CONAPSAAMOOEsub6 = subAllotment.Beginning_balance - subAllotment.SubAllotmentRealignment?.Sum(x => x.Realignment_amount) + subAllotment.SubAllotmentRealignment?.Sum(x => x.Realignment_amount);
                                    var CONAPSAAMOOEsub9 = CONAPSAAMOOEsub6 - asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                    if (CONAPSAAMOOErealignment_subtotal == null)
                                    {
                                        ws.Cell(currentRow, 17).Style.Font.SetBold();
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Value = "0.00";
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 17).Style.Font.SetBold();
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 17).Value = CONAPSAAMOOErealignment_subtotal;
                                    }

                                    ws.Cell(currentRow, 18).Style.Font.SetBold();
                                    ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 18).Value = subAllotment.SubTransferedTo.Sum(x => x.Amount);
                                    ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    ws.Cell(currentRow, 19).Style.Font.SetBold();
                                    ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 19).Value = subAllotment.Beginning_balance - subAllotment.SubTransferedTo.Sum(x => x.Amount);

                                    ws.Cell(currentRow, 20).Style.Font.SetBold();
                                    ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 20).Value = fortheMonthTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);

                                    //AS AT TOTAL
                                    ws.Cell(currentRow, 21).Style.Font.SetBold();
                                    ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 21).Value = asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);


                                    var unobligatedTotal = subAllotment.Beginning_balance - asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                    //SUBTOTAL UNOBLIGATED BALANCE OF ALLOTMENT
                                    ws.Cell(currentRow, 22).Style.Font.SetBold();
                                    ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 22).Value = unobligatedTotal;

                                    //PERCENT OF UTILIZATION
                                    ws.Cell(currentRow, 23).Style.Font.SetBold();
                                    ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 23).Value = asAtTotal.Where(x => x.sourceId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount) / budget_allotment.FundSources.FirstOrDefault()?.Beginning_balance;
                                    ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                    ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    allotment_totalSaa += (double)subAllotment.Beginning_balance;

                                    currentRow++;

                                }

                                //SUB-TOTAL PER GROUP
                                ws.Cell(currentRow, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 2).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 3).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 4).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 5).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 6).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 7).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 8).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 9).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 10).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 11).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 12).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 13).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 14).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 15).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 16).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 17).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 18).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 19).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 22).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 23).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 11).Style.Font.SetBold();
                                ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 11).Value = "SUB-TOTAL" + " " + groups?.FirstOrDefault()?.prexc?.pap_initial?.ToUpper().ToString();

                                ws.Cell(currentRow, 14).Style.Font.SetBold();
                                ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 14).Value = groups.Sum(x => x.Beginning_balance);
                                currentRow++;
                            }

                            var MooeTotalSaaConap = _MyDbContext.SubAllotment.Where(x => x.AllotmentClassId == 2 && x.AppropriationId == 2 && x.BudgetAllotmentId == id).Sum(x => x.Beginning_balance);
                            var unobligatedTotalinTotalMOOESaaConap = MooeTotalSaaConap - asAtTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.appropriationID == 2 && x.sourceType == "sub_allotment" && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount);
                            var totalPercentMOOESaaConap = (double)asAtTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.appropriationID == 2).Sum(x => x.amount) / allotment_total;

                            //TOTAL
                            ws.Cell(currentRow, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 2).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 3).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 4).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 5).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 6).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 7).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 8).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 9).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 10).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 11).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 12).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 13).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 14).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 15).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 16).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 17).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 18).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 19).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 22).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 23).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 11).Style.Font.SetBold();
                            ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 11).Value = "TOTAL SAA MOOE RELEASED IN CY" + " " + year;

                            ws.Cell(currentRow, 14).Style.Font.SetBold();
                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 14).Value = MooeTotalSaaConap;

                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_total;
                            }
                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = _MyDbContext.SubTransferedTo.Where(x => x.SubAllotment.AllotmentClassId == 2 && x.SubAllotment.AppropriationId == 2 && x.SubAllotment.BudgetAllotmentId == id).Sum(x => x.Amount);
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = MooeTotalSaaConap - _MyDbContext.SubTransferedTo.Where(x => x.SubAllotment.AllotmentClassId == 2 && x.SubAllotment.AppropriationId == 2 && x.SubAllotment.BudgetAllotmentId == id).Sum(x => x.Amount);

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.appropriationID == 2 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.appropriationID == 2 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT

                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalMOOESaaConap;

                            //PERCENT OF UTILIZATION
                            ws.Cell(currentRow, 23).Style.Font.SetBold();
                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 23).Value = totalPercentMOOESaaConap;
                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            currentRow++;
                            //END CONAP SAA MOOE LOOP
                        }
                        //END SAA MOOE RELEASED IN CY

                        if (_MyDbContext.FundSources.Where(x => x.AppropriationId == 1 && x.AllotmentClassId == 3).Any())
                        {
                            ws.Cell(currentRow, 1).Style.Font.SetBold();
                            ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 1).Style.Font.FontName = "TAHOMA";
                            ws.Cell(currentRow, 1).Value = "Capital Outlay".ToUpper();
                            currentRow++;
                        }
                        //START CONAP CO LOOP
                        if (_MyDbContext.FundSources.Where(x => x.AppropriationId == 2 && x.AllotmentClassId == 3).Any())
                        {
                            foreach (FundSource fundSource in budget_allotment.FundSources.Where(x => x.AllotmentClassId == 3 && x.AppropriationId == 2))
                            {

                                ws.Cell(currentRow, 1).Value = fundSource.Prexc.pap_code1;
                                ws.Cell(currentRow, 1).Style.NumberFormat.Format = "00";
                                ws.Cell(currentRow, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                ws.Range(ws.Cell(currentRow, 1), ws.Cell(currentRow, 11)).Merge();
                                currentRow++;

                                //ws.Cell(currentRow, 1).Style.Font.FontName = "TAHOMA";
                                //ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 1).Style.Font.SetBold();
                                ws.Cell(currentRow, 1).Value = fundSource.FundSourceTitle.ToUpper().ToString();
                                //ws.Cell(currentRow, 1).Value = dateTime.FirstOrDefault().FundSourceTitle.ToUpper().ToString();
                                currentRow++;

                                foreach (FundSourceAmount fundsource_amount in fundSource.FundSourceAmounts.Where(x => x.status == "activated"))
                                {
                                    var uacsID = from fa in _MyDbContext.FundSourceAmount
                                                 join u in _MyDbContext.Uacs
                                                 on fa.UacsId equals u.UacsId
                                                 select fa.UacsId;


                                    var fortheMonth = (from oa in _MyDbContext.ObligationAmount
                                                       join o in _MyDbContext.Obligation
                                                       on oa.ObligationId equals o.Id
                                                       where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                       select new
                                                       {
                                                           amount = oa.Amount,
                                                           uacsId = oa.UacsId,
                                                           date = o.Date,
                                                           sourceId = o.FundSourceId,
                                                           status = o.status

                                                       });

                                    var fundsourceID = (from f in _MyDbContext.FundSources
                                                        join fa in _MyDbContext.FundSourceAmount
                                                        on f.FundSourceId equals fa.FundSourceId
                                                        where f.FundSourceId == fa.FundSourceId
                                                        select new
                                                        {
                                                            faId = f.FundSourceId
                                                        });

                                    var fundsourceamountID = (from f in _MyDbContext.FundSources
                                                              join fa in _MyDbContext.FundSourceAmount
                                                              on f.FundSourceId equals fa.FundSourceId
                                                              where f.FundSourceId == fa.FundSourceId
                                                              select new
                                                              {
                                                                  faAmountId = fa.FundSourceId
                                                              });




                                    var asAt = (from oa in _MyDbContext.ObligationAmount
                                                join o in _MyDbContext.Obligation
                                                on oa.ObligationId equals o.Id
                                                where o.Date >= date1 && o.Date <= date2
                                                select new
                                                {
                                                    amount = oa.Amount,
                                                    uacsId = oa.UacsId,
                                                    sourceId = o.FundSourceId,
                                                    status = o.status
                                                });

                                    var unobligated_amount = fundsource_amount.beginning_balance - asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);


                                    total = 0;
                                    var afterrealignment_amount = fundsource_amount.beginning_balance - fundsource_amount.realignment_amount;
                                    ws.Cell(currentRow, 1).Value = fundsource_amount.Uacs.Account_title.ToUpper().ToString();
                                    ws.Cell(currentRow, 1).Style.Alignment.Indent = 3;
                                    ws.Cell(currentRow, 2).Value = fundsource_amount.Uacs.Expense_code;
                                    ws.Cell(currentRow, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);

                                    if (fundsource_amount.beginning_balance != 0)
                                    {
                                        ws.Cell(currentRow, 3).Value = fundsource_amount.beginning_balance;
                                        ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 3).Value = "-";
                                        ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (_MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId).Any())
                                    {
                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 4).Value = "(" + _MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId).FirstOrDefault()?.Realignment_amount + ")";
                                        ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else if (_MyDbContext.FundsRealignment.Where(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId).Any())
                                    {
                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 4).Value = _MyDbContext.FundsRealignment.Where(x => x.Realignment_to == fundsource_amount.UacsId).FirstOrDefault().Realignment_amount;
                                        ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 4).Value = "-";
                                        ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    ws.Cell(currentRow, 5).Value = "-";
                                    ws.Cell(currentRow, 5).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    //TOTAL ADJUSTED ALLOTMENT
                                    var CONAPCOafterrealignment_amount = fundsource_amount.beginning_balance - fundsource_amount.realignment_amount;
                                    var CONAPCOafterrealignment_amountadd = fundsource_amount.beginning_balance + _MyDbContext.FundsRealignment.FirstOrDefault(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId)?.Realignment_amount;
                                    if (_MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId).Any() || CONAPCOafterrealignment_amount != 0)
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT
                                        ws.Cell(currentRow, 6).Value = CONAPCOafterrealignment_amount;
                                        ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (_MyDbContext.FundsRealignment.Where(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId).Any())
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT
                                        ws.Cell(currentRow, 6).Value = CONAPCOafterrealignment_amountadd;
                                        ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (CONAPCOafterrealignment_amount == 0 || CONAPCOafterrealignment_amountadd == 0)
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT
                                        ws.Cell(currentRow, 6).Value = fundsource_amount.beginning_balance;
                                        ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (fundsource_amount.beginning_balance == 0)
                                    {
                                        //TOTAL ADJUSTED ALLOTMENT
                                        ws.Cell(currentRow, 6).Value = "-";
                                        ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    //OBLIGATED (FOR THE MONTH)
                                    if (fortheMonth.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount) != 0)
                                    {
                                        ws.Cell(currentRow, 7).Value = fortheMonth.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);
                                        ws.Cell(currentRow, 7).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 7).Value = "-";
                                        ws.Cell(currentRow, 7).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    //OBLIGATED (AS AT)
                                    if (asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount) != 0)
                                    {
                                        ws.Cell(currentRow, 8).Value = asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);
                                        ws.Cell(currentRow, 8).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 8).Value = "-";
                                        ws.Cell(currentRow, 8).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }


                                    //UNOBLIGATED BALANCE OF ALLOTMENT
                                    var CONAPCOaddunobligated = CONAPCOafterrealignment_amount - asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);
                                    var CONAPCOdeductunobligated = CONAPCOafterrealignment_amountadd - asAt.Where(x => x.uacsId == fundsource_amount.UacsId && x.sourceId == fundsource_amount.FundSourceId && x.status == "activated").Sum(x => x.amount);
                                    if (_MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId).Any() || CONAPCOaddunobligated != 0)
                                    {
                                        ws.Cell(currentRow, 9).Value = CONAPCOaddunobligated;
                                        ws.Cell(currentRow, 9).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (_MyDbContext.FundsRealignment.Where(x => x.Realignment_to == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId).Any())
                                    {
                                        ws.Cell(currentRow, 9).Value = CONAPCOdeductunobligated;
                                        ws.Cell(currentRow, 9).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (CONAPCOaddunobligated == 0 || CONAPCOdeductunobligated == 0)
                                    {
                                        //UNOBLIGATED BALANCE OF ALLOTMENT
                                        ws.Cell(currentRow, 9).Value = unobligated_amount;
                                        ws.Cell(currentRow, 9).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    if (unobligated_amount == 0)
                                    {
                                        //UNOBLIGATED BALANCE OF ALLOTMENT
                                        ws.Cell(currentRow, 9).Value = "-";
                                        ws.Cell(currentRow, 9).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    //PERCENT OF UTILIZATION
                                    if (asAt.Where(x => x.uacsId == fundsource_amount.UacsId).Sum(x => x.amount) != 0 || afterrealignment_amount != 0)
                                    {
                                        ws.Cell(currentRow, 10).Value = asAt.Where(x => x.uacsId == fundsource_amount.UacsId).Sum(x => x.amount) / afterrealignment_amount;
                                        ws.Cell(currentRow, 10).Style.NumberFormat.Format = "0.00%";
                                        ws.Cell(currentRow, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 10).Value = "-";
                                        ws.Cell(currentRow, 10).Style.NumberFormat.Format = "0.00%";
                                        ws.Cell(currentRow, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    //TRANSFERED TO DATA FOR CO CURRENT
                                    var transferTo = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundTransferedTo.Select(b => b.FundSourceAmountId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                    foreach (var transferedTo in _MyDbContext.FundTransferedTo.Where(x => x.FundSourceAmountId == fundsource_amount.UacsId && x.FundSourceId == fundsource_amount.FundSourceId/* && x.Id == transferTo*/).ToList())
                                    {
                                        currentRow++;
                                        ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                        ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Account_title.ToUpper().ToString();

                                        ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                        ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 13).Value = "-";

                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 19).Value = "(" + transferedTo.Amount.ToString("N", new CultureInfo("en-US")) + ")";

                                        currentRow++;
                                        ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        //ws.Cell(currentRow, 4).Style.Alignment.Indent = 3;
                                        ws.Cell(currentRow, 4).Style.Font.SetItalic();
                                        ws.Cell(currentRow, 4).Value = transferedTo.Particulars;

                                        ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                        ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 13).Value = "-";

                                        ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        ws.Cell(currentRow, 18).Value = "(" + transferedTo.Amount.ToString("N", new CultureInfo("en-US")) + ")";
                                    }
                                    //REALIGNMENT DATA FOR CO CURRENT
                                    var data = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundSourceAmount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                    foreach (var realignment in _MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == fundsource_amount.FundSourceAmountId && x.FundSourceId == fundsource_amount.FundSourceId && x.Realignment_to == data))
                                    {
                                        currentRow++;
                                        Debug.WriteLine($"fsaid: {fundsource_amount.FundSourceAmountId}\nfundsrc_id {fundsource_amount}");
                                        //ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundSourceAmount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().Account_title.ToUpper().ToString();
                                        ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Account_title.ToUpper().ToString();
                                        ws.Cell(currentRow, 1).Style.Alignment.Indent = 3;

                                        ws.Cell(currentRow, 2).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Expense_code;
                                        ws.Cell(currentRow, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        //ws.Cell(currentRow, 2).Style.Alignment.Indent = 3;

                                        ws.Cell(currentRow, 3).Value = "#,##0.00";
                                        ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 4).Value = realignment.Realignment_amount;
                                        ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 6).Value = "";
                                        ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    currentRow++;
                                    total = (double)fundsource_amount.beginning_balance;
                                }

                                var fortheMonthTotal = (from oa in _MyDbContext.ObligationAmount
                                                        join o in _MyDbContext.Obligation
                                                        on oa.ObligationId equals o.Id
                                                        where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                        select new
                                                        {
                                                            amount = oa.Amount,
                                                            uacsId = oa.UacsId,
                                                            sourceId = o.FundSourceId,
                                                            date = o.Date,
                                                            status = o.status
                                                        });

                                var funds_filterTotal = (from f in _MyDbContext.FundSources
                                                         join fa in _MyDbContext.FundSourceAmount
                                                         on f.FundSourceId equals fa.FundSourceId
                                                         select new
                                                         {
                                                             Id = f.FundSourceId
                                                         });

                                var asAtTotal = (from oa in _MyDbContext.ObligationAmount
                                                 join o in _MyDbContext.Obligation
                                                 on oa.ObligationId equals o.Id
                                                 where o.Date >= date1 && o.Date <= date2
                                                 select new
                                                 {
                                                     amount = oa.Amount,
                                                     sourceId = o.FundSourceId,
                                                     uacsId = oa.UacsId,
                                                     status = o.status
                                                 });

                                //ws.Cell(currentRow, 1).Style.Font.FontName = "TAHOMA";
                                //ws.Cell(currentRow, 1).Style.Font.FontSize = 9;
                                ws.Cell(currentRow, 1).Style.Alignment.Indent = 3;
                                ws.Cell(currentRow, 1).Style.Font.SetBold();
                                ws.Cell(currentRow, 1).Value = "SUBTOTAL " + fundSource.FundSourceTitle.ToUpper()/* + " - " + budget_allotment.FundSources.FirstOrDefault().AllotmentClass.Account_Code*/;

                                //ws.Cell(currentRow, 3).Style.Font.FontName = "TAHOMA";
                                //ws.Cell(currentRow, 3).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 3).Style.Font.SetBold();
                                ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 3).Value = fundSource.Beginning_balance;

                                //REALIGNMENT SUBTOTAL
                                var realignment_subtotal = budget_allotment.FundSources.FirstOrDefault().FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault().FundsRealignment?.Sum(x => x.Realignment_amount);
                                if (realignment_subtotal == null)
                                {
                                    ws.Cell(currentRow, 4).Style.Font.SetBold();
                                    ws.Cell(currentRow, 4).Value = "0.00";
                                    ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                }
                                else
                                {
                                    ws.Cell(currentRow, 4).Style.Font.SetBold();
                                    ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 4).Value = realignment_subtotal;
                                }
                                ws.Cell(currentRow, 5).Style.Font.SetBold();
                                ws.Cell(currentRow, 5).Value = "0.00";
                                ws.Cell(currentRow, 5).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                ws.Cell(currentRow, 6).Style.Font.SetBold();
                                ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 6).Value = fundSource.Beginning_balance;

                                ws.Cell(currentRow, 7).Style.Font.SetBold();
                                ws.Cell(currentRow, 7).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 7).Value = fortheMonthTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount);

                                //AS AT TOTAL
                                ws.Cell(currentRow, 8).Style.Font.SetBold();
                                ws.Cell(currentRow, 8).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 8).Value = asAtTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount);


                                var unobligatedTotal = fundSource.Beginning_balance - asAtTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId).Sum(x => x.amount);
                                //SUBTOTAL UNOBLIGATED BALANCE OF ALLOTMENT
                                ws.Cell(currentRow, 9).Style.Font.SetBold();
                                ws.Cell(currentRow, 9).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 9).Value = unobligatedTotal;

                                //PERCENT OF UTILIZATION
                                ws.Cell(currentRow, 10).Value = asAtTotal.Where(x => x.sourceId == fundSource.FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount) / fundSource.Beginning_balance;
                                ws.Cell(currentRow, 10).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                allotment_total += (double)fundSource.Beginning_balance;

                                currentRow++;




                            }

                            ws.Cell(currentRow, 1).Style.Alignment.Indent = 4;
                            ws.Cell(currentRow, 1).Style.Font.SetBold();
                            ws.Cell(currentRow, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 1).Value = "TOTAL CONAP CO";

                            ws.Cell(currentRow, 3).Style.Font.SetBold();
                            ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 3).Value = CoConapTotal;
                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 4).Style.Font.SetBold();
                                ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 4).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 4).Style.Font.SetBold();
                                ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 4).Value = realignment_total;
                            }
                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 5).Style.Font.SetBold();
                            ws.Cell(currentRow, 5).Value = "0.00";
                            ws.Cell(currentRow, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 6).Style.Font.SetBold();
                            ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 6).Value = CoConapTotal;

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 7).Style.Font.SetBold();
                            ws.Cell(currentRow, 7).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 7).Value = fortheMonthTotalinTotalCoConap.Where(x => x.allotmentClassID == 3 && x.appropriationID == 2).Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 8).Style.Font.SetBold();
                            ws.Cell(currentRow, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 8).Value = asAtTotalinTotalCoConap.Where(x => x.allotmentClassID == 3 && x.appropriationID == 2).Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT
                            ws.Cell(currentRow, 9).Style.Font.SetBold();
                            ws.Cell(currentRow, 9).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 9).Value = unobligatedTotalinTotalCoConap;

                            //PERCENT OF UTILIZATION
                            if (asAtTotalinTotalPSConap.Where(x => x.allotmentClassID == 1 && x.appropriationID == 2).Sum(x => x.amount) == 0 || CoConapTotal == 0)
                            {
                                ws.Cell(currentRow, 10).Value = "";
                                ws.Cell(currentRow, 10).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                            }
                            else
                            {
                                var totalPercentCoConap = asAtTotalinTotalPSConap.Where(x => x.allotmentClassID == 1 && x.appropriationID == 2).Sum(x => x.amount) / CoConapTotal;
                                ws.Cell(currentRow, 10).Value = totalPercentCoConap;
                                ws.Cell(currentRow, 10).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                            }
                        }
                        //END CONAP CO LOOP

                        if (_MyDbContext.SubAllotment.Where(x => x.AppropriationId == 2 && x.AllotmentClassId == 3 && x.BudgetAllotmentId == id).Any())
                        {
                            //START CONAP SAA CO LOOP
                            ws.Cell(currentRow, 1).Style.Font.SetBold();
                            ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 1).Value = "CONAP CO SUB-ALLOTMENT";
                            currentRow++;
                            foreach (SubAllotment subAllotment in budget_allotment.SubAllotment.Where(x => x.AllotmentClassId == 3 && x.AppropriationId == 2 && x.BudgetAllotmentId == id))
                            {
                                ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 1).Value = _MyDbContext.Prexc.FirstOrDefault(x => x.Id == subAllotment.prexcId)?.pap_code1;
                                ws.Cell(currentRow, 1).Style.NumberFormat.Format = "00";
                                ws.Cell(currentRow, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                ws.Range(ws.Cell(currentRow, 1), ws.Cell(currentRow, 11)).Merge();
                                currentRow++;

                                ws.Cell(currentRow, 1).Style.Font.SetBold();
                                ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 1).Value = subAllotment.Suballotment_title.ToUpper().ToString();

                                ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 11).Value = subAllotment.Date.ToShortDateString();
                                ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                currentRow++;

                                ws.Cell(currentRow, 2).Style.Font.SetItalic();
                                ws.Cell(currentRow, 2).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 2).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 2).Value = subAllotment.Description?.ToString();
                                ws.Range(ws.Cell(currentRow, 2), ws.Cell(currentRow, 18)).Merge();
                                currentRow++;

                                foreach (Suballotment_amount suballotment_amount in subAllotment.SubAllotmentAmounts.Where(x => x.status == "activated"))
                                {
                                    var uacsID = from Suballotment in _MyDbContext.Suballotment_amount
                                                 join u in _MyDbContext.Uacs
                                                 on Suballotment.UacsId equals u.UacsId
                                                 select Suballotment.UacsId;


                                    var fortheMonth = (from oa in _MyDbContext.ObligationAmount
                                                       join o in _MyDbContext.Obligation
                                                       on oa.ObligationId equals o.Id
                                                       join f in _MyDbContext.FundSources
                                                       on o.FundSourceId equals f.FundSourceId
                                                       where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                       select new
                                                       {
                                                           amount = oa.Amount,
                                                           uacsId = oa.UacsId,
                                                           date = o.Date,
                                                           sourceId = o.FundSourceId,
                                                           sourceType = o.source_type,
                                                           status = o.status,
                                                           allotmentClassID = f.AllotmentClassId

                                                       });

                                    var fundsourceID = (from Suballotment in _MyDbContext.SubAllotment
                                                        join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                        on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                        where Suballotment.SubAllotmentId == Suballotment_amount.SubAllotmentId
                                                        select new
                                                        {
                                                            saId = Suballotment.SubAllotmentId
                                                        });

                                    var fundsourceamountID = (from Suballotment in _MyDbContext.SubAllotment
                                                              join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                              on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                              where Suballotment.SubAllotmentId == Suballotment_amount.SubAllotmentId
                                                              select new
                                                              {
                                                                  saAmountId = Suballotment_amount.SubAllotmentId
                                                              });

                                    var asAt = (from oa in _MyDbContext.ObligationAmount
                                                join o in _MyDbContext.Obligation
                                                on oa.ObligationId equals o.Id
                                                where o.Date >= date1 && o.Date <= date2
                                                select new
                                                {
                                                    amount = oa.Amount,
                                                    uacsId = oa.UacsId,
                                                    sourceId = o.SubAllotmentId,
                                                    sourceType = o.source_type,
                                                    status = o.status
                                                });

                                    var unobligated_amount = suballotment_amount.beginning_balance - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);

                                    total = 0;
                                    var afterrealignment_amount = suballotment_amount.beginning_balance - suballotment_amount.realignment_amount;

                                    ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == suballotment_amount.UacsId)?.Account_title.ToUpper().ToString();

                                    ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == suballotment_amount.UacsId)?.Expense_code;
                                    ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);

                                    ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 14).Value = suballotment_amount.beginning_balance;
                                    ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    //TRANSFERED TO DATA FOR SAA
                                    var transferTo = _MyDbContext.Uacs.Where(c => !_MyDbContext.SubTransferedTo.Select(b => b.SubAllotmentId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                    foreach (var transferedTo in _MyDbContext.SubTransferedTo.Where(x => x.SubAllotmentAmountId == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId/* && x.Id == transferTo*/).ToList())
                                    {
                                        currentRow++;
                                        ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                        ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Account_title.ToUpper().ToString();

                                        ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                        ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 13).Value = "-";

                                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 19).Value = "(" + transferedTo.Amount.ToString("N", new CultureInfo("en-US")) + ")";

                                        currentRow++;
                                        ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        //ws.Cell(currentRow, 4).Style.Alignment.Indent = 3;
                                        ws.Cell(currentRow, 4).Style.Font.SetItalic();
                                        ws.Cell(currentRow, 4).Value = transferedTo.Particulars;

                                        ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                        ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 13).Value = "-";

                                        ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        ws.Cell(currentRow, 18).Value = "(" + transferedTo.Amount.ToString("N", new CultureInfo("en-US")) + ")";
                                    }
                                    //REALIGNMENT SAA
                                    if (suballotment_amount.realignment_amount == 0)
                                    {
                                        //REALIGNMENT SAA AMOUNT
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Value = "-";
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        //REALIGNMENT SAA AMOUNT
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Value = "(" + suballotment_amount.realignment_amount + ")";
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }

                                    ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 18).Value = "-";
                                    ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    //TOTAL ADJUSTED ALLOTMENT
                                    ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 19).Value = afterrealignment_amount;
                                    ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    //OBLIGATED (FOR THE MONTH)
                                    ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 20).Value = fortheMonth.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                    ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    //OBLIGATED (AS AT)
                                    ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 21).Value = asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                    ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    //UNOBLIGATED BALANCE OF ALLOTMENT
                                    ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 22).Value = unobligated_amount;
                                    ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    if (asAt.Where(x => x.uacsId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().UacsId).Sum(x => x.amount) == 0 || afterrealignment_amount == 0)
                                    {
                                        ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 23).Value = "-";
                                        ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                        ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    else
                                    {
                                        //PERCENT OF UTILIZATION
                                        ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 23).Value = asAt.Where(x => x.uacsId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().UacsId).Sum(x => x.amount) / afterrealignment_amount;
                                        ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                        ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }


                                    //REALIGNMENT DATA
                                    foreach (var realignment in _MyDbContext.FundsRealignment.Where(x => x.FundSourceAmountId == suballotment_amount.SubAllotmentAmountId && x.FundSourceId == suballotment_amount.SubAllotmentId))
                                    //foreach(var realignment in fundsource_amount.FundSource.FundsRealignment)
                                    {
                                        currentRow++;
                                        Debug.WriteLine($"fsaid: {suballotment_amount.SubAllotmentAmountId}\nfundsrc_id {suballotment_amount}");
                                        ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Account_title.ToUpper();
                                        ws.Cell(currentRow, 1).Style.Alignment.Indent = 3;
                                        ws.Cell(currentRow, 2).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Expense_code;
                                        ws.Cell(currentRow, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                        //ws.Cell(currentRow, 2).Style.Alignment.Indent = 3;

                                        ws.Cell(currentRow, 3).Value = "#,##0.00";
                                        ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                        //REALIGNMENT AMOUNT
                                        ws.Cell(currentRow, 4).Value = suballotment_amount.realignment_amount;
                                        ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    }
                                    currentRow++;
                                    total = (double)suballotment_amount.beginning_balance;
                                }

                                var fortheMonthTotal = (from oa in _MyDbContext.ObligationAmount
                                                        join o in _MyDbContext.Obligation
                                                        on oa.ObligationId equals o.Id
                                                        where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                        select new
                                                        {
                                                            amount = oa.Amount,
                                                            uacsId = oa.UacsId,
                                                            sourceId = o.SubAllotmentId,
                                                            sourceType = o.source_type,
                                                            date = o.Date,
                                                            status = o.status
                                                        });

                                var funds_filterTotal = (from Suballotment in _MyDbContext.SubAllotment
                                                         join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                         on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                         select new
                                                         {
                                                             Id = Suballotment.SubAllotmentId
                                                         });

                                var asAtTotal = (from oa in _MyDbContext.ObligationAmount
                                                 join o in _MyDbContext.Obligation
                                                 on oa.ObligationId equals o.Id
                                                 where o.Date >= date1 && o.Date <= date2
                                                 select new
                                                 {
                                                     amount = oa.Amount,
                                                     sourceId = o.SubAllotmentId,
                                                     uacsId = oa.UacsId,
                                                     sourceType = o.source_type,
                                                     status = o.status
                                                 });


                                ws.Cell(currentRow, 4).Style.Font.SetBold();
                                ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 4).Value = "SUBTOTAL " + subAllotment.Suballotment_title.ToUpper();

                                ws.Cell(currentRow, 14).Style.Font.SetBold();
                                ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 14).Value = subAllotment.Beginning_balance;

                                //TOTAL TRANSFER TO
                                ws.Cell(currentRow, 18).Style.Font.SetBold();
                                ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 18).Value = "0.00";
                                ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                ws.Cell(currentRow, 19).Style.Font.SetBold();
                                ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 19).Value = subAllotment.Beginning_balance;

                                ws.Cell(currentRow, 20).Style.Font.SetBold();
                                ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 20).Value = fortheMonthTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);

                                //AS AT TOTAL
                                ws.Cell(currentRow, 21).Style.Font.SetBold();
                                ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 21).Value = asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);


                                var unobligatedTotal = subAllotment.Beginning_balance - asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                //SUBTOTAL UNOBLIGATED BALANCE OF ALLOTMENT
                                ws.Cell(currentRow, 22).Style.Font.SetBold();
                                ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 22).Value = unobligatedTotal;

                                //PERCENT OF UTILIZATION
                                ws.Cell(currentRow, 23).Style.Font.SetBold();
                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                //ws.Cell(currentRow, 23).Value = asAtTotal.Where(x => x.sourceId == budget_allotment.FundSources?.FirstOrDefault().FundSourceAmounts?.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount) / budget_allotment.FundSources?.FirstOrDefault().Beginning_balance;
                                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                allotment_totalSaa += (double)subAllotment.Beginning_balance;

                                currentRow++;

                            }

                            var CoTotalSaaConap = _MyDbContext.SubAllotment.Where(x => x.AllotmentClassId == 3 && x.AppropriationId == 2 && x.BudgetAllotmentId == id).Sum(x => x.Beginning_balance);
                            var unobligatedTotalinTotalCoSaaConap = CoTotalSaaConap - asAtTotalinTotalPS.Where(x => x.allotmentClassID == 3 && x.appropriationID == 2 && x.sourceType == "sub_allotment" && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount);
                            var totalPercentCoSaaConap = (double)asAtTotalinTotalPS.Where(x => x.allotmentClassID == 3 && x.appropriationID == 2 && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount) / allotment_total;


                            ws.Cell(currentRow, 11).Style.Font.SetBold();
                            ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 11).Value = "TOTAL CONAP SAA MOOE";


                            ws.Cell(currentRow, 14).Style.Font.SetBold();
                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 14).Value = CoTotalSaaConap;

                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = _MyDbContext.SubTransferedTo.Where(x => x.SubAllotment.AllotmentClassId == 2 && x.SubAllotment.AppropriationId == 2 && x.SubAllotment.BudgetAllotmentId == id).Sum(x => x.Amount);
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = CoTotalSaaConap - _MyDbContext.SubTransferedTo.Where(x => x.SubAllotment.AllotmentClassId == 2 && x.SubAllotment.AppropriationId == 2 && x.SubAllotment.BudgetAllotmentId == id).Sum(x => x.Amount);

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 3 && x.appropriationID == 2 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 3 && x.appropriationID == 2 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT

                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalCoSaaConap;

                            //PERCENT OF UTILIZATION
                            ws.Cell(currentRow, 23).Style.Font.SetBold();
                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 23).Value = totalPercentCoSaaConap;
                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            currentRow++;
                            //END CONAP SAA CO LOOP
                        }


                        //CONAP CO SUB-ALLOTMENT
                        //PREVIOUS YEAR == result
                        if (_MyDbContext.SubAllotment.Where(x => x.AppropriationId == 2 && x.AllotmentClassId == 3 && x.Budget_allotment.Yearly_reference.YearlyReference == result && x.IsAddToNextAllotment == true).Any())
                        {
                            ws.Cell(currentRow, 1).Style.Font.SetBold();
                            ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 1).Value = "CONAP CO SUB-ALLOTMENT";
                            currentRow++;

                            foreach (var groups in _MyDbContext.SubAllotment.Include(x => x.SubTransferedTo).Where(x => x.AllotmentClassId == 3 && x.AppropriationId == 2 && x.IsAddToNextAllotment == true && x.Budget_allotment.Yearly_reference.YearlyReference == result && !x.Suballotment_title.Contains("SARO")).ToList().OrderBy(x => x.Suballotment_title).GroupBy(x => new { x.prexcId, x.AllotmentClassId }).ToList())
                            {
                                foreach (var prexcCode in groups.GroupBy(x => x.prexc.pap_code1))
                                {
                                    ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 1).Value = prexcCode.FirstOrDefault().prexc.pap_code1;
                                    ws.Cell(currentRow, 1).Style.NumberFormat.Format = "00";
                                    ws.Cell(currentRow, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                    ws.Range(ws.Cell(currentRow, 1), ws.Cell(currentRow, 11)).Merge();
                                    currentRow++;
                                }

                                foreach (var subAllotment in groups)
                                {
                                    ws.Cell(currentRow, 1).Style.Font.SetBold();
                                    ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 1).Value = subAllotment.FundId.ToString();
                                    ws.Cell(currentRow, 1).Value = "CONAP" + " " + subAllotment.Suballotment_title?.ToUpper().ToString();
                                    ws.Range(ws.Cell(currentRow, 1), ws.Cell(currentRow, 10)).Merge();



                                    ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 11).Value = subAllotment.Date.ToShortDateString();
                                    ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);

                                    currentRow++;

                                    ws.Cell(currentRow, 2).Style.Font.SetItalic();
                                    ws.Cell(currentRow, 2).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 2).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 2).Value = subAllotment.prexc.pap_initial.ToUpper() + " " + "-" + " " + subAllotment.Description?.ToString();
                                    ws.Range(ws.Cell(currentRow, 2), ws.Cell(currentRow, 18)).Merge();
                                    currentRow++;

                                    foreach (var suballotment_amount in _MyDbContext.Suballotment_amount.Where(x => x.status == "activated" && x.SubAllotment.AppropriationId == 2 && x.SubAllotment.AllotmentClassId == 3 && x.SubAllotment.IsAddToNextAllotment == true && x.SubAllotmentId == subAllotment.SubAllotmentId))
                                    {
                                        var uacsID = from Suballotment in _MyDbContext.Suballotment_amount
                                                     join u in _MyDbContext.Uacs
                                                     on Suballotment.UacsId equals u.UacsId
                                                     select Suballotment.UacsId;


                                        var fortheMonth = (from oa in _MyDbContext.ObligationAmount
                                                           join o in _MyDbContext.Obligation
                                                           on oa.ObligationId equals o.Id
                                                           join f in _MyDbContext.FundSources
                                                           on o.FundSourceId equals f.FundSourceId
                                                           where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                           select new
                                                           {
                                                               amount = oa.Amount,
                                                               uacsId = oa.UacsId,
                                                               date = o.Date,
                                                               sourceId = o.FundSourceId,
                                                               sourceType = o.source_type,
                                                               status = o.status,
                                                               allotmentClassID = f.AllotmentClassId

                                                           });

                                        var fundsourceID = (from Suballotment in _MyDbContext.SubAllotment
                                                            join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                            on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                            where Suballotment.SubAllotmentId == Suballotment_amount.SubAllotmentId
                                                            select new
                                                            {
                                                                saId = Suballotment.SubAllotmentId
                                                            });

                                        var fundsourceamountID = (from Suballotment in _MyDbContext.SubAllotment
                                                                  join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                                  on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                                  where Suballotment.SubAllotmentId == Suballotment_amount.SubAllotmentId
                                                                  select new
                                                                  {
                                                                      saAmountId = Suballotment_amount.SubAllotmentId
                                                                  });

                                        var asAt = (from oa in _MyDbContext.ObligationAmount
                                                    join o in _MyDbContext.Obligation
                                                    on oa.ObligationId equals o.Id
                                                    where o.Date >= date1 && o.Date <= date2
                                                    select new
                                                    {
                                                        amount = oa.Amount,
                                                        uacsId = oa.UacsId,
                                                        sourceId = o.SubAllotmentId,
                                                        sourceType = o.source_type,
                                                        status = o.status
                                                    });

                                        var unobligated_amount = suballotment_amount.beginning_balance - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);

                                        total = 0;
                                        var afterrealignment_amount = suballotment_amount.beginning_balance - suballotment_amount.realignment_amount;

                                        ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == suballotment_amount.UacsId)?.Account_title.ToUpper().ToString();

                                        ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == suballotment_amount.UacsId)?.Expense_code;
                                        ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);

                                        if (suballotment_amount.beginning_balance != 0)
                                        {
                                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 14).Value = suballotment_amount.beginning_balance;
                                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                        }
                                        else
                                        {
                                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 14).Value = "-";
                                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }

                                        //REALIGNMENT SAA
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                        {
                                            //REALIGNMENT SAA AMOUNT
                                            ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 17).Value = "(" + suballotment_amount.realignment_amount + ")";
                                            ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                        {
                                            //REALIGNMENT AMOUNT
                                            ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 17).Value = _MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId).FirstOrDefault().Realignment_amount;
                                            ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            //REALIGNMENT AMOUNT
                                            ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 17).Value = "-";
                                            ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        //TRANSFERED TO DATA FOR PS CURRENT SAA
                                        var transferTo = _MyDbContext.Uacs.Where(c => !_MyDbContext.SubTransferedTo.Select(b => b.SubAllotmentId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                        foreach (var transferToSaa in _MyDbContext.SubTransferedTo.Where(x => x.SubAllotmentAmountId == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId/* && x.Id == transferTo*/).ToList())
                                        {

                                            currentRow++;
                                            ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                                            ws.Cell(currentRow, 4).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Account_title.ToUpper().ToString();

                                            ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                            ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            ws.Cell(currentRow, 13).Value = "-";

                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            ws.Cell(currentRow, 19).Value = "(" + transferToSaa.Amount.ToString("N", new CultureInfo("en-US")) + ")";

                                            currentRow++;
                                            ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            //ws.Cell(currentRow, 4).Style.Alignment.Indent = 3;
                                            ws.Cell(currentRow, 4).Style.Font.SetItalic();
                                            ws.Cell(currentRow, 4).Value = transferToSaa.Particulars;

                                            ws.Cell(currentRow, 12).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 12).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 12).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                            ws.Cell(currentRow, 12).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == 169).Expense_code;

                                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                            ws.Cell(currentRow, 13).Value = "-";

                                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                            ws.Cell(currentRow, 18).Value = "(" + transferToSaa.Amount.ToString("N", new CultureInfo("en-US")) + ")";
                                        }

                                        var CONAPSAAMOOEafterrealignment_amount = suballotment_amount.beginning_balance - suballotment_amount.realignment_amount;
                                        var CONAPSAAMOOEafterrealignment_amountadd = suballotment_amount.beginning_balance + _MyDbContext.SubAllotment_Realignment.FirstOrDefault(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId)?.Realignment_amount;
                                        //TOTAL ADJUSTED ALLOTMENT
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any() || CONAPSAAMOOEafterrealignment_amount != 0)
                                        {
                                            //TOTAL ADJUSTED ALLOTMENT SAA
                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Value = CONAPSAAMOOEafterrealignment_amount;
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                        {
                                            //TOTAL ADJUSTED ALLOTMENT SAA
                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Value = CONAPSAAMOOEafterrealignment_amountadd;
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (CONAPSAAMOOEafterrealignment_amount == 0 || CONAPSAAMOOEafterrealignment_amountadd == 0)
                                        {
                                            //TOTAL ADJUSTED ALLOTMENT
                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Value = suballotment_amount.beginning_balance;
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (suballotment_amount.beginning_balance == 0)
                                        {
                                            //TOTAL ADJUSTED ALLOTMENT
                                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 19).Value = "-";
                                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }

                                        //OBLIGATED (FOR THE MONTH)
                                        if (fortheMonth.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount) != 0)
                                        {
                                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 20).Value = fortheMonth.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 20).Value = "-";
                                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        //OBLIGATED (AS AT)
                                        if (asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount) != 0)
                                        {
                                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 21).Value = asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 21).Value = "-";
                                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        //UNOBLIGATED BALANCE OF ALLOTMENT
                                        var CONAPSAAMOOEaddunobligated = CONAPSAAMOOEafterrealignment_amount - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                        var CONAPSAAMOOEdeductunobligated = CONAPSAAMOOEafterrealignment_amountadd - asAt.Where(x => x.uacsId == suballotment_amount.UacsId && x.sourceId == suballotment_amount.SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any() || CONAPSAAMOOEaddunobligated != 0)
                                        {
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = CONAPSAAMOOEaddunobligated;
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (_MyDbContext.SubAllotment_Realignment.Where(x => x.Realignment_to == suballotment_amount.UacsId && x.SubAllotmentId == suballotment_amount.SubAllotmentId).Any())
                                        {
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = CONAPSAAMOOEdeductunobligated;
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (CONAPSAAMOOEaddunobligated == 0 || CONAPSAAMOOEdeductunobligated == 0)
                                        {
                                            //UNOBLIGATED BALANCE OF ALLOTMENT
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = unobligated_amount;
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        if (unobligated_amount == 0)
                                        {
                                            //UNOBLIGATED BALANCE OF ALLOTMENT
                                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 22).Value = "-";
                                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }

                                        if (asAt.Where(x => x.uacsId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().UacsId).Sum(x => x.amount) == 0 || afterrealignment_amount == 0)
                                        {
                                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 23).Value = "-";
                                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        else
                                        {
                                            //PERCENT OF UTILIZATION
                                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                            ws.Cell(currentRow, 23).Value = asAt.Where(x => x.uacsId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().UacsId).Sum(x => x.amount) / afterrealignment_amount;
                                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        //REALIGNMENT DATA SUB ALLOTMENT
                                        var data = _MyDbContext.Uacs.Where(c => !_MyDbContext.Suballotment_amount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().UacsId;
                                        foreach (var realignment in _MyDbContext.SubAllotment_Realignment.Where(x => x.SubAllotmentAmountId == suballotment_amount.SubAllotmentAmountId && x.SubAllotmentId == suballotment_amount.SubAllotmentId && x.Realignment_to == data))
                                        {
                                            currentRow++;
                                            Debug.WriteLine($"fsaid: {suballotment_amount.SubAllotmentAmountId}\nfundsrc_id {suballotment_amount}");
                                            //ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.Where(c => !_MyDbContext.FundSourceAmount.Select(b => b.UacsId).Contains(c.UacsId)).FirstOrDefault().Account_title.ToUpper().ToString();
                                            ws.Cell(currentRow, 1).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Account_title.ToUpper().ToString();
                                            ws.Cell(currentRow, 1).Style.Alignment.Indent = 3;

                                            ws.Cell(currentRow, 2).Value = _MyDbContext.Uacs.FirstOrDefault(x => x.UacsId == realignment.Realignment_to).Expense_code;
                                            ws.Cell(currentRow, 2).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Center);
                                            //ws.Cell(currentRow, 2).Style.Alignment.Indent = 3;

                                            ws.Cell(currentRow, 3).Value = "#,##0.00";
                                            ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                            //REALIGNMENT AMOUNT
                                            ws.Cell(currentRow, 4).Value = realignment.Realignment_amount;
                                            ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                            //REALIGNMENT AMOUNT
                                            ws.Cell(currentRow, 6).Value = "";
                                            ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                                            ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        }
                                        currentRow++;
                                        total = (double)suballotment_amount.beginning_balance;
                                    }

                                    var fortheMonthTotal = (from oa in _MyDbContext.ObligationAmount
                                                            join o in _MyDbContext.Obligation
                                                            on oa.ObligationId equals o.Id
                                                            where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                            select new
                                                            {
                                                                amount = oa.Amount,
                                                                uacsId = oa.UacsId,
                                                                sourceId = o.SubAllotmentId,
                                                                sourceType = o.source_type,
                                                                date = o.Date,
                                                                status = o.status
                                                            });

                                    var funds_filterTotal = (from Suballotment in _MyDbContext.SubAllotment
                                                             join Suballotment_amount in _MyDbContext.Suballotment_amount
                                                             on Suballotment.SubAllotmentId equals Suballotment_amount.SubAllotmentId
                                                             select new
                                                             {
                                                                 Id = Suballotment.SubAllotmentId
                                                             });

                                    var asAtTotal = (from oa in _MyDbContext.ObligationAmount
                                                     join o in _MyDbContext.Obligation
                                                     on oa.ObligationId equals o.Id
                                                     where o.Date >= date1 && o.Date <= date2
                                                     select new
                                                     {
                                                         amount = oa.Amount,
                                                         sourceId = o.SubAllotmentId,
                                                         uacsId = oa.UacsId,
                                                         sourceType = o.source_type,
                                                         status = o.status
                                                     });


                                    ws.Cell(currentRow, 4).Style.Font.SetBold();
                                    ws.Cell(currentRow, 4).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 4).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 4).Value = "SUBTOTAL " + subAllotment.Suballotment_title?.ToUpper() + " FOR CY " + result;

                                    ws.Cell(currentRow, 14).Style.Font.SetBold();
                                    ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 14).Value = subAllotment.Beginning_balance;

                                    //REALIGNMENT SUBTOTAL
                                    var CONAPSAAMOOErealignment_subtotal = budget_allotment.SubAllotment.FirstOrDefault().SubAllotmentRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.SubAllotment.FirstOrDefault().SubAllotmentRealignment?.Sum(x => x.Realignment_amount);
                                    var CONAPSAAMOOEsub6 = subAllotment.Beginning_balance - subAllotment.SubAllotmentRealignment?.Sum(x => x.Realignment_amount) + subAllotment.SubAllotmentRealignment?.Sum(x => x.Realignment_amount);
                                    var CONAPSAAMOOEsub9 = CONAPSAAMOOEsub6 - asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated").Sum(x => x.amount);
                                    if (CONAPSAAMOOErealignment_subtotal == null)
                                    {
                                        ws.Cell(currentRow, 17).Style.Font.SetBold();
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Value = "0.00";
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    }
                                    else
                                    {
                                        ws.Cell(currentRow, 17).Style.Font.SetBold();
                                        ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                        ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                        ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                        ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                        ws.Cell(currentRow, 17).Value = CONAPSAAMOOErealignment_subtotal;
                                    }

                                    var TransferedtoSubtotal = (from st in _MyDbContext.SubTransferedTo
                                                                join sa in _MyDbContext.Suballotment_amount
                                                                on st.SubAllotmentId equals sa.SubAllotmentId
                                                                join s in _MyDbContext.SubAllotment
                                                                on sa.SubAllotmentId equals s.SubAllotmentId
                                                                select new
                                                                {
                                                                    SubTotal = st.Amount,
                                                                    UacsId = sa.UacsId,
                                                                    SubAllotmentId = sa.SubAllotmentId,
                                                                    IsSet = s.IsAddToNextAllotment,
                                                                    CurrentYr = s.Budget_allotment.Yearly_reference.YearlyReference,
                                                                    AppropriationId = s.AppropriationId,
                                                                    AllotmentClassId = s.AllotmentClassId
                                                                });
                                    var TransferedtoSubtotalAmount = _MyDbContext.SubAllotment.FirstOrDefault().SubTransferedTo.Where(x => x.SubAllotmentId == TransferedtoSubtotal.FirstOrDefault().SubAllotmentId && x.SubAllotmentAmountId == TransferedtoSubtotal.FirstOrDefault().UacsId && x.SubAllotment.IsAddToNextAllotment == true && x.SubAllotment.Budget_allotment.Yearly_reference.YearlyReference == result).Sum(x => x.Amount);
                                    var xy = TransferedtoSubtotal.Where(x => x.UacsId == _MyDbContext.Suballotment_amount.FirstOrDefault().UacsId && x.SubAllotmentId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.AppropriationId == 2 && x.AllotmentClassId == 3 && x.IsSet == true).Sum(x => x.SubTotal);

                                    ws.Cell(currentRow, 18).Style.Font.SetBold();
                                    ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 18).Value = subAllotment.SubTransferedTo.Sum(x => x.Amount);
                                    ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);



                                    ws.Cell(currentRow, 19).Style.Font.SetBold();
                                    ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 19).Value = subAllotment.Beginning_balance - subAllotment.SubTransferedTo.Sum(x => x.Amount);


                                    ws.Cell(currentRow, 20).Style.Font.SetBold();
                                    ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 20).Value = fortheMonthTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);

                                    //AS AT TOTAL
                                    ws.Cell(currentRow, 21).Style.Font.SetBold();
                                    ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 21).Value = asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);


                                    var unobligatedTotal = subAllotment.Beginning_balance - asAtTotal.Where(x => x.sourceId == _MyDbContext.Suballotment_amount.FirstOrDefault().SubAllotmentId && x.status == "activated" && x.sourceType == "sub_allotment").Sum(x => x.amount);
                                    //SUBTOTAL UNOBLIGATED BALANCE OF ALLOTMENT
                                    ws.Cell(currentRow, 22).Style.Font.SetBold();
                                    ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                                    ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                    ws.Cell(currentRow, 22).Value = unobligatedTotal;

                                    //PERCENT OF UTILIZATION
                                    ws.Cell(currentRow, 23).Style.Font.SetBold();
                                    ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                    ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                    ws.Cell(currentRow, 23).Value = asAtTotal.Where(x => x.sourceId == budget_allotment.FundSources.FirstOrDefault().FundSourceAmounts.FirstOrDefault().FundSourceId && x.status == "activated").Sum(x => x.amount) / budget_allotment.FundSources.FirstOrDefault()?.Beginning_balance;
                                    ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                    ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                                    allotment_totalSaa += (double)subAllotment.Beginning_balance;

                                    currentRow++;

                                }

                                ws.Cell(currentRow, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 2).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 3).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 4).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 5).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 6).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 7).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 8).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 9).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 10).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 11).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 12).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 13).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 14).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 15).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 16).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 17).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 18).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 19).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 22).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 23).Style.Fill.BackgroundColor = XLColor.FromHtml("#FDE9D9");
                                ws.Cell(currentRow, 11).Style.Font.SetBold();
                                ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 11).Value = "SUB-TOTAL" + " " + "CONAP" + " " + groups.FirstOrDefault().prexc.pap_initial.ToUpper().ToString();

                                ws.Cell(currentRow, 14).Style.Font.SetBold();
                                ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 14).Value = groups.Sum(x => x.Beginning_balance);
                                currentRow++;
                            }
                            var MooeTotalSaaConap = _MyDbContext.SubAllotment.Where(x => x.IsAddToNextAllotment == true && x.AppropriationId == 2 && x.AllotmentClassId == 3).Sum(x => x.Beginning_balance);
                            var unobligatedTotalinTotalMOOESaaConap = MooeTotalSaaConap - asAtTotalinTotalPS.Where(x => x.allotmentClassID == 3 && x.appropriationID == 2 && x.sourceType == "sub_allotment" && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount);
                            var totalPercentMOOESaaConap = (double)asAtTotalinTotalPS.Where(x => x.allotmentClassID == 3 && x.appropriationID == 2).Sum(x => x.amount) / allotment_total;

                            ws.Cell(currentRow, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 2).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 3).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 4).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 5).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 6).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 7).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 8).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 9).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 10).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 11).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 12).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 13).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 14).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 15).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 16).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 17).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 18).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 19).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 22).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 23).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 11).Style.Font.SetBold();
                            ws.Cell(currentRow, 11).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 11).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 11).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 11).Value = "TOTAL CONAP CO SUB-ALLOTMENT";

                            ws.Cell(currentRow, 14).Style.Font.SetBold();
                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 14).Value = _MyDbContext.SubAllotment.Where(x => x.AllotmentClassId == 3 && x.AppropriationId == 2 && x.IsAddToNextAllotment == true && x.Budget_allotment.Yearly_reference.YearlyReference == result && !x.Suballotment_title.Contains("SARO")).Sum(x => x.Beginning_balance);

                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_total;
                            }
                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = _MyDbContext.SubTransferedTo.Where(x => x.SubAllotment.AllotmentClassId == 3 && x.SubAllotment.AppropriationId == 2 && x.SubAllotment.IsAddToNextAllotment == true && x.SubAllotment.Budget_allotment.Yearly_reference.YearlyReference == result).Sum(x => x.Amount);
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = MooeTotalSaaConap - _MyDbContext.SubTransferedTo.Where(x => x.SubAllotment.AllotmentClassId == 3 && x.SubAllotment.AppropriationId == 2 && x.SubAllotment.IsAddToNextAllotment == true && x.SubAllotment.Budget_allotment.Yearly_reference.YearlyReference == result).Sum(x => x.Amount);

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.appropriationID == 2 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.appropriationID == 2 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT

                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalMOOESaaConap;

                            //PERCENT OF UTILIZATION
                            ws.Cell(currentRow, 23).Style.Font.SetBold();
                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 23).Value = totalPercentMOOESaaConap;
                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            currentRow++;
                            //END CONAP SAA MOOE LOOP FOR CY RESULT
                        }
                        currentRow++;
                        //CONAP CO SUB-ALLOTMENT


                        //CURRENT APPROPRIATION
                        if (_MyDbContext.FundSources.Where(x => x.AppropriationId == 1 && x.BudgetAllotmentId == id).Any() || _MyDbContext.SubAllotment.Where(x => x.AppropriationId == 1 && x.BudgetAllotmentId == id).Any())
                        {
                            for (int i = 1; i < 24; i++)
                            {
                                //Thick border
                                ws.Cell(currentRow, i).Style.Border.TopBorder = XLBorderStyleValues.Thick;
                            }
                            ws.Cell(currentRow, 1).Style.Font.SetBold();
                            ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                            ws.Cell(currentRow, 1).Value = "CURRENT APPROPRIATION";
                            currentRow++;
                        }

                        if (_MyDbContext.FundSources.Where(x => x.AppropriationId == 1 && x.AllotmentClassId == 1 && x.BudgetAllotmentId == id).Any())
                        {

                            ws.Cell(currentRow, 3).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 3).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                            ws.Cell(currentRow, 3).Value = "TOTAL PERSONNEL SERVICES";


                            ws.Cell(currentRow, 14).Style.Font.SetBold();
                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 14).Value = "-";

                            if (PsTotal == 0)
                            {
                                ws.Cell(currentRow, 13).Style.Font.SetBold();
                                ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 13).Value = "-";
                            }
                            else
                            {
                                ws.Cell(currentRow, 13).Style.Font.SetBold();
                                ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 13).Value = PsTotal;
                            }


                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            var TotalPsCurrentTransferedTo = _MyDbContext.FundTransferedTo.Where(x => x.FundSource.AllotmentClassId == 1 && x.FundSource.AppropriationId == 1 && x.FundSource.BudgetAllotmentId == id).Sum(x => x.Amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_total;
                            }
                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = TotalPsCurrentTransferedTo;
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = PsTotal - TotalPsCurrentTransferedTo;

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1).Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1).Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT
                            var unobligatedTotalinTotalPSCurrent = PsTotal - asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1).Sum(x => x.amount);
                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalPSCurrent;

                            //PERCENT OF UTILIZATION
                            var totalPercentPSCurrent = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1).Sum(x => x.amount) / PsTotal;
                            ws.Cell(currentRow, 23).Value = totalPercentPSCurrent;
                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 23).Style.Font.SetBold();
                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                            currentRow++;
                        }

                        //START TOTAL AUTOMATIC APPROPRIATION
                        if (_MyDbContext.FundSources.Where(x => x.FundSourceTitle.Contains("RLIP")).Any())
                        {

                            var PsTotalAPTotal = _MyDbContext.FundSources.Where(x => x.AllotmentClassId == 1 && x.AppropriationId == 1 && x.FundSourceTitle.Contains("RLIP")).Sum(x => x.Beginning_balance);
                            var PsTotalAP = _MyDbContext.FundSources.Where(x => x.AllotmentClassId == 1 && x.AppropriationId == 1 && x.FundSourceTitle.Contains("RLIP")).Sum(x => x.Beginning_balance);

                            ws.Cell(currentRow, 3).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 3).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                            ws.Cell(currentRow, 3).Value = "TOTAL AUTOMATIC APPROPRIATIONS";

                            ws.Cell(currentRow, 14).Style.Font.SetBold();
                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 14).Value = "-";

                            if (PsTotalAPTotal == 0)
                            {
                                ws.Cell(currentRow, 13).Style.Font.SetBold();
                                ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 13).Value = "-";
                            }
                            else
                            {
                                ws.Cell(currentRow, 13).Style.Font.SetBold();
                                ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 13).Value = PsTotalAPTotal;
                            }


                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_total;
                            }
                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = "0.00";
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = PsTotalAPTotal;

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1 && x.fundSourceTitle.Contains("RLIP")).Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1 && x.fundSourceTitle.Contains("RLIP")).Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT
                            var unobligatedTotalinTotalPSAPTotal = PsTotalAP - asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1 && x.fundSourceTitle.Contains("RLIP")).Sum(x => x.amount);
                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalPSAPTotal;

                            //PERCENT OF UTILIZATION
                            var totalPercentPSAPTotal = (double)asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.fundSourceTitle.Contains("RLIP")).Sum(x => x.amount) / allotment_total;

                            ws.Cell(currentRow, 23).Style.Font.SetBold();
                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 23).Value = totalPercentPSAPTotal;
                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            currentRow++;
                        }
                        //END TOTAL AUTOMATIC APPROPRIATION
                        //START TOTAL SARO
                        if (_MyDbContext.SubAllotment.Where(x => x.Suballotment_title.Contains("SARO")).Any())
                        {

                            var fortheMonthTotalinTotalSARO = (from oa in _MyDbContext.ObligationAmount
                                                               join o in _MyDbContext.Obligation
                                                               on oa.ObligationId equals o.Id
                                                               join s in _MyDbContext.SubAllotment
                                                               on o.SubAllotmentId equals s.SubAllotmentId
                                                               where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                               select new
                                                               {
                                                                   amount = oa.Amount,
                                                                   uacsId = oa.UacsId,
                                                                   sourceId = o.SubAllotmentId,
                                                                   sourceType = o.source_type,
                                                                   date = o.Date,
                                                                   status = o.status,
                                                                   allotmentClassID = s.AllotmentClassId,
                                                                   appropriationID = s.AppropriationId,
                                                                   suballotmentTitle = s.Suballotment_title,
                                                                   oaStatus = oa.status
                                                               });

                            var asAtTotalinTotalSARO = (from oa in _MyDbContext.ObligationAmount
                                                        join o in _MyDbContext.Obligation
                                                        on oa.ObligationId equals o.Id
                                                        join s in _MyDbContext.SubAllotment
                                                        on o.SubAllotmentId equals s.SubAllotmentId
                                                        where o.Date >= date1 && o.Date <= date2
                                                        select new
                                                        {
                                                            amount = oa.Amount,
                                                            sourceId = o.FundSourceId,
                                                            sourceType = o.source_type,
                                                            uacsId = oa.UacsId,
                                                            status = o.status,
                                                            allotmentClassID = s.AllotmentClassId,
                                                            appropriationID = s.AppropriationId,
                                                            suballotmentTitle = s.Suballotment_title,
                                                            BudgetAllotmentId = s.BudgetAllotmentId
                                                        });


                            var PsTotalAPTotal = _MyDbContext.SubAllotment.Where(x => x.AllotmentClassId == 1 && x.AppropriationId == 1 && x.Suballotment_title.Contains("SARO")).Sum(x => x.Beginning_balance);
                            var PsTotalAP = _MyDbContext.SubAllotment.Where(x => x.AllotmentClassId == 1 && x.AppropriationId == 1 && x.Suballotment_title.Contains("SARO")).Sum(x => x.Beginning_balance);

                            ws.Cell(currentRow, 3).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 3).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                            ws.Cell(currentRow, 3).Value = "TOTAL SARO";

                            ws.Cell(currentRow, 14).Style.Font.SetBold();
                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 14).Value = "-";

                            if (PsTotalAPTotal == 0)
                            {
                                ws.Cell(currentRow, 13).Style.Font.SetBold();
                                ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 13).Value = "-";
                            }
                            else
                            {
                                ws.Cell(currentRow, 13).Style.Font.SetBold();
                                ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 13).Value = PsTotalAPTotal;
                            }


                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.SubAllotment.FirstOrDefault()?.SubAllotmentRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.SubAllotment.FirstOrDefault()?.SubAllotmentRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_total;
                            }
                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = "0.00";
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = PsTotalAPTotal;

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalSARO.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1 && x.suballotmentTitle.Contains("SARO")).Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotalinTotalSARO.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1 && x.suballotmentTitle.Contains("SARO")).Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT
                            var unobligatedTotalinTotalPSAPTotal = PsTotalAP - asAtTotalinTotalSARO.Where(x => x.allotmentClassID == 1 && x.appropriationID == 1 && x.suballotmentTitle.Contains("SARO")).Sum(x => x.amount);
                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalPSAPTotal;

                            //PERCENT OF UTILIZATION
                            var totalPercentPSAPTotal = (double)asAtTotalinTotalSARO.Where(x => x.allotmentClassID == 1 && x.suballotmentTitle.Contains("SARO")).Sum(x => x.amount) / allotment_total;

                            ws.Cell(currentRow, 23).Style.Font.SetBold();
                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 23).Value = totalPercentPSAPTotal;
                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            currentRow++;
                        }
                        //END TOTAL SARO
                        //START TOTAL SAA PS
                        if (_MyDbContext.SubAllotment.Where(x => x.AppropriationId == 1 && x.AllotmentClassId == 1 && x.BudgetAllotmentId == id).Any())
                        {
                            ws.Cell(currentRow, 3).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 3).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                            ws.Cell(currentRow, 3).Value = "TOTAL SAA PS";

                            ws.Cell(currentRow, 13).Style.Font.SetBold();
                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 13).Value = "-";

                            if (PsTotalSaa == 0)
                            {
                                ws.Cell(currentRow, 14).Style.Font.SetBold();
                                ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 14).Value = "-";
                            }
                            else
                            {
                                ws.Cell(currentRow, 14).Style.Font.SetBold();
                                ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 14).Value = _MyDbContext.SubAllotment.Where(x => x.AppropriationId == 1 && x.AllotmentClassId == 1 && x.BudgetAllotmentId == id && !x.Suballotment_title.Contains("SARO") && x.prexcId == x.prexcId).Sum(x => x.Beginning_balance);
                            }


                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_total;
                            }
                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = _MyDbContext.SubTransferedTo.Where(x => x.SubAllotment.AllotmentClassId == 1 && x.SubAllotment.AppropriationId == 1 && x.SubAllotment.BudgetAllotmentId == id).Sum(x => x.Amount);
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = PsTotalSaa - _MyDbContext.SubTransferedTo.Where(x => x.SubAllotment.AllotmentClassId == 1 && x.SubAllotment.AppropriationId == 1 && x.SubAllotment.BudgetAllotmentId == id).Sum(x => x.Amount); ;

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT
                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalPSSaa;

                            if (asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.sourceType == "sub_allotment").Sum(x => x.amount) == 0 && PsTotalSaa == 0)
                            {
                                ws.Cell(currentRow, 23).Style.Font.SetBold();
                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 23).Value = "";
                                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                            }
                            else
                            {
                                var totalPercentPSSaaTotalinTotal = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.sourceType == "sub_allotment").Sum(x => x.amount) / PsTotalSaa;
                                //PERCENT OF UTILIZATION
                                ws.Cell(currentRow, 23).Style.Font.SetBold();
                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 23).Value = totalPercentPSSaaTotalinTotal;
                                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                            }
                        }
                        //END TOTAL SAA PS
                        //START TOTAL MOOE
                        if (budget_allotment.FundSources.Where(x => x.AllotmentClassId == 2 && x.AppropriationId == 1).Any())
                        {

                            var MooeTotal = _MyDbContext.FundSources.Where(x => x.AllotmentClassId == 2 && x.AppropriationId == 1 && x.BudgetAllotmentId == id && x.Breakdown == false).Sum(x => x.Beginning_balance);
                            var allotment_totalMOOE = +MooeTotal;

                            ws.Cell(currentRow, 3).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 3).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                            ws.Cell(currentRow, 3).Value = "TOTAL MOOE";

                            ws.Cell(currentRow, 14).Style.Font.SetBold();
                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 14).Value = "-";

                            if (MooeTotal == 0)
                            {
                                ws.Cell(currentRow, 13).Style.Font.SetBold();
                                ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 13).Value = "-";
                            }
                            else
                            {
                                ws.Cell(currentRow, 13).Style.Font.SetBold();
                                ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 13).Value = MooeTotal;
                            }


                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_total;
                            }
                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = _MyDbContext.FundTransferedTo.Where(x => x.FundSource.AllotmentClassId == 2 && x.FundSource.AppropriationId == 1 && x.FundSource.BudgetAllotmentId == id).Sum(x => x.Amount);
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = MooeTotal - _MyDbContext.FundTransferedTo.Where(x => x.FundSource.AllotmentClassId == 2 && x.FundSource.AppropriationId == 1 && x.FundSource.BudgetAllotmentId == id).Sum(x => x.Amount);

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.status == "activated").Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotalinTotalMOOE.Where(x => x.allotmentClassID == 2 && x.status == "activated").Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT
                            var unobligatedTotalinTotalMOOECurent = MooeTotal - asAtTotalinTotalMOOE.Where(x => x.allotmentClassID == 2).Sum(x => x.amount);

                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalMOOECurent;

                            //PERCENT OF UTILIZATION
                            if (asAtTotalinTotalMOOE.Where(x => x.allotmentClassID == 2).Sum(x => x.amount) == 0 || MooeTotal == 0)
                            {
                                ws.Cell(currentRow, 23).Style.Font.SetBold();
                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 23).Value = "-";
                                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                            }
                            else
                            {
                                var totalPercentMOOECurrent = asAtTotalinTotalMOOE.Where(x => x.allotmentClassID == 2).Sum(x => x.amount) / MooeTotal;

                                ws.Cell(currentRow, 23).Style.Font.SetBold();
                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 23).Value = totalPercentMOOECurrent;
                                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                            }

                        }
                        //END TOTAL MOOE
                        //START TOTAL CO
                        if (budget_allotment.FundSources.Where(x => x.AllotmentClassId == 3 && x.AppropriationId == 1).Any())
                        {

                            var CoTotal = _MyDbContext.FundSources.Where(x => x.AllotmentClassId == 3 && x.AppropriationId == 1).Sum(x => x.Beginning_balance);
                            var allotment_totalCO = +CoTotal;

                            ws.Cell(currentRow, 3).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 3).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                            ws.Cell(currentRow, 3).Value = "TOTAL CO";

                            ws.Cell(currentRow, 14).Style.Font.SetBold();
                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 14).Value = "-";

                            if (CoTotal == 0)
                            {
                                ws.Cell(currentRow, 13).Style.Font.SetBold();
                                ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 13).Value = "-";
                            }
                            else
                            {
                                ws.Cell(currentRow, 13).Style.Font.SetBold();
                                ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 13).Value = CoTotal;
                            }


                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_total;
                            }
                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = "0.00";
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = CoTotal;

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalCO.Where(x => x.allotmentClassID == 3).Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotalinTotalCO.Where(x => x.allotmentClassID == 3).Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT
                            var unobligatedTotalinTotalCOCurrent = CoTotal - asAtTotalinTotalCO.Where(x => x.allotmentClassID == 3).Sum(x => x.amount);

                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalCOCurrent;

                            //PERCENT OF UTILIZATION
                            if (asAtTotalinTotalCO.Where(x => x.allotmentClassID == 3).Sum(x => x.amount) == 0 && CoTotal == 0)
                            {
                                ws.Cell(currentRow, 23).Style.Font.SetBold();
                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 23).Value = "";
                                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                            }
                            else
                            {
                                var totalPercentCOCurrent = asAtTotalinTotalCO.Where(x => x.allotmentClassID == 3).Sum(x => x.amount) / CoTotal;

                                ws.Cell(currentRow, 23).Style.Font.SetBold();
                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 23).Value = totalPercentCOCurrent;
                                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                            }
                        }
                        //END TOTAL CO
                        //START TOTAL SAA MOOE
                        if (budget_allotment.SubAllotment.Where(x => x.AllotmentClassId == 2 && x.BudgetAllotmentId == id).Any())
                        {

                            var MooeTotalSaa = _MyDbContext.SubAllotment.Where(x => x.AllotmentClassId == 2 && x.AppropriationId == 1 && x.BudgetAllotmentId == id).Sum(x => x.Beginning_balance);
                            var unobligatedTotalinTotalMOOESaa = MooeTotalSaa - asAtTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.sourceType == "sub_allotment" && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount);
                            var totalPercentMOOESaa = (double)asAtTotalinTotalPS.Where(x => x.allotmentClassID == 3 && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount) / allotment_total;

                            ws.Cell(currentRow, 3).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 3).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                            ws.Cell(currentRow, 3).Value = "TOTAL SAA MOOE";

                            ws.Cell(currentRow, 13).Style.Font.SetBold();
                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 13).Value = "-";

                            if (MooeTotalSaa == 0)
                            {
                                ws.Cell(currentRow, 14).Style.Font.SetBold();
                                ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 14).Value = "-";
                            }
                            else
                            {
                                ws.Cell(currentRow, 14).Style.Font.SetBold();
                                ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 14).Value = MooeTotalSaa;
                            }


                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_total;
                            }
                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = "0.00";
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = MooeTotalSaa;

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.sourceType == "sub_allotment" && x.status == "activated").Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.sourceType == "sub_allotment" && x.status == "activated").Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT
                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalMOOESaa;

                            //PERCENT OF UTILIZATION
                            ws.Cell(currentRow, 23).Style.Font.SetBold();
                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 23).Value = totalPercentMOOESaa;
                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            currentRow++;

                        }
                        //END TOTAL SAA MOOE
                        //TOTAL CO SAA
                        if (budget_allotment.SubAllotment.Where(x => x.AllotmentClassId == 3 && x.BudgetAllotmentId == id).Any())
                        {
                            var CoTotalSaa = _MyDbContext.SubAllotment.Where(x => x.AllotmentClassId == 3 && x.BudgetAllotmentId == id && x.AppropriationId == 1).Sum(x => x.Beginning_balance);
                            var unobligatedTotalinTotalCOSaa = CoTotalSaa - asAtTotalinTotalPS.Where(x => x.allotmentClassID == 3 && x.sourceType == "sub_allotment" && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount);
                            var totalPercentCOSaa = (double)asAtTotalinTotalPS.Where(x => x.allotmentClassID == 3 && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount) / allotment_total;


                            ws.Cell(currentRow, 3).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 3).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                            ws.Cell(currentRow, 3).Value = "TOTAL CO SAA";

                            ws.Cell(currentRow, 13).Style.Font.SetBold();
                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 13).Value = "-";

                            if (CoTotalSaa == 0)
                            {
                                ws.Cell(currentRow, 14).Style.Font.SetBold();
                                ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 14).Value = "-";
                            }
                            else
                            {
                                ws.Cell(currentRow, 14).Style.Font.SetBold();
                                ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 14).Value = CoTotalSaa;
                            }


                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            var TotalCoCurrentTransferedTo = _MyDbContext.SubTransferedTo.Where(x => x.SubAllotment.AllotmentClassId == 3 && x.SubAllotment.AppropriationId == 1 && x.SubAllotment.BudgetAllotmentId == id).Sum(x => x.Amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_total;
                            }
                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = TotalCoCurrentTransferedTo;
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = CoTotalSaa - TotalCoCurrentTransferedTo;

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 3 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 3 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT

                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalCOSaa;

                            //PERCENT OF UTILIZATION
                            ws.Cell(currentRow, 23).Style.Font.SetBold();
                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 23).Value = totalPercentCOSaa;
                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            currentRow++;

                        }



                        var TotalCA = _MyDbContext.FundSources.Where(x => x.AppropriationId == 1 && x.BudgetAllotmentId == id).Sum(x => x.Beginning_balance) + _MyDbContext.SubAllotment.Where(x => x.AppropriationId == 1 && x.BudgetAllotmentId == id).Sum(x => x.Beginning_balance);
                        var TotalCARegular = _MyDbContext.FundSources.Where(x => x.AppropriationId == 1 && x.BudgetAllotmentId == id && x.Breakdown == false).Sum(x => x.Beginning_balance) + _MyDbContext.SubAllotment.Where(x => x.AllotmentClassId == 1 && x.AppropriationId == 1 && x.Suballotment_title.Contains("SARO")).Sum(x => x.Beginning_balance);
                        var TotalCASaa = _MyDbContext.SubAllotment.Where(x => x.AppropriationId == 1 && x.BudgetAllotmentId == id).Sum(x => x.Beginning_balance) + _MyDbContext.SubAllotment.Where(x => x.AppropriationId == 1 && x.IsAddToNextAllotment == true && x.Budget_allotment.Yearly_reference.YearlyReference == result).Sum(x => x.Beginning_balance);

                        //Thick Border
                        for (int i = 1; i < 24; i++)
                        {
                            //Thick border
                            ws.Cell(currentRow, i).Style.Border.TopBorder = XLBorderStyleValues.Thick;
                            ws.Cell(currentRow, i).Style.Border.BottomBorder = XLBorderStyleValues.Thick;
                        }

                        ws.Cell(currentRow, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("#B7DEE8");
                        ws.Cell(currentRow, 2).Style.Fill.BackgroundColor = XLColor.FromHtml("#B7DEE8");
                        ws.Cell(currentRow, 3).Style.Fill.BackgroundColor = XLColor.FromHtml("#B7DEE8");
                        ws.Cell(currentRow, 4).Style.Fill.BackgroundColor = XLColor.FromHtml("#B7DEE8");
                        ws.Cell(currentRow, 5).Style.Fill.BackgroundColor = XLColor.FromHtml("#B7DEE8");
                        ws.Cell(currentRow, 6).Style.Fill.BackgroundColor = XLColor.FromHtml("#B7DEE8");
                        ws.Cell(currentRow, 7).Style.Fill.BackgroundColor = XLColor.FromHtml("#B7DEE8");
                        ws.Cell(currentRow, 8).Style.Fill.BackgroundColor = XLColor.FromHtml("#B7DEE8");
                        ws.Cell(currentRow, 9).Style.Fill.BackgroundColor = XLColor.FromHtml("#B7DEE8");
                        ws.Cell(currentRow, 10).Style.Fill.BackgroundColor = XLColor.FromHtml("#B7DEE8");
                        ws.Cell(currentRow, 11).Style.Fill.BackgroundColor = XLColor.FromHtml("#B7DEE8");
                        ws.Cell(currentRow, 12).Style.Fill.BackgroundColor = XLColor.FromHtml("#B7DEE8");
                        ws.Cell(currentRow, 13).Style.Fill.BackgroundColor = XLColor.FromHtml("#B7DEE8");
                        ws.Cell(currentRow, 14).Style.Fill.BackgroundColor = XLColor.FromHtml("#B7DEE8");
                        ws.Cell(currentRow, 15).Style.Fill.BackgroundColor = XLColor.FromHtml("#B7DEE8");
                        ws.Cell(currentRow, 16).Style.Fill.BackgroundColor = XLColor.FromHtml("#B7DEE8");
                        ws.Cell(currentRow, 17).Style.Fill.BackgroundColor = XLColor.FromHtml("#B7DEE8");
                        ws.Cell(currentRow, 18).Style.Fill.BackgroundColor = XLColor.FromHtml("#B7DEE8");
                        ws.Cell(currentRow, 19).Style.Fill.BackgroundColor = XLColor.FromHtml("#B7DEE8");
                        ws.Cell(currentRow, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#B7DEE8");
                        ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#B7DEE8");
                        ws.Cell(currentRow, 22).Style.Fill.BackgroundColor = XLColor.FromHtml("#B7DEE8");
                        ws.Cell(currentRow, 23).Style.Fill.BackgroundColor = XLColor.FromHtml("#B7DEE8");
                        ws.Cell(currentRow, 3).Style.Font.SetBold();
                        ws.Cell(currentRow, 3).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 3).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 3).Value = "TOTAL CURRENT APPROPRIATION";

                        ws.Cell(currentRow, 13).Style.Font.SetBold();
                        ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(currentRow, 13).Value = TotalCARegular;

                        ws.Cell(currentRow, 14).Style.Font.SetBold();
                        ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(currentRow, 14).Value = TotalCASaa;

                        //REALIGNMENT TOTAL
                        var REGULARrealignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                        if (REGULARrealignment_total == null)
                        {
                            ws.Cell(currentRow, 17).Style.Font.SetBold();
                            ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 17).Value = 0.00;
                        }
                        else
                        {
                            ws.Cell(currentRow, 17).Style.Font.SetBold();
                            ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 17).Value = REGULARrealignment_total;
                        }
                        //TOTAL TRANSFER TO
                        var GrandTotalWithTransferedAmountCurrent = _MyDbContext.FundTransferedTo.Where(x => x.FundSource.AppropriationId == 1 && x.FundSource.IsAddToNextAllotment == true && x.FundSource.BudgetAllotment.Yearly_reference.YearlyReference == result).Sum(x => x.Amount) + _MyDbContext.FundTransferedTo.Where(x => x.FundSource.AppropriationId == 1 && x.FundSource.BudgetAllotmentId == id).Sum(x => x.Amount)
                                                                    + _MyDbContext.SubTransferedTo.Where(x => x.SubAllotment.AppropriationId == 1 && x.SubAllotment.IsAddToNextAllotment == true && x.SubAllotment.Budget_allotment.Yearly_reference.YearlyReference == result).Sum(x => x.Amount) + _MyDbContext.SubTransferedTo.Where(x => x.SubAllotment.AppropriationId == 1 && x.SubAllotment.BudgetAllotmentId == id).Sum(x => x.Amount);
                        ws.Cell(currentRow, 18).Style.Font.SetBold();
                        ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 18).Value = GrandTotalWithTransferedAmountCurrent;
                        ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        //TOTAL FUNDSOURCE - TOTAL AFTER REALIGMENT
                        ws.Cell(currentRow, 19).Style.Font.SetBold();
                        ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(currentRow, 19).Value = TotalCA - GrandTotalWithTransferedAmountCurrent;

                        var fortheMonthTotalinTotalCURRENT = (from oa in _MyDbContext.ObligationAmount
                                                              join o in _MyDbContext.Obligation
                                                              on oa.ObligationId equals o.Id
                                                              join f in _MyDbContext.FundSources
                                                              on o.FundSourceId equals f.FundSourceId
                                                              where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                              select new
                                                              {
                                                                  amount = oa.Amount,
                                                                  uacsId = oa.UacsId,
                                                                  sourceId = o.FundSourceId,
                                                                  date = o.Date,
                                                                  status = o.status,
                                                                  allotmentClassID = f.AllotmentClassId,
                                                                  appropriationID = f.AppropriationId
                                                              });

                        var asAtTotalinTotalCURRENT = (from oa in _MyDbContext.ObligationAmount
                                                       join o in _MyDbContext.Obligation
                                                       on oa.ObligationId equals o.Id
                                                       join f in _MyDbContext.FundSources
                                                       on o.FundSourceId equals f.FundSourceId
                                                       where o.Date >= date1 && o.Date <= date2
                                                       select new
                                                       {
                                                           amount = oa.Amount,
                                                           sourceId = o.FundSourceId,
                                                           uacsId = oa.UacsId,
                                                           status = o.status,
                                                           allotmentClassID = f.AllotmentClassId,
                                                           appropriationID = f.AppropriationId
                                                       });

                        var CurrentTotal = _MyDbContext.FundSources.Sum(x => x.Beginning_balance) + _MyDbContext.SubAllotment.Sum(x => x.Beginning_balance);

                        //TOTAL - FOR THE MONTH
                        var CurrentApproForthemonth = fortheMonthTotalinTotalCURRENT.Where(x => x.appropriationID == 1 && x.status == "activated").Sum(x => x.amount) + fortheMonthTotalinTotalPS.Where(x => x.appropriationID == 1 && x.sourceType == "sub_allotment" && x.status == "activated").Sum(x => x.amount);
                        var CurrentApproAsat = asAtTotalinTotalCURRENT.Where(x => x.status == "activated").Sum(x => x.amount) + asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.sourceType == "sub_allotment" && x.status == "activated").Sum(x => x.amount);
                        ws.Cell(currentRow, 20).Style.Font.SetBold();
                        ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(currentRow, 20).Value = CurrentApproForthemonth;

                        //TOTAL - AS AT
                        ws.Cell(currentRow, 21).Style.Font.SetBold();
                        ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(currentRow, 21).Value = CurrentApproAsat;

                        //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT
                        var unobligatedTotalinTotalCURRENT = TotalCA - asAtTotalinTotalCURRENT.Sum(x => x.amount);
                        ws.Cell(currentRow, 22).Style.Font.SetBold();
                        ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                        ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                        ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalCURRENT;

                        //PERCENT OF UTILIZATION
                        var totalPercentCURRENT = asAtTotalinTotalCURRENT.Sum(x => x.amount) / CurrentTotal;
                        ws.Cell(currentRow, 23).Style.Font.SetBold();
                        ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                        ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                        ws.Cell(currentRow, 23).Value = totalPercentCURRENT;
                        ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                        ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                        currentRow++;

                        if (_MyDbContext.FundSources.Where(x => x.AppropriationId == 2).Any() || _MyDbContext.SubAllotment.Where(x => x.AppropriationId == 2 && x.BudgetAllotmentId == id).Any())
                        {
                            //START CONAP SUMMARY
                            ws.Cell(currentRow, 1).Style.Font.SetBold();
                            ws.Cell(currentRow, 1).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                            ws.Cell(currentRow, 1).Value = "CONTINUING APPROPRIATION";
                            currentRow++;
                        }
                        if (_MyDbContext.FundSources.Where(x => x.AppropriationId == 2 && x.AllotmentClassId == 1).Any())
                        {
                            ws.Cell(currentRow, 1).Style.Alignment.Indent = 3;
                            ws.Cell(currentRow, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                            ws.Cell(currentRow, 1).Value = "TOTAL CONAP PERSONNEL SERVICES";


                            ws.Cell(currentRow, 3).Style.Font.SetBold();
                            ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 3).Value = PsConapTotal;

                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 4).Style.Font.SetBold();
                                ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 4).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 4).Style.Font.SetBold();
                                ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 4).Value = realignment_total;
                            }
                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 5).Style.Font.SetBold();
                            ws.Cell(currentRow, 5).Value = "0.00";
                            ws.Cell(currentRow, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 6).Style.Font.SetBold();
                            ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 6).Value = PsConapTotal;

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 7).Style.Font.SetBold();
                            ws.Cell(currentRow, 7).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 7).Value = fortheMonthTotalinTotalPSConap.Where(x => x.allotmentClassID == 1 && x.appropriationID == 2).Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 8).Style.Font.SetBold();
                            ws.Cell(currentRow, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 8).Value = asAtTotalinTotalPSConap.Where(x => x.allotmentClassID == 1 && x.appropriationID == 2).Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT
                            ws.Cell(currentRow, 9).Style.Font.SetBold();
                            ws.Cell(currentRow, 9).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 9).Value = unobligatedTotalinTotalPSConap;

                            //PERCENT OF UTILIZATION
                            if (asAtTotalinTotalPSConap.Where(x => x.allotmentClassID == 1 && x.appropriationID == 2).Sum(x => x.amount) == 0 && PsConapTotal == 0)
                            {
                                ws.Cell(currentRow, 10).Value = "";
                                ws.Cell(currentRow, 10).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                            }
                            else
                            {
                                var totalPercentPSConapTotal = asAtTotalinTotalPSConap.Where(x => x.allotmentClassID == 1 && x.appropriationID == 2).Sum(x => x.amount) / PsConapTotal;
                                ws.Cell(currentRow, 10).Value = totalPercentPSConapTotal;
                                ws.Cell(currentRow, 10).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                            }
                        }
                        if (_MyDbContext.FundSources.Where(x => x.AppropriationId == 2 && x.AllotmentClassId == 2 && x.BudgetAllotmentId == id).Any())
                        {
                            ws.Cell(currentRow, 3).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 3).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                            ws.Cell(currentRow, 3).Value = "TOTAL CONAP MOOE";

                            ws.Cell(currentRow, 14).Style.Font.SetBold();
                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 14).Value = "-";

                            if (MooeConapTotal == 0)
                            {
                                ws.Cell(currentRow, 13).Style.Font.SetBold();
                                ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 13).Value = "-";
                            }
                            else
                            {
                                ws.Cell(currentRow, 13).Style.Font.SetBold();
                                ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 13).Value = MooeConapTotal;
                            }


                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_total;
                            }
                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = "0.00";
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = MooeConapTotal;

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalMooeConap.Where(x => x.allotmentClassID == 2 && x.appropriationID == 2).Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotalinTotalMooeConap.Where(x => x.allotmentClassID == 2 && x.appropriationID == 2).Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT
                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalMooeConap;

                            //PERCENT OF UTILIZATION
                            if (asAtTotalinTotalPSConap.Where(x => x.allotmentClassID == 1 && x.appropriationID == 2).Sum(x => x.amount) == 0 && PsConapTotal == 0)
                            {
                                ws.Cell(currentRow, 23).Style.Font.SetBold();
                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 23).Value = "-";
                                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                            }
                            else
                            {
                                var totalPercentMooeConap = asAtTotalinTotalPSConap.Where(x => x.allotmentClassID == 1 && x.appropriationID == 2).Sum(x => x.amount) / PsConapTotal;

                                ws.Cell(currentRow, 23).Style.Font.SetBold();
                                ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 23).Value = totalPercentMooeConap;
                                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                            }
                        }
                        if (_MyDbContext.FundSources.Where(x => x.AppropriationId == 2 && x.AllotmentClassId == 3).Any())
                        {
                            ws.Cell(currentRow, 1).Style.Alignment.Indent = 3;
                            ws.Cell(currentRow, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                            ws.Cell(currentRow, 1).Value = "TOTAL CONAP CO";

                            ws.Cell(currentRow, 3).Style.Font.SetBold();
                            ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 3).Value = CoConapTotal;

                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 4).Style.Font.SetBold();
                                ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 4).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 4).Style.Font.SetBold();
                                ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 4).Value = realignment_total;
                            }
                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 5).Style.Font.SetBold();
                            ws.Cell(currentRow, 5).Value = "0.00";
                            ws.Cell(currentRow, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 6).Style.Font.SetBold();
                            ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 6).Value = CoConapTotal;

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 7).Style.Font.SetBold();
                            ws.Cell(currentRow, 7).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 7).Value = fortheMonthTotalinTotalCoConap.Where(x => x.allotmentClassID == 3 && x.appropriationID == 2).Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 8).Style.Font.SetBold();
                            ws.Cell(currentRow, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 8).Value = asAtTotalinTotalCoConap.Where(x => x.allotmentClassID == 3 && x.appropriationID == 2).Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT
                            ws.Cell(currentRow, 9).Style.Font.SetBold();
                            ws.Cell(currentRow, 9).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 9).Value = unobligatedTotalinTotalCoConap;

                            //PERCENT OF UTILIZATION
                            if (asAtTotalinTotalPSConap.Where(x => x.allotmentClassID == 1 && x.appropriationID == 2).Sum(x => x.amount) == 0 || CoConapTotal == 0)
                            {
                                ws.Cell(currentRow, 10).Value = "";
                                ws.Cell(currentRow, 10).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                            }
                            else
                            {
                                var totalPercentCoConapTotal = asAtTotalinTotalPSConap.Where(x => x.allotmentClassID == 1 && x.appropriationID == 2).Sum(x => x.amount) / CoConapTotal;
                                ws.Cell(currentRow, 10).Value = totalPercentCoConapTotal;
                                ws.Cell(currentRow, 10).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                            }
                        }
                        if (_MyDbContext.SubAllotment.Where(x => x.AppropriationId == 2 && x.AllotmentClassId == 1).Any())
                        {
                            ws.Cell(currentRow, 1).Style.Alignment.Indent = 3;
                            ws.Cell(currentRow, 1).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                            ws.Cell(currentRow, 1).Value = "TOTAL CONAP PS SAA";

                            var PsTotalSaaConap = _MyDbContext.SubAllotment.Where(x => x.AllotmentClassId == 1 && x.AppropriationId == 2).Sum(x => x.Beginning_balance);
                            ws.Cell(currentRow, 3).Style.Font.SetBold();
                            ws.Cell(currentRow, 3).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 3).Value = PsTotalSaaConap;

                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 4).Style.Font.SetBold();
                                ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 4).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 4).Style.Font.SetBold();
                                ws.Cell(currentRow, 4).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 4).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 4).Value = realignment_total;
                            }
                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 5).Style.Font.SetBold();
                            ws.Cell(currentRow, 5).Value = "0.00";
                            ws.Cell(currentRow, 5).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 5).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 6).Style.Font.SetBold();
                            ws.Cell(currentRow, 6).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 6).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 6).Value = PsTotalSaaConap;

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 7).Style.Font.SetBold();
                            ws.Cell(currentRow, 7).Style.Font.SetBold();
                            ws.Cell(currentRow, 7).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 7).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 7).Value = fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 2 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 8).Style.Font.SetBold();
                            ws.Cell(currentRow, 8).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 8).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 8).Value = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 2 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT
                            var unobligatedTotalinTotalPSSaaConapTotal = PsTotalSaaConap - asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 2 && x.sourceType == "sub_allotment").Sum(x => x.amount);
                            ws.Cell(currentRow, 9).Style.Font.SetBold();
                            ws.Cell(currentRow, 9).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 9).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 9).Value = unobligatedTotalinTotalPSSaaConapTotal;

                            if (asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.sourceType == "sub_allotment").Sum(x => x.amount) == 0 && PsTotalSaa == 0)
                            {
                                ws.Cell(currentRow, 10).Value = "";
                                ws.Cell(currentRow, 10).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                            }
                            else
                            {
                                var totalPercentPSSaaTotalinTotals = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.sourceType == "sub_allotment").Sum(x => x.amount) / PsTotalSaa;
                                //PERCENT OF UTILIZATION
                                ws.Cell(currentRow, 10).Value = totalPercentPSSaaTotalinTotals;
                                ws.Cell(currentRow, 10).Style.NumberFormat.Format = "0.00%";
                                ws.Cell(currentRow, 10).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                currentRow++;
                            }
                        }

                        if (budget_allotment.SubAllotment.Where(x => x.AllotmentClassId == 2 && x.AppropriationId == 2 && x.BudgetAllotmentId == id).Any())
                        {

                            var MooeTotalSaa = _MyDbContext.SubAllotment.Where(x => x.AllotmentClassId == 2 && x.AppropriationId == 2 && x.BudgetAllotmentId == id).Sum(x => x.Beginning_balance);
                            var unobligatedTotalinTotalMOOESaa = MooeTotalSaa - asAtTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.appropriationID == 2 && x.sourceType == "sub_allotment" && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount);
                            var totalPercentMOOESaa = (double)asAtTotalinTotalPS.Where(x => x.allotmentClassID == 3 && x.appropriationID == 2 && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount) / allotment_total;

                            ws.Cell(currentRow, 3).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 3).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                            ws.Cell(currentRow, 3).Value = "TOTAL CONAP MOOE SAA";

                            ws.Cell(currentRow, 13).Style.Font.SetBold();
                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 13).Value = "-";

                            if (MooeTotalSaa == 0)
                            {
                                ws.Cell(currentRow, 14).Style.Font.SetBold();
                                ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 14).Value = "-";
                            }
                            else
                            {
                                ws.Cell(currentRow, 14).Style.Font.SetBold();
                                ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 14).Value = MooeTotalSaa;
                            }


                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_total;
                            }
                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = _MyDbContext.SubTransferedTo.Where(x => x.SubAllotment.AllotmentClassId == 2 && x.SubAllotment.AppropriationId == 2 && x.SubAllotment.BudgetAllotmentId == id).Sum(x => x.Amount);
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = MooeTotalSaa;

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.appropriationID == 2 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT

                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalMOOESaa;

                            //PERCENT OF UTILIZATION
                            ws.Cell(currentRow, 23).Style.Font.SetBold();
                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 23).Value = totalPercentMOOESaa;
                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            currentRow++;

                        }


                        //START IF PREVIOUS ALLOTMENT IS CHECKED TOTAL CONAP MOOE
                        if (_MyDbContext.SubAllotment.Where(x => x.IsAddToNextAllotment == true && x.AllotmentClassId == 2 && x.AppropriationId == 2 && x.Budget_allotment.Yearly_reference.YearlyReference == result).Any())
                        {

                            var MooeTotalSaa = _MyDbContext.SubAllotment.Where(x => x.IsAddToNextAllotment == true && x.AllotmentClassId == 2 && x.AppropriationId == 2).Sum(x => x.Beginning_balance);
                            var unobligatedTotalinTotalMOOESaa = MooeTotalSaa - asAtTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.appropriationID == 2 && x.sourceType == "sub_allotment" && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount);
                            var totalPercentMOOESaa = (double)asAtTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.appropriationID == 2 && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount) / allotment_total;

                            ws.Cell(currentRow, 3).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 3).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                            ws.Cell(currentRow, 3).Value = "TOTAL CONAP MOOE SAA FOR CY " + result;

                            ws.Cell(currentRow, 13).Style.Font.SetBold();
                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 13).Value = "-";

                            if (MooeTotalSaa == 0)
                            {
                                ws.Cell(currentRow, 14).Style.Font.SetBold();
                                ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 14).Value = "-";
                            }
                            else
                            {
                                ws.Cell(currentRow, 14).Style.Font.SetBold();
                                ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 14).Value = MooeTotalSaa;
                            }


                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_total;
                            }
                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = "0.00";
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = MooeTotalSaa;

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.appropriationID == 2 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT

                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalMOOESaa;

                            //PERCENT OF UTILIZATION
                            ws.Cell(currentRow, 23).Style.Font.SetBold();
                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 23).Value = totalPercentMOOESaa;
                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            currentRow++;

                        }
                        //END IF PREVIOUS ALLOTMENT IS CHECKED TOTAL CONAP MOOE

                        //TOTAL CO SAA
                        if (budget_allotment.SubAllotment.Where(x => x.AllotmentClassId == 3 && x.AppropriationId == 2).Any())
                        {

                            var CoTotalSaa = _MyDbContext.SubAllotment.Where(x => x.AllotmentClassId == 3 && x.AppropriationId == 2).Sum(x => x.Beginning_balance);
                            var unobligatedTotalinTotalCOSaa = CoTotalSaa - asAtTotalinTotalPS.Where(x => x.allotmentClassID == 3 && x.sourceType == "sub_allotment" && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount);
                            var totalPercentCOSaa = (double)asAtTotalinTotalPS.Where(x => x.allotmentClassID == 3 && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount) / allotment_total;


                            ws.Cell(currentRow, 3).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 3).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                            ws.Cell(currentRow, 3).Value = "TOTAL CONAP CO SAA";

                            ws.Cell(currentRow, 13).Style.Font.SetBold();
                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 13).Value = "-";

                            if (CoTotalSaa == 0)
                            {
                                ws.Cell(currentRow, 14).Style.Font.SetBold();
                                ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 14).Value = "-";
                            }
                            else
                            {
                                ws.Cell(currentRow, 14).Style.Font.SetBold();
                                ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 14).Value = CoTotalSaa;
                            }


                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_total;
                            }
                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = "0.00";
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = CoTotalSaa;

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 3 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 3 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT

                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalCOSaa;

                            //PERCENT OF UTILIZATION
                            ws.Cell(currentRow, 23).Style.Font.SetBold();
                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 23).Value = totalPercentCOSaa;
                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            currentRow++;

                        }
                        //TOTAL CO SAA

                        //START IF PREVIOUS ALLOTMENT IS CHECKED TOTAL CONAP CO
                        if (_MyDbContext.SubAllotment.Where(x => x.IsAddToNextAllotment == true && x.AllotmentClassId == 3 && x.AppropriationId == 2 && x.Budget_allotment.Yearly_reference.YearlyReference == result).Any())
                        {

                            var MooeTotalSaa = _MyDbContext.SubAllotment.Where(x => x.IsAddToNextAllotment == true && x.AllotmentClassId == 3 && x.AppropriationId == 2).Sum(x => x.Beginning_balance);
                            var unobligatedTotalinTotalMOOESaa = MooeTotalSaa - asAtTotalinTotalPS.Where(x => x.allotmentClassID == 3 && x.appropriationID == 2 && x.sourceType == "sub_allotment" && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount);
                            var totalPercentMOOESaa = (double)asAtTotalinTotalPS.Where(x => x.allotmentClassID == 3 && x.appropriationID == 2 && x.fundSourceBudgetAllotmentId == id).Sum(x => x.amount) / allotment_total;

                            ws.Cell(currentRow, 3).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 3).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                            ws.Cell(currentRow, 3).Value = "TOTAL CONAP CO SAA FOR CY " + result;


                            ws.Cell(currentRow, 13).Style.Font.SetBold();
                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 13).Value = "-";

                            if (MooeTotalSaa == 0)
                            {
                                ws.Cell(currentRow, 14).Style.Font.SetBold();
                                ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 14).Value = "-";
                            }
                            else
                            {
                                ws.Cell(currentRow, 14).Style.Font.SetBold();
                                ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 14).Value = MooeTotalSaa;
                            }


                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_total;
                            }
                            //TOTAL TRANSFER TO
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = _MyDbContext.SubTransferedTo.Where(x => x.SubAllotment.AllotmentClassId == 3 && x.SubAllotment.AppropriationId == 2 && x.SubAllotment.IsAddToNextAllotment == true && x.SubAllotment.Budget_allotment.Yearly_reference.YearlyReference == result).Sum(x => x.Amount);
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL - TOTAL AFTER REALIGNMENT
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = MooeTotalSaa - _MyDbContext.SubTransferedTo.Where(x => x.SubAllotment.AllotmentClassId == 3 && x.SubAllotment.AppropriationId == 2 && x.SubAllotment.IsAddToNextAllotment == true && x.SubAllotment.Budget_allotment.Yearly_reference.YearlyReference == result).Sum(x => x.Amount);

                            //TOTAL - FOR THE MONTH
                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.appropriationID == 2 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = asAtTotalinTotalPS.Where(x => x.allotmentClassID == 2 && x.sourceType == "sub_allotment").Sum(x => x.amount);

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT

                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalMOOESaa;

                            //PERCENT OF UTILIZATION
                            ws.Cell(currentRow, 23).Style.Font.SetBold();
                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 23).Value = totalPercentMOOESaa;
                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            currentRow++;

                        }
                        //END IF PREVIOUS ALLOTMENT IS CHECKED TOTAL CONAP CO


                        if (_MyDbContext.FundSources.Where(x => x.AppropriationId == 2 && x.BudgetAllotmentId == id).Any() || _MyDbContext.SubAllotment.Where(x => x.AppropriationId == 2 && x.BudgetAllotmentId == id).Any())
                        {
                            var TotalCONAP = _MyDbContext.FundSources.Where(x => x.AppropriationId == 2 && x.BudgetAllotmentId == id).Sum(x => x.Beginning_balance) + _MyDbContext.SubAllotment.Where(x => x.AppropriationId == 2 && x.BudgetAllotmentId == id).Sum(x => x.Beginning_balance) + _MyDbContext.SubAllotment.Where(x => x.IsAddToNextAllotment == true && x.Budget_allotment.Yearly_reference.YearlyReference == result).Sum(x => x.Beginning_balance);
                            var TotalCONAPRegular = _MyDbContext.FundSources.Where(x => x.AppropriationId == 2 && x.BudgetAllotmentId == id).Sum(x => x.Beginning_balance);
                            var TotalCONAPSaa = _MyDbContext.SubAllotment.Where(x => x.AppropriationId == 2 && x.BudgetAllotmentId == id).Sum(x => x.Beginning_balance) + _MyDbContext.SubAllotment.Where(x => x.IsAddToNextAllotment == true && x.Budget_allotment.Yearly_reference.YearlyReference == result).Sum(x => x.Beginning_balance);

                            //Thick Border
                            for (int i = 1; i < 24; i++)
                            {
                                //Thick border
                                ws.Cell(currentRow, i).Style.Border.TopBorder = XLBorderStyleValues.Thick;
                                //ws.Cell(currentRow, i).Style.Border.BottomBorder = XLBorderStyleValues.Thick;
                            }

                            ws.Cell(currentRow, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 2).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 3).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 4).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 5).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 6).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 7).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 8).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 9).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 10).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 11).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 12).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 13).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 14).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 15).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 16).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 17).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 18).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 19).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 22).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 23).Style.Fill.BackgroundColor = XLColor.FromHtml("#FABF8F");
                            ws.Cell(currentRow, 3).Style.Font.SetBold();
                            ws.Cell(currentRow, 3).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 3).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 3).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Left);
                            ws.Cell(currentRow, 3).Value = "TOTAL CONTINUING APPROPRIATION";

                            ws.Cell(currentRow, 13).Style.Font.SetBold();
                            ws.Cell(currentRow, 13).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 13).Value = TotalCONAPRegular;

                            ws.Cell(currentRow, 14).Style.Font.SetBold();
                            ws.Cell(currentRow, 14).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 14).Value = TotalCONAPSaa;

                            //REALIGNMENT TOTAL
                            var realignment_total = budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - budget_allotment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                            if (realignment_total == null)
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = 0.00;
                            }
                            else
                            {
                                ws.Cell(currentRow, 17).Style.Font.SetBold();
                                ws.Cell(currentRow, 17).Style.Font.FontSize = 10;
                                ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                                ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                                ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                                ws.Cell(currentRow, 17).Value = realignment_total;
                            }
                            //TOTAL TRANSFER TO
                            var GrandTotalWithTransferedAmountConap = _MyDbContext.FundTransferedTo.Where(x => x.FundSource.AppropriationId == 2 && x.FundSource.IsAddToNextAllotment == true && x.FundSource.BudgetAllotment.Yearly_reference.YearlyReference == result).Sum(x => x.Amount) + _MyDbContext.FundTransferedTo.Where(x => x.FundSource.AppropriationId == 2 && x.FundSource.BudgetAllotmentId == id).Sum(x => x.Amount)
                                                                    + _MyDbContext.SubTransferedTo.Where(x => x.SubAllotment.AppropriationId == 2 && x.SubAllotment.IsAddToNextAllotment == true && x.SubAllotment.Budget_allotment.Yearly_reference.YearlyReference == result).Sum(x => x.Amount) + _MyDbContext.SubTransferedTo.Where(x => x.SubAllotment.AppropriationId == 2 && x.SubAllotment.BudgetAllotmentId == id).Sum(x => x.Amount);
                            ws.Cell(currentRow, 18).Style.Font.SetBold();
                            ws.Cell(currentRow, 18).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 18).Value = GrandTotalWithTransferedAmountConap;
                            ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                            //TOTAL FUNDSOURCE - TOTAL AFTER REALIGMENT
                            ws.Cell(currentRow, 19).Style.Font.SetBold();
                            ws.Cell(currentRow, 19).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 19).Value = TotalCONAP - GrandTotalWithTransferedAmountConap;

                            var fortheMonthTotalinTotalCONAP = (from oa in _MyDbContext.ObligationAmount
                                                                join o in _MyDbContext.Obligation
                                                                on oa.ObligationId equals o.Id
                                                                join f in _MyDbContext.FundSources
                                                                on o.FundSourceId equals f.FundSourceId
                                                                where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                                select new
                                                                {
                                                                    amount = oa.Amount,
                                                                    uacsId = oa.UacsId,
                                                                    sourceId = o.FundSourceId,
                                                                    date = o.Date,
                                                                    status = o.status,
                                                                    allotmentClassID = f.AllotmentClassId,
                                                                    appropriationID = f.AppropriationId
                                                                });

                            var asAtTotalinTotalCONAP = (from oa in _MyDbContext.ObligationAmount
                                                         join o in _MyDbContext.Obligation
                                                         on oa.ObligationId equals o.Id
                                                         join f in _MyDbContext.FundSources
                                                         on o.FundSourceId equals f.FundSourceId
                                                         where o.Date >= date1 && o.Date <= date2
                                                         select new
                                                         {
                                                             amount = oa.Amount,
                                                             sourceId = o.FundSourceId,
                                                             uacsId = oa.UacsId,
                                                             status = o.status,
                                                             allotmentClassID = f.AllotmentClassId,
                                                             appropriationID = f.AppropriationId
                                                         });

                            var ConapTotal = _MyDbContext.FundSources.Sum(x => x.Beginning_balance) + _MyDbContext.SubAllotment.Sum(x => x.Beginning_balance);

                            //TOTAL - FOR THE MONTH
                            var ConapApproForthemonth = fortheMonthTotalinTotalCONAP.Where(x => x.appropriationID == 2).Sum(x => x.amount) + fortheMonthTotalinTotalPS.Where(x => x.allotmentClassID == 1 && x.appropriationID == 2 && x.sourceType == "sub_allotment").Sum(x => x.amount);
                            var ConapApproAsat = asAtTotalinTotalCONAP.Where(x => x.appropriationID == 2).Sum(x => x.amount) + asAtTotalinTotalPS.Where(x => x.appropriationID == 2 && x.sourceType == "sub_allotment").Sum(x => x.amount);
                            ws.Cell(currentRow, 20).Style.Font.SetBold();
                            ws.Cell(currentRow, 20).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 20).Value = ConapApproForthemonth;

                            //TOTAL - AS AT
                            ws.Cell(currentRow, 21).Style.Font.SetBold();
                            ws.Cell(currentRow, 21).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 21).Value = ConapApproAsat;

                            //TOTAL - UNOBLIGATED BALANCE OF ALLOTMENT
                            var unobligatedTotalinTotalCONAP = TotalCONAP - ConapApproAsat;

                            ws.Cell(currentRow, 22).Style.Font.SetBold();
                            ws.Cell(currentRow, 22).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                            ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            ws.Cell(currentRow, 22).Value = unobligatedTotalinTotalCONAP;

                            //PERCENT OF UTILIZATION
                            var totalPercentCONAP = ConapApproAsat / ConapTotal;

                            ws.Cell(currentRow, 23).Style.Font.SetBold();
                            ws.Cell(currentRow, 23).Style.Font.FontSize = 10;
                            ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                            ws.Cell(currentRow, 23).Value = totalPercentCONAP;
                            ws.Cell(currentRow, 23).Style.NumberFormat.Format = "0.00%";
                            ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                            //END CONAP SUMMARY
                        }

                    }

                    currentRow++;
                }

                var GrandTotals = _MyDbContext.FundSources.Where(x => x.BudgetAllotmentId == id).Sum(x => x.Beginning_balance) + _MyDbContext.SubAllotment.Where(x => x.BudgetAllotmentId == id).Sum(x => x.Beginning_balance) + _MyDbContext.SubAllotment.Where(x => x.IsAddToNextAllotment == true && x.Budget_allotment.Yearly_reference.YearlyReference == result).Sum(x => x.Beginning_balance);
                var GrandTotalsRegular = _MyDbContext.FundSources.Where(x => x.BudgetAllotmentId == id && x.Breakdown == false).Sum(x => x.Beginning_balance) + _MyDbContext.SubAllotment.Where(x => x.AllotmentClassId == 1 && x.AppropriationId == 1 && x.Suballotment_title.Contains("SARO")).Sum(x => x.Beginning_balance);
                var GrandTotalsSaa = _MyDbContext.SubAllotment.Where(x => x.BudgetAllotmentId == id).Sum(x => x.Beginning_balance) + _MyDbContext.SubAllotment.Where(x => x.IsAddToNextAllotment == true && x.Budget_allotment.Yearly_reference.YearlyReference == result).Sum(x => x.Beginning_balance);



                //Border
                for (int i = 1; i < 24; i++)
                {
                    //Thick border
                    ws.Cell(currentRow, i).Style.Border.TopBorder = XLBorderStyleValues.Thin;
                    ws.Cell(currentRow, i).Style.Border.TopBorderColor = XLColor.White;
                    ws.Cell(currentRow, i).Style.Border.BottomBorder = XLBorderStyleValues.Thin;
                    ws.Cell(currentRow, i).Style.Border.BottomBorderColor = XLColor.White;
                    ws.Cell(currentRow, i + 10).Style.Border.RightBorder = XLBorderStyleValues.Thin;
                    ws.Cell(currentRow, i + 10).Style.Border.RightBorderColor = XLColor.White;
                }

                ws.Cell(currentRow, 1).Style.Fill.BackgroundColor = XLColor.FromHtml("#002060");
                ws.Cell(currentRow, 2).Style.Fill.BackgroundColor = XLColor.FromHtml("#002060");
                ws.Cell(currentRow, 3).Style.Fill.BackgroundColor = XLColor.FromHtml("#002060");
                ws.Cell(currentRow, 4).Style.Fill.BackgroundColor = XLColor.FromHtml("#002060");
                ws.Cell(currentRow, 5).Style.Fill.BackgroundColor = XLColor.FromHtml("#002060");
                ws.Cell(currentRow, 6).Style.Fill.BackgroundColor = XLColor.FromHtml("#002060");
                ws.Cell(currentRow, 7).Style.Fill.BackgroundColor = XLColor.FromHtml("#002060");
                ws.Cell(currentRow, 8).Style.Fill.BackgroundColor = XLColor.FromHtml("#002060");
                ws.Cell(currentRow, 9).Style.Fill.BackgroundColor = XLColor.FromHtml("#002060");
                ws.Cell(currentRow, 10).Style.Fill.BackgroundColor = XLColor.FromHtml("#002060");
                ws.Cell(currentRow, 11).Style.Fill.BackgroundColor = XLColor.FromHtml("#002060");
                ws.Cell(currentRow, 12).Style.Fill.BackgroundColor = XLColor.FromHtml("#002060");
                ws.Cell(currentRow, 13).Style.Fill.BackgroundColor = XLColor.FromHtml("#002060");
                ws.Cell(currentRow, 14).Style.Fill.BackgroundColor = XLColor.FromHtml("#002060");
                ws.Cell(currentRow, 15).Style.Fill.BackgroundColor = XLColor.FromHtml("#002060");
                ws.Cell(currentRow, 16).Style.Fill.BackgroundColor = XLColor.FromHtml("#002060");
                ws.Cell(currentRow, 17).Style.Fill.BackgroundColor = XLColor.FromHtml("#002060");
                ws.Cell(currentRow, 18).Style.Fill.BackgroundColor = XLColor.FromHtml("#002060");
                ws.Cell(currentRow, 19).Style.Fill.BackgroundColor = XLColor.FromHtml("#002060");
                ws.Cell(currentRow, 20).Style.Fill.BackgroundColor = XLColor.FromHtml("#002060");
                ws.Cell(currentRow, 21).Style.Fill.BackgroundColor = XLColor.FromHtml("#002060");
                ws.Cell(currentRow, 22).Style.Fill.BackgroundColor = XLColor.FromHtml("#002060");
                ws.Cell(currentRow, 23).Style.Fill.BackgroundColor = XLColor.FromHtml("#002060");
                ws.Cell(currentRow, 1).Style.Font.SetBold();
                ws.Cell(currentRow, 1).Style.Font.FontSize = 12;
                ws.Cell(currentRow, 1).Style.Font.FontName = "Calibri Light";
                ws.Cell(currentRow, 1).Style.Font.FontColor = XLColor.White;
                ws.Cell(currentRow, 1).Value = "GRAND TOTAL";
                //ws.Range("A1488:W1488").Style.Border.TopBorder = XLBorderStyleValues.Double;
                //ws.Range("A1488:W1488").Style.Border.RightBorder = XLBorderStyleValues.Double;
                //ws.Range("A1488:W1488").Style.Border.LeftBorder = XLBorderStyleValues.Double;
                //ws.Range("A1488:W1488").Style.Border.BottomBorder = XLBorderStyleValues.Double;



                //currentRow++;
                ws.Cell(currentRow, 13).Style.Font.SetBold();
                ws.Cell(currentRow, 13).Style.Font.FontSize = 12;
                ws.Cell(currentRow, 13).Style.Font.FontName = "Calibri Light";
                ws.Cell(currentRow, 13).Style.NumberFormat.Format = "#,##0.00";
                ws.Cell(currentRow, 13).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                ws.Cell(currentRow, 13).Style.Font.FontColor = XLColor.White;
                ws.Cell(currentRow, 13).Value = GrandTotalsRegular;

                ws.Cell(currentRow, 14).Style.Font.SetBold();
                ws.Cell(currentRow, 14).Style.Font.FontSize = 12;
                ws.Cell(currentRow, 14).Style.Font.FontName = "Calibri Light";
                ws.Cell(currentRow, 14).Style.NumberFormat.Format = "#,##0.00";
                ws.Cell(currentRow, 14).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                ws.Cell(currentRow, 14).Style.Font.FontColor = XLColor.White;
                ws.Cell(currentRow, 14).Value = GrandTotalsSaa;

                var GrandRealignment = _MyDbContext.Budget_allotments.Include(x => x.FundSources).ThenInclude(x => x.FundsRealignment).FirstOrDefault();

                //REALIGNMENT GRANDTOTAL
                var realignment_grandtotal = GrandRealignment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount) - GrandRealignment.FundSources.FirstOrDefault()?.FundsRealignment?.Sum(x => x.Realignment_amount);
                if (realignment_grandtotal == null)
                {
                    ws.Cell(currentRow, 17).Style.Font.FontColor = XLColor.White;
                    ws.Cell(currentRow, 17).Style.Font.SetBold();
                    ws.Cell(currentRow, 17).Style.Font.FontSize = 12;
                    ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                    ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                    ws.Cell(currentRow, 17).Value = 0.00;
                }
                else
                {
                    ws.Cell(currentRow, 17).Style.Font.FontColor = XLColor.White;
                    ws.Cell(currentRow, 17).Style.Font.SetBold();
                    ws.Cell(currentRow, 17).Style.Font.FontSize = 12;
                    ws.Cell(currentRow, 17).Style.Font.FontName = "Calibri Light";
                    ws.Cell(currentRow, 17).Style.NumberFormat.Format = "#,##0.00";
                    ws.Cell(currentRow, 17).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                    ws.Cell(currentRow, 17).Value = realignment_grandtotal;
                }

                //GRANDTOTAL TRANSFER TO
                var grandtotaltransfer = _MyDbContext.FundTransferedTo.Sum(x => x.Amount) + _MyDbContext.SubTransferedTo.Sum(x => x.Amount);
                ws.Cell(currentRow, 18).Style.Font.FontColor = XLColor.White;
                ws.Cell(currentRow, 18).Style.Font.SetBold();
                ws.Cell(currentRow, 18).Style.Font.FontSize = 12;
                ws.Cell(currentRow, 18).Style.Font.FontName = "Calibri Light";
                ws.Cell(currentRow, 18).Value = grandtotaltransfer.ToString("N", new CultureInfo("en-US"));
                ws.Cell(currentRow, 18).Style.NumberFormat.Format = "#,##0.00";
                ws.Cell(currentRow, 18).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);

                //GRANDTOTAL - TOTAL AFTER REALIGNMENT
                ws.Cell(currentRow, 19).Style.Font.SetBold();
                ws.Cell(currentRow, 19).Style.Font.FontSize = 12;
                ws.Cell(currentRow, 19).Style.Font.FontName = "Calibri Light";
                ws.Cell(currentRow, 19).Style.NumberFormat.Format = "#,##0.00";
                ws.Cell(currentRow, 19).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                ws.Cell(currentRow, 19).Style.Font.FontColor = XLColor.White;
                ws.Cell(currentRow, 19).Value = GrandTotals - grandtotaltransfer;

                var fortheMonthTotalinTotalCONAPGrand = (from oa in _MyDbContext.ObligationAmount
                                                         join o in _MyDbContext.Obligation
                                                         on oa.ObligationId equals o.Id
                                                         join f in _MyDbContext.FundSources
                                                         on o.FundSourceId equals f.FundSourceId
                                                         where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                         select new
                                                         {
                                                             amount = oa.Amount,
                                                             uacsId = oa.UacsId,
                                                             sourceId = o.FundSourceId,
                                                             date = o.Date,
                                                             status = o.status,
                                                             allotmentClassID = f.AllotmentClassId,
                                                             appropriationID = f.AppropriationId
                                                         });

                var fortheMonthTotalinTotalCONAPGrandSaa = (from oa in _MyDbContext.ObligationAmount
                                                            join o in _MyDbContext.Obligation
                                                            on oa.ObligationId equals o.Id
                                                            join s in _MyDbContext.SubAllotment
                                                            on o.SubAllotmentId equals s.SubAllotmentId
                                                            where o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday
                                                            select new
                                                            {
                                                                amount = oa.Amount,
                                                                uacsId = oa.UacsId,
                                                                sourceId = o.SubAllotmentId,
                                                                date = o.Date,
                                                                status = o.status,
                                                                allotmentClassID = s.AllotmentClassId,
                                                                appropriationID = s.AppropriationId
                                                            });

                var asAtTotalinTotalCONAPGrand = (from oa in _MyDbContext.ObligationAmount
                                                  join o in _MyDbContext.Obligation
                                                  on oa.ObligationId equals o.Id
                                                  join f in _MyDbContext.FundSources
                                                  on o.FundSourceId equals f.FundSourceId
                                                  where o.Date >= date1 && o.Date <= date2
                                                  select new
                                                  {
                                                      amount = oa.Amount,
                                                      sourceId = o.FundSourceId,
                                                      uacsId = oa.UacsId,
                                                      status = o.status,
                                                      allotmentClassID = f.AllotmentClassId,
                                                      appropriationID = f.AppropriationId
                                                  });

                var ConapTotalGrand = _MyDbContext.FundSources.Sum(x => x.Beginning_balance) + _MyDbContext.SubAllotment.Sum(x => x.Beginning_balance);
                var ConapApproForthemonthGrand = fortheMonthTotalinTotalCONAPGrand.Where(x => x.appropriationID == 1 && x.status == "activated").Sum(x => x.amount) + fortheMonthTotalinTotalCONAPGrand.Where(x => x.appropriationID == 2 && x.status == "activated").Sum(x => x.amount)
                                              + fortheMonthTotalinTotalCONAPGrandSaa.Where(x => x.appropriationID == 1 && x.status == "activated").Sum(x => x.amount) + fortheMonthTotalinTotalCONAPGrandSaa.Where(x => x.appropriationID == 2 && x.status == "activated").Sum(x => x.amount);
                var ConapApproAsatGrand = asAtTotalinTotalCONAPGrand.Where(x => x.appropriationID == 1 && x.status == "activated").Sum(x => x.amount) + asAtTotalinTotalPS.Where(x => x.appropriationID == 2).Sum(x => x.amount);
                ws.Cell(currentRow, 20).Style.Font.SetBold();
                ws.Cell(currentRow, 20).Style.Font.FontSize = 12;
                ws.Cell(currentRow, 20).Style.Font.FontName = "Calibri Light";
                ws.Cell(currentRow, 20).Style.NumberFormat.Format = "#,##0.00";
                ws.Cell(currentRow, 20).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                ws.Cell(currentRow, 20).Style.Font.FontColor = XLColor.White;
                ws.Cell(currentRow, 20).Value = ConapApproForthemonthGrand;

                ws.Cell(currentRow, 21).Style.Font.SetBold();
                ws.Cell(currentRow, 21).Style.Font.FontSize = 12;
                ws.Cell(currentRow, 21).Style.Font.FontName = "Calibri Light";
                ws.Cell(currentRow, 21).Style.NumberFormat.Format = "#,##0.00";
                ws.Cell(currentRow, 21).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                ws.Cell(currentRow, 21).Style.Font.FontColor = XLColor.White;
                ws.Cell(currentRow, 21).Value = ConapApproAsatGrand;

                var GrandTotalUnobligated_amount = GrandTotals - ConapApproAsatGrand;
                ws.Cell(currentRow, 22).Style.Font.SetBold();
                ws.Cell(currentRow, 22).Style.Font.FontSize = 12;
                ws.Cell(currentRow, 22).Style.Font.FontName = "Calibri Light";
                ws.Cell(currentRow, 22).Style.NumberFormat.Format = "#,##0.00";
                ws.Cell(currentRow, 22).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                ws.Cell(currentRow, 22).Style.Font.FontColor = XLColor.White;
                ws.Cell(currentRow, 22).Value = GrandTotalUnobligated_amount.ToString("N", new CultureInfo("en-US"));

                var GrandTotalpercentage = ConapApproAsatGrand / ConapTotalGrand;
                ws.Cell(currentRow, 23).Style.Font.SetBold();
                ws.Cell(currentRow, 23).Style.Font.FontSize = 12;
                ws.Cell(currentRow, 23).Style.Font.FontName = "Calibri Light";
                ws.Cell(currentRow, 23).Style.NumberFormat.Format = "#,##0.00";
                ws.Cell(currentRow, 23).Style.Alignment.SetHorizontal(XLAlignmentHorizontalValues.Right);
                ws.Cell(currentRow, 23).Style.Font.FontColor = XLColor.White;
                ws.Cell(currentRow, 23).Value = GrandTotalpercentage.ToString("N", new CultureInfo("en-US"));


                timer.Stop();
                TimeSpan timeTaken = timer.Elapsed;
                //string foo = "Time taken: " + timeTaken.ToString(@"m\:ss\.fff");

                Thread.Sleep(timeTaken);

                //ws.Columns().AdjustToContents();
                //ws.Rows().AdjustToContents();
                using (MemoryStream stream = new MemoryStream())
                {
                    wb.SaveAs(stream);
                    //ws.Columns().AdjustToContents();
                    //ws.Rows().AdjustToContents();
                    return File(stream.ToArray(), "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", date2.ToString("MMMM").ToUpper() + ".xlsx");
                    return View("DownloadSaob.cshtml");
                }
            }
        }

        public IActionResult DownloadSaob()
        {
            ViewBag.filter = new FilterSidebar("budget_report", "saob", "");
            PopulatePrexcsDropDownList();
            return View();
        }


        [Route("Dv/Saob2")] 
        public IActionResult DownloadSaob2()
        {
            ViewBag.filter = new FilterSidebar("budget_report", "saob", "");
           // DownloadExcel();


            return View();
        }
        [HttpPost]
        //view FundSource/FundSource
        //view FundSource/FundSourceAmount/Uacs
        public IActionResult DownloadExcel(string fn, string date_from, string date_to)
        {
            var timer = new Stopwatch();
            timer.Start();

            DateTime date1 = Convert.ToDateTime(date_from);
            DateTime date2 = Convert.ToDateTime(date_to);
            DateTime datefilter = Convert.ToDateTime(date_to);
            String date3 = datefilter.ToString("MMMM dd, yyyy", CultureInfo.InvariantCulture);

           date1 = date1.Date;
            date2 = date2.Date.AddDays(1).AddTicks(-1);
            DateTime dateTimeNow = date2;
            DateTime dateTomorrow = dateTimeNow.Date.AddDays(1);

            //LASTDAY OF The MONTH
            var firstDayOfMonth = new DateTime(date2.Year, date2.Month, 1);
            var lastDayOfMonth = firstDayOfMonth.AddMonths(1).AddDays(-1);
            DateTime lastday = Convert.ToDateTime(lastDayOfMonth);
            lastday = lastday.Date.AddDays(1).AddTicks(-1);

            var funsources = (from fs in _MyDbContext.FundSources
                              join fsa in _MyDbContext.FundSourceAmount on fs.FundSourceId equals fsa.FundSourceId
                              join u in _MyDbContext.Uacs on fsa.UacsId equals u.UacsId
                              join o in _MyDbContext.Obligation on fs.FundSourceId equals o.FundSourceId
                              where o.Date >= date1 && o.Date <= date2
                              select new
                                {
                                  UacsId = u.UacsId,
                                  Date = o.Date,
                                  fundsourceId = fs.FundSourceId,
                                  fundsTitle = fs.FundSourceTitle,
                                  Account_title = u.Account_title,
                                  expensesCode = u.Expense_code
                              }).Distinct().ToList();


            // var fundsource3 = (from fs in _MyDbContext.FundSources
            //join fsa in _MyDbContext.FundSourceAmount) 
            //return Json(columnData);

            // return Json(funsources.FirstOrDefault().fundsTitle);



            // Create a new Excel package
            // Create a new workbook
            var workbook = new XLWorkbook();

            // Add a worksheet
            var worksheet = workbook.Worksheets.Add("Sheet1");
            //worksheet.Cells.AutoFitColumns();
            //worksheet.Columns[1].AutoFit();
            //worksheet.Cells[worksheet.Dimension.Address].AutoFitColumns();


            worksheet.Cell(1, 9).Style.Font.SetBold();

            worksheet.Cell(2, 9).Style.Font.SetBold();

            worksheet.Cell(1, 9).Value = "STATEMENT OF ALLOTMENTS,OBLIGATIONS,DISBURSEMENT AND BALANCES:";
            worksheet.Cell(2, 9).Value = "As at April 30, 2023";
            worksheet.Cell(1, 9).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            worksheet.Cell(2, 9).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;

            worksheet.Cell(4, 1).Style.Font.SetBold();
            worksheet.Cell(5, 1).Style.Font.SetBold();
            worksheet.Cell(6, 1).Style.Font.SetBold();
            worksheet.Cell(4, 1).Value = "Department:";
            worksheet.Cell(5, 1).Value = "Agency:";
            worksheet.Cell(6, 1).Value = "Fund:";



            //ws.Cell(14, 1).Style.Font.SetBold();
            //ws.Cell(14, 1).Style.Font.FontSize = 10;
            //ws.Cell(14, 1).Style.Font.FontName = "Lucida Bright";
            //ws.Cell(14, 1).Value = "P/A/P/ ALLOTMENT CLASS/ \n OBJECT OF EXPENDITURE";
            //ws.Cell(14, 1).Style.Alignment.WrapText = true;
            //ws.Cell(14, 1).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            //ws.Cell(14, 1).Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            //ws.Range(ws.Cell(14, 1), ws.Cell(17, 11)).Merge();
            ////ws.Cell(14, 1).Style.Border.TopBorder = XLBorderStyleValues.Thin;
            ////ws.Cell(17, 11).Style.Border.TopBorder = XLBorderStyleValues.Thin;
            //ws.Rows(14, 19).Height = 16;
            //ws.Columns(1, 11).Width = 2.6
            worksheet.Cell(4, 2).Style.Font.SetBold();
            worksheet.Cell(5, 2).Style.Font.SetBold();
            worksheet.Cell(6, 2).Style.Font.SetBold();
            worksheet.Cell(4, 2).Value = "HEALTH:";
            worksheet.Cell(5, 2).Value = "Central Visayas Center For Health Development:";
            worksheet.Cell(6, 2).Value = "ALL FUND SOURCE";


            worksheet.Cell(8, 1).Value = "2";
            worksheet.Cell(8, 2).Value = "3";
            worksheet.Cell(8, 3).Value = "4";
            worksheet.Cell(8, 4).Value = "5";
            worksheet.Cell(8, 5).Value = "6";
            worksheet.Cell(8, 6).Value = "7:00";
            worksheet.Cell(8, 7).Value = "8.00";
            worksheet.Cell(8, 8).Value = "9.00";
            worksheet.Cell(8, 9).Value = "37.00";
            worksheet.Cell(8, 10).Value = "22.00";
            worksheet.Cell(8, 11).Value = "23.00";
            worksheet.Cell(8, 13).Value = "37.00";
            worksheet.Cell(8, 14).Value = "37.00";
            worksheet.Cell(8, 15).Value = "37.00";
            worksheet.Cell(8, 16).Value = "36.00";
            worksheet.Cell(8, 17).Value = "37.00";


            //Top Border  All Border
            var Range = worksheet.Range("A8:U8");
            Range.Style.Border.BottomBorder = XLBorderStyleValues.Thick;

            var Range1 = worksheet.Range("U9:U1000");
            Range1.Style.Border.RightBorder = XLBorderStyleValues.Thick;

            var Range2 = worksheet.Range("C11:U11");
            Range2.Style.Border.BottomBorder = XLBorderStyleValues.Thick;

            var Range3 = worksheet.Range("A9:A1000");
            Range3.Style.Border.RightBorder = XLBorderStyleValues.Thin;

            var Range4 = worksheet.Range("B9:B1000");
            Range4.Style.Border.RightBorder = XLBorderStyleValues.Thin;

            var Range5 = worksheet.Range("C9:C1000");
            Range5.Style.Border.RightBorder = XLBorderStyleValues.Thin;

            var Range6 = worksheet.Range("D9:D1000");
            Range6.Style.Border.RightBorder = XLBorderStyleValues.Thin;

            var Range7 = worksheet.Range("E9:E1000");
            Range7.Style.Border.RightBorder = XLBorderStyleValues.Thin;

            var range8 = worksheet.Range("F9:F1000");
            range8.Style.Border.RightBorder = XLBorderStyleValues.Thin;

            var Range9 = worksheet.Range("G9:G1000");
            Range9.Style.Border.RightBorder = XLBorderStyleValues.Thin;

            var Range10 = worksheet.Range("H9:H1000");
            Range10.Style.Border.RightBorder = XLBorderStyleValues.Thin;

            var Range11 = worksheet.Range("I10:I1000");
            Range11.Style.Border.RightBorder = XLBorderStyleValues.Thin;

            var Range12 = worksheet.Range("J10:J1000");
            Range12.Style.Border.RightBorder = XLBorderStyleValues.Thin;

            var RangeI12 = worksheet.Range("I9:J9");
            RangeI12.Style.Border.BottomBorder = XLBorderStyleValues.Thin;
            RangeI12.Style.Border.RightBorder = XLBorderStyleValues.Thin;

            var Range13 = worksheet.Range("K9:K1000");
            Range13.Style.Border.RightBorder = XLBorderStyleValues.Thin;

            var Range14 = worksheet.Range("L9:L1000");
            Range14.Style.Border.RightBorder = XLBorderStyleValues.Thin;

            var Range14LMNOP = worksheet.Range("L9:P9");
            Range14LMNOP.Style.Border.BottomBorder = XLBorderStyleValues.Thin;

            var Range15 = worksheet.Range("M9:M1000");
            Range15.Style.Border.RightBorder = XLBorderStyleValues.Thin;

            var Range16 = worksheet.Range("N9:N10000");
            Range16.Style.Border.RightBorder = XLBorderStyleValues.Thin;

            var Range17 = worksheet.Range("O9:O1000");
            Range17.Style.Border.RightBorder = XLBorderStyleValues.Thin;

            var Range18 = worksheet.Range("P9:P1000");
            Range18.Style.Border.RightBorder = XLBorderStyleValues.Thin;

            var Range19 = worksheet.Range("Q9:Q1000");
            Range19.Style.Border.RightBorder = XLBorderStyleValues.Thin;

            var Range20 = worksheet.Range("R9:R1000");
            Range20.Style.Border.RightBorder = XLBorderStyleValues.Thin;

            var RangeQR = worksheet.Range("Q9:R9");
            RangeQR.Style.Border.BottomBorder = XLBorderStyleValues.Thin;

            var Range21 = worksheet.Range("S9:S1000");
            Range21.Style.Border.RightBorder = XLBorderStyleValues.Thin;

            var Range22 = worksheet.Range("T9:T1000");
            Range22.Style.Border.RightBorder = XLBorderStyleValues.Thin;


            ////worksheet.Cell(9, 1).Style.Fill.BackgroundColor = XLColor.Pink;
            ////worksheet.Cell(9, 1).Value = "P/A/P/ ALLOTMENT CLASS/ \n OBJECT OF EXPENDITURE";
            ////worksheet.Cell(9, 1).Style.Font.FontSize = 10;
            //// Merge four rows
            //  Write the data to the worksheet 
            worksheet.Cell(14, 1).Style.Font.FontColor = XLColor.Red;
            worksheet.Cell(14, 1).Value = "|. NEW APPROPRIATION (CURRENT)";
            worksheet.Cell(14, 1).Style.Font.FontSize = 9;
            worksheet.Cell(14, 1).Style.Font.SetBold();

            worksheet.Cell(15, 1).Style.Font.FontColor = XLColor.Black;
            worksheet.Cell(15, 1).Value = "A. PROGRAMS";
            worksheet.Cell(15, 1).Style.Font.FontSize = 9;
            worksheet.Cell(15, 1).Style.Font.SetBold();

            worksheet.Cell(16, 1).Style.Font.FontColor = XLColor.Black;
            worksheet.Cell(16, 1).Value = "|. GENERAL ADMINISTRATION AND SUPPORT";
            worksheet.Cell(16, 1).Style.Font.FontSize = 9;
            worksheet.Cell(16, 1).Style.Font.SetBold();
            //P/A/P/ ALLOTMENTS CLASS OBJECT OF EXPENDITURE

            var Datas = _MyDbContext.FundSources
                  .Include(x => x.Prexc)
                  .Include(x => x.AllotmentClass)
                  .Include(x => x.Uacs)
                  .ToList();
                
     
              

            int CurrentRow = 16;
            IXLRow row = worksheet.Row(CurrentRow);
            int startingRow = CurrentRow;
            CurrentRow++;


            foreach(var fundSource in Datas)
            {

                var prexc = fundSource.Prexc;
                
                if(prexc != null)
                {
                    var prexPap_code1 = prexc.pap_code1;
                    var prexcPap_title = prexc.pap_title;
                    var uniquePap_title = new List<string>();

                    worksheet.Cell(CurrentRow, 1).Value = prexcPap_title;
                    worksheet.Cell(CurrentRow, 1).Style.Font.FontSize = 8;
 
                    worksheet.Cell(CurrentRow, 2).Value = prexPap_code1;
                    worksheet.Cell(CurrentRow, 2).Style.Font.FontSize = 8;
                    worksheet.Cell(CurrentRow, 2).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
                    CurrentRow++;
                }
            } 
           //var filteredFunsources = funsources.Where(o => o.Date >= date1 && o.Date <= lastday && o.Date >= firstDayOfMonth && o.Date <= lastday).ToList();
           // var filteredFunsources = funsources.Where(sa => sa.fundsourceId == sa.fundsourceId).ToList();
            // Get distinct category names
            var fundsTitle = funsources.Select(fs => fs.fundsTitle).Distinct().ToList();

            // Iterate through the fundsTitle and display each value in a separate row
            foreach (var title in fundsTitle)
            {
                if (string.IsNullOrEmpty(title)) // Skip empty or null titles
                    continue;

                worksheet.Cell(CurrentRow, 1).Value = title;
                worksheet.Cell(CurrentRow, 1).Style.Font.SetBold();
                worksheet.Cell(CurrentRow, 1).Style.Font.FontColor = XLColor.Red;
                worksheet.Cell(CurrentRow, 1).Style.Font.FontSize = 8;
                CurrentRow++;



                // Get the items belonging to the current category
                var itemsInCategory = funsources.Where(fs => fs.fundsTitle == title).ToList();

                // Create separate lists to store unique Account_title and expensesCode
                var uniqueAccountTitles = new List<string>();
                var uniqueExpensesCodes = new List<string>();

                // Iterate through the items and store unique Account_title and expensesCode
                foreach (var item in itemsInCategory)
                {
                    if (!uniqueAccountTitles.Contains(item.Account_title))
                        uniqueAccountTitles.Add(item.Account_title);

                    if (!uniqueExpensesCodes.Contains(item.expensesCode))
                        uniqueExpensesCodes.Add(item.expensesCode);
                }

                // Display the items and expensesCode in the same row for the current category
                foreach (var accountTitle in uniqueAccountTitles)
                {
                    worksheet.Cell(CurrentRow, 1).Value = accountTitle;
                    worksheet.Cell(CurrentRow, 1).Style.Font.FontSize = 8; // Replace 8 with the desired font size

                    // Find the corresponding expensesCode for the accountTitle
                    var expensesCode = itemsInCategory.FirstOrDefault(item => item.Account_title == accountTitle)?.expensesCode;
                    worksheet.Cell(CurrentRow, 2).Value = expensesCode;
                    worksheet.Cell(CurrentRow, 2).Style.Font.FontSize = 8; // Replace 8 with the desired font size

                    CurrentRow++;
                }

                // Increment row to leave a blank row between each category
                CurrentRow++;
            }

            CurrentRow = startingRow;


            var range1 = worksheet.Range("A9:A12");
            range1.Merge();
            range1.Value = "P/A/P/ ALLOTMENT \n CLASS/ \n OBJECT OF EXPENDITURE";
            range1.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            range1.Style.Alignment.WrapText = true;
            range1.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            range1.Style.Font.SetBold();
            range1.Style.Fill.BackgroundColor = XLColor.Pink; 
            range1.Style.Font.FontSize = 10;
            worksheet.Column("A").Width = 25;



            var range2 = worksheet.Range("B9:B12");
            range2.Merge();
            range2.Value = "EXPENSES \n CODE";
            range2.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            range2.Style.Alignment.WrapText = true;
            range2.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            range2.Style.Font.SetBold();
            range2.Style.Fill.BackgroundColor = XLColor.Pink;
            range2.Style.Font.FontSize = 10;
            worksheet.Column("B").Width = 15;
            //worksheet.Cell(9, 2).Style.Font.SetBold();
            //worksheet.Cell(9, 2).Value = " EXPENSES \n CODE";
            //worksheet.Cell(9, 2).Style.Font.FontSize = 10;
            // worksheet.Row(9).Height = 16;

            var range3 = worksheet.Range("C9:C12");
            range3.Merge();
            range3.Value = "GAA 2023/\nCONAP BALANCE\n2022";
            range3.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            range3.Style.Alignment.WrapText = true;
            range3.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            range3.Style.Font.SetBold();
            range3.Style.Fill.BackgroundColor = XLColor.Pink;
            range3.Style.Font.FontSize = 10;
            worksheet.Column("C").Width = 18;
            //worksheet.Cell(9, 3).Style.Font.SetBold();
            //worksheet.Cell(9, 3).Value = "GAA 2023 /\n CONAP BALANCE \n 2022";
            //worksheet.Cell(9, 3).Style.Font.FontSize = 11;
            //worksheet.Column("C").Width = 20;
            // Set text on top of the second row
            //worksheet.Cell(9, 3).Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;
            //worksheet.Cell(9, 3).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;

            //worksheet.Cell(9, 3).Style.Fill.BackgroundColor = XLColor.Pink;
            //worksheet.Cell(10, 3).Style.Fill.BackgroundColor = XLColor.Pink;
            //worksheet.Cell(11, 3).Style.Fill.BackgroundColor = XLColor.Pink;
            // worksheet.Columns[3].AutoFit();
            var range4 = worksheet.Range("D9:D12");
            range4.Merge();
            range4.Value = "ADDITIONAL\nSARO\n CY2013";
            range4.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            range4.Style.Alignment.WrapText = true;
            range4.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            range4.Style.Font.SetBold();
            range4.Style.Fill.BackgroundColor = XLColor.Pink;
            range4.Style.Font.FontSize = 10;
            worksheet.Column("D").Width = 12;
            //worksheet.Cell(9, 4).Style.Font.SetBold();
            //worksheet.Cell(9, 4).Value = "ADDITIONAL \n SARO \n CY2013";
            //worksheet.Cell(9, 4).Style.Font.FontSize = 10;
            // Set text on top of the second row
            var range5 = worksheet.Range("E9:E12");
            range5.Merge();
            range5.Value = "REALIGNMENT/\nNORSA";
            range5.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            range5.Style.Alignment.WrapText = true;
            range5.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            range5.Style.Font.SetBold();
            range5.Style.Fill.BackgroundColor = XLColor.Pink;
            range5.Style.Font.FontSize = 10;
            worksheet.Column("E").Width = 15;
            //worksheet.Cell(9, 5).Style.Font.SetBold();
            //worksheet.Cell(9, 5).Value = "REALIGNMENT/NORSA";
            //worksheet.Cell(9, 5).Style.Font.FontSize = 10;
            // Set text on top of the second row
            var range6 = worksheet.Range("F9:F12");
            range6.Merge();
            range6.Value = "SAA\nTRANSFER TO\n CO/OU'S CY\n2023";
            range6.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            range6.Style.Alignment.WrapText = true;
            range6.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            range6.Style.Font.SetBold();
            range6.Style.Fill.BackgroundColor = XLColor.Pink;
            range6.Style.Font.FontSize = 10;
            worksheet.Column("F").Width = 15;

            var range7 = worksheet.Range("G9:G12");
            range7.Merge();
            range7.Value = "SAA TRANSFER\nFROM CO/CHD\nCY2023";
            range7.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            range7.Style.Alignment.WrapText = true;
            range7.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            range7.Style.Font.SetBold();
            range7.Style.Fill.BackgroundColor = XLColor.Pink;
            range7.Style.Font.FontSize = 10;
            worksheet.Column("G").Width = 18;

            var range8h = worksheet.Range("H9:H12");
            range8h.Merge();
            range8h.Value = "TOTAL ADJUSTED\n ALLOTMENT";
            range8h.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            range8h.Style.Alignment.WrapText = true;
            range8h.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            range8h.Style.Font.SetBold();
            range8h.Style.Fill.BackgroundColor = XLColor.Pink;
            range8h.Style.Font.FontSize = 10;
            worksheet.Column("H").Width = 18;

            worksheet.Column("I").Width = 21;
            worksheet.Column("J").Width = 21;
            worksheet.Cell("I9").Value = "";
            worksheet.Cell("J9").Value = "";
            var MergeRange = worksheet.Range("I9:J9").Merge();
            MergeRange.FirstCell().Value = "OBLIGATIONS 2023";
            MergeRange.Style.Font.FontSize = 10;
            MergeRange.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            MergeRange.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            MergeRange.Style.Font.SetBold();
            MergeRange.Style.Fill.BackgroundColor = XLColor.SkyBlue;

            var range9 = worksheet.Range("I10:I12").Merge();
            range9.Value = "This Report\nApril";
            range9.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            range9.Style.Alignment.WrapText = true;
            range9.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            range9.Style.Font.SetBold();
            range9.Style.Fill.BackgroundColor = XLColor.SkyBlue;
            range9.Style.Font.FontSize = 10;
            worksheet.Column("I").Width = 19;

            var range10 = worksheet.Range("J10:J12").Merge();
            range10.Value = "To Date (JAN-\nDEC 2023)";
            range10.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            range10.Style.Alignment.WrapText = true;
            range10.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            range10.Style.Font.SetBold();
            range10.Style.Fill.BackgroundColor = XLColor.SkyBlue;
            range10.Style.Font.FontSize = 10;
            worksheet.Column("J").Width = 19;

            //worksheet.Cell(10, 10).Style.Fill.BackgroundColor = XLColor.SkyBlue;
            //worksheet.Cell(10, 10).Value = "To Date (JAN-DEC 2023)";
            //worksheet.Cell(10, 10).Style.Font.FontSize = 10;
            //worksheet.Cell(10, 10).Style.Font.SetBold();
            //worksheet.Cell(11, 9).Style.Fill.BackgroundColor = XLColor.SkyBlue;
            //worksheet.Cell(11, 10).Style.Fill.BackgroundColor = XLColor.SkyBlue;

            var range11 = worksheet.Range("K9:K12").Merge();
            range11.Value = "UNOBLIGATED\nBALANCE OF\nALLOTMENT";
            range11.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            range11.Style.Alignment.WrapText = true;
            range11.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            range11.Style.Font.SetBold();
            range11.Style.Fill.BackgroundColor = XLColor.Pink;
            range11.Style.Font.FontSize = 10;
            worksheet.Column("K").Width = 20;

            // worksheet.Column("K").Width = 22;
            // worksheet.Cell(9, 11).Value = "UNOBLIGATED BALANCE OF ALLOTMENT";
            // worksheet.Cell(9, 11).Style.Font.FontSize = 10;
            // worksheet.Cell(9, 11).Style.Font.SetBold();
            // worksheet.Cell(9, 11).Style.Fill.BackgroundColor = XLColor.Pink;
            // worksheet.Cell(10, 11).Style.Fill.BackgroundColor = XLColor.Pink;
            // worksheet.Cell(11, 11).Style.Fill.BackgroundColor = XLColor.Pink;
            // worksheet.Cell(9, 11).Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;
            //// worksheet.Cell(9, 11).Style.Alignment.WrapText = true;
            // worksheet.Cell(9, 11).Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;

            worksheet.Column("L").Width = 20;
            worksheet.Column("M").Width = 20;
            worksheet.Column("N").Width = 20;
            worksheet.Column("O").Width = 20;
            worksheet.Column("P").Width = 20;
            //Merge cells
            worksheet.Cell("L9").Value = "";
            worksheet.Cell("M9").Value = "";
            worksheet.Cell("N9").Value = "";
            worksheet.Cell("O9").Value = "";
            worksheet.Cell("P9").Value = "";

            var MergedColumns = worksheet.Range("L9:P9").Merge();
            MergedColumns.FirstCell().Value = "DISBURSEMENTS 2023";
            MergedColumns.Style.Font.FontSize = 10;
            MergedColumns.Style.Font.SetBold();
            MergedColumns.Style.Fill.BackgroundColor = XLColor.SkyBlue;
            MergedColumns.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            MergedColumns.Style.Alignment.Vertical = XLAlignmentVerticalValues.Top;

            var range12 = worksheet.Range("L10:L12").Merge();
            range12.Value = "THIS REPORT\nJANUARY";
            range12.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            range12.Style.Alignment.WrapText = true;
            range12.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            range12.Style.Font.SetBold();
            range12.Style.Fill.BackgroundColor = XLColor.SkyBlue;
            range12.Style.Font.FontSize = 10;
            worksheet.Column("L").Width = 20;

            var range13 = worksheet.Range("M10:M12").Merge();
            range13.Value = "THIS REPORT\nFEBRUARY";
            range13.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            range13.Style.Alignment.WrapText = true;
            range13.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            range13.Style.Font.SetBold();
            range13.Style.Fill.BackgroundColor = XLColor.SkyBlue;
            range13.Style.Font.FontSize = 10;
            worksheet.Column("M").Width = 20;

            //worksheet.Cell(10, 13).Value = "THIS REPORT FEBRUARY";
            //worksheet.Cell(10, 13).Style.Font.FontSize = 10;
            //worksheet.Cell(10, 13).Style.Fill.BackgroundColor = XLColor.SkyBlue;

            var range14 = worksheet.Range("N10:N12").Merge();
            range14.Value = "THIS REPORT\nMARCH";
            range14.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            range14.Style.Alignment.WrapText = true;
            range14.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            range14.Style.Font.SetBold();
            range14.Style.Fill.BackgroundColor = XLColor.SkyBlue;
            range14.Style.Font.FontSize = 10;
            worksheet.Column("N").Width = 20;


            var range15 = worksheet.Range("O10:O12").Merge();
            range15.Value = "THIS REPORT DECEMBER";
            range15.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            range15.Style.Alignment.WrapText = true;
            range15.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            range15.Style.Font.SetBold();
            range15.Style.Fill.BackgroundColor = XLColor.SkyBlue;
            range15.Style.Font.FontSize = 10;
            worksheet.Column("O").Width = 25;

            var range16 = worksheet.Range("P10:P12").Merge();
            range16.Value = "TO DATE(JAN-\nDEC 2023)";
            range16.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            range16.Style.Alignment.WrapText = true;
            range16.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            range16.Style.Font.SetBold();
            range16.Style.Fill.BackgroundColor = XLColor.SkyBlue;
            range16.Style.Font.FontSize = 10;
            worksheet.Column("P").Width = 18;

            var range16r = worksheet.Range("Q9:R9").Merge();
            range16r.Value = "UNPAID OBLIGATIONS";
            range16r.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            range16r.Style.Alignment.WrapText = true;
            range16r.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            range16r.Style.Font.SetBold();
            range16r.Style.Fill.BackgroundColor = XLColor.Yellow;
            range16r.Style.Font.FontSize = 10;

            var range17 = worksheet.Range("Q10:Q12").Merge();
            range17.Value = "DUE AND\nDEMANDABLE";
            range17.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            range17.Style.Alignment.WrapText = true;
            range17.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            range17.Style.Font.SetBold();
            range17.Style.Fill.BackgroundColor = XLColor.Yellow;
            range17.Style.Font.FontSize = 10;
            worksheet.Column("Q").Width = 18;

            var range18 = worksheet.Range("R10:R12").Merge();
            range18.Value = "NOT YET DUE AND\nDEMANDABLE";
            range18.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            range18.Style.Alignment.WrapText = true;
            range18.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            range18.Style.Font.SetBold();
            range18.Style.Fill.BackgroundColor = XLColor.Yellow;
            range18.Style.Font.FontSize = 10;
            worksheet.Column("R").Width = 18;

            var range19 = worksheet.Range("S9:S12").Merge();
            range19.Value = "% OBLIG\nRATE";
            range19.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            range19.Style.Alignment.WrapText = true;
            range19.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            range19.Style.Font.SetBold();
            range19.Style.Fill.BackgroundColor = XLColor.Pink;
            range19.Style.Font.FontSize = 10;
            worksheet.Column("S").Width = 9;

            var range20 = worksheet.Range("T9:T12").Merge();
            range20.Value = "% DISB\nRATE";
            range20.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            range20.Style.Alignment.WrapText = true;
            range20.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            range20.Style.Font.SetBold();
            range20.Style.Fill.BackgroundColor = XLColor.Pink;
            range20.Style.Font.FontSize = 10;
            worksheet.Column("T").Width = 9;

            var range21 = worksheet.Range("U9:U12").Merge();
            range21.Value = "REMARKS";
            range21.Style.Alignment.Vertical = XLAlignmentVerticalValues.Center;
            range21.Style.Alignment.WrapText = true;
            range21.Style.Alignment.Horizontal = XLAlignmentHorizontalValues.Center;
            range21.Style.Font.SetBold();
            range21.Style.Fill.BackgroundColor = XLColor.Pink;
            range21.Style.Font.FontSize = 10;
            worksheet.Column("U").Width = 23;







            // Freeze the first Top Row column
            worksheet.SheetView.Freeze(12, 5);

            // Freeze the second side column
            worksheet.SheetView.FreezeColumns(2);




            // Set the background color for rows nine, ten, eleven, twelve
            /* var rowRange = worksheet.Cells["A9:H12"];
             rowRange.Style.Fill.PatternType = ExcelFillStyle.Solid;
             rowRange.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.Pink);*/
            //2nd option
            //  ExcelFill fill = worksheetCells["A9:H12"].Style.Fill;
            // fill.PatternType = ExcelFillStyle.Solid; // Apply a solid fill style
            // fill.BackgroundColor.SetColor(System.Drawing.Color.Pink); // Set the fill color
            //Autofit all rows








            // Create a memory stream to hold the Excel file content
            var stream = new MemoryStream();

            // Save the workbook to the memory stream
            workbook.SaveAs(stream);

            // Set the position of the memory stream to 0
            stream.Position = 0;

            // Return the Excel file for download
            return File(stream, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "FMIS-DOHCVCHD.xlsx");





        }//end of function


        /*DROPDOWN LIST FOR PREXC*/

        private void PopulatePrexcsDropDownList(object selectedDepartment = null)
        {
            ViewBag.filter = new FilterSidebar("budget_report", "saob", "");
            var departmentsQuery = from d in _MyDbContext.Prexc
                                   orderby d.pap_title
                                   select d;
            ViewBag.Conap = new SelectList((from s in _MyDbContext.SubAllotment.ToList()
                                            select new
                                            {
                                                SuballotmentId = s.SubAllotmentId,
                                                SuballotmentTitle = s.Suballotment_title,
                                            }),
                                       "SuballotmentId",
                                       "SuballotmentTitle",
                                       null);

        }

    }
}